[ checking of models in computer science the checking of models in statistics regression model validation ] [ Temporal logic in finite-state verification January 2011 ] [ Fair computational tree logic January 2011 ] In computer science, model checking refers to the following problem:Given a model of a system, test automatically whether this model meets a given specification.Typically, the systems one has in mind are hardware or software systems, and the specification contains safetyrequirements such as the absence of deadlock s and similar critical states that can cause the system to crash. Model checking is a technique for automatically verifying correctness properties offinite-state systems. In order to solve such a problem algorithm ically, both the model of the system and the specification are formulated in some precise mathematical language: To this end, it is formulated as a task in logic, namely tocheck whether a given structure satisfies a given logical formula.The concept is general and applies to all kinds of logics and suitable structures. A simple model-checking problem is verifying whether a given formula in the propositional logic is satisfied by a given structure. [ Overview ] An important class of model checking methods have been developed for checking models of hardware and software designswhere the specification is given by a temporal logic formula.Pioneering work in the model checking of temporal logic formulae was done by E. M. Clarke and E. A. Emerson [ Allen Emerson E. Clarke Edmund M. 1980 Characterizing correctness properties of parallel programs using fixpoints Automata, Languages and Programming 10.1007/3-540-10003-2_69 ] { Edmund M. Clarke, E. Allen Emerson: &quot; Design and Synthesis of Synchronization Skeletons Using Branching-Time Temporal Logic &quot;. Logic of Programs 1981: 52-71. } [ Clarke E. M. Emerson E. A. Sistla A. P. 1986 Automatic verification of finite-state concurrent systems using temporal logic specifications ACM Transactions on Programming Languages and Systems 8 244 10.1145/5397.5399 2 ] and by J. P. Queille and J. Sifakis. [ Queille J. P. Sifakis J. 1982 Specification and verification of concurrent systems in CESAR International Symposium on Programming 10.1007/3-540-11494-7_22 ] Clarke, Emerson, and Sifakis shared the 2007 Turing Award for their work on model checking. { Press Release: ACM Turing Award Honors Founders of Automatic Verification Technology } { &apos;&apos;USACM&apos;&apos;: 2007 Turing Award Winners Announced } Model checking is most often applied to hardware designs. For software, because of undecidability (see computability theory ) the approach cannot be fully algorithmic; typically it may fail to prove or disprove a given property. The structure is usually given as a source code description in an industrial hardware description language or a special-purpose language. Such a program corresponds to a finite state machine (FSM), i.e., a directed graph consisting of nodes (or vertices ) and edges. A set of atomic proposition s is associated with each node, typically stating which memory elements are one. The nodes represent states of a system, the edges represent possible transitions which may alter the state, while the atomic propositions represent the basic properties that hold at a point of execution. Formally, the problem can be stated as follows: given a desired property, expressed as a temporal logic formula p, and a structure M with initial state s, decide if M,s \models p. If M is finite, as it is in hardware, model checking reduces to a graph search. [ Algorithms ] state space enumeration, symbolic state space enumeration, abstract interpretation, symbolic simulation, symbolic trajectory evaluation, symbolic execution [ Explicit-state model checking ] [ January 2011 ] [ Symbolic model checking ] [ January 2011 ] Instead of enumerating reachable states one at a time, the state space can sometimes be traversed much more efficiently by considering large numbers of states at a single step.When such state space traversal is based on representations of states sets and transition relations as formulas, binary decision diagram s or other related data structures,the model-checking method is symbolic. Historically, the first symbolic methods used BDDs.After the success of propositional satisfiability in solving the planning problem in artificial intelligence (see satplan ) in 1996,the same approach was generalized to model-checking for the Linear Temporal Logic LTL (the planning problem corresponds to model-checking for safety properties).This method is known as bounded model-checking. [ Tools ] [ List of model checking tools ] Model checking tools face a combinatorial blow up of the state-space, commonly known as the state explosion problem, that must be addressed to solve most real-world problems. There are several approaches to combat this problem. Symbolic Model Checking, Kenneth L. McMillan, Kluwer, ISBN 0-7923-9380-5, also online. { Bounded model checking algorithms unroll the FSM for a fixed number of steps k and check whether a property violation can occur in k or fewer steps. This typically involves encoding the restricted model as an instance of } { SAT. The process can be repeated with larger and larger values of k until all possible violations have been ruled out (cf. } { Iterative deepening depth-first search ). } { Partial order reduction can be used (on explicitly represented graphs) to reduce the number of independent interleavings of concurrent processes that need to be considered. The basic idea is that if it does not matter, for the kind of things one intends to prove, whether A or B is executed first, then it is a waste of time to consider both the AB and the BA interleavings. } { Abstraction attempts to prove properties on a system by first simplifying it. The simplified system usually does not satisfy exactly the same properties as the original one so that a process of refinement may be necessary. Generally, one requires the abstraction to be sound (the properties proved on the abstraction are true of the original system); however, most often, the abstraction is not complete (not all true properties of the original system are true of the abstraction). An example of abstraction is, on a program, to ignore the values of non boolean variables and to only consider boolean variables and the control flow of the program; such an abstraction, though it may appear coarse, may in fact be sufficient to prove e.g. properties of } { mutual exclusion. } { Counterexample guided abstraction refinement (CEGAR) begins checking with a coarse (imprecise) abstraction and iteratively refines it. When a violation ( } { counterexample ) is found, the tool analyzes it for feasibility (i.e., is the violation genuine or the result of an incomplete abstraction?). If the violation is feasible, it is reported to the user; if it is not, the proof of infeasibility is used to refine the abstraction and checking begins again. } [ Clarke Edmund Grumberg Orna Jha Somesh Lu Yuan Veith Helmut 2000 Counterexample-Guided Abstraction Refinement Computer Aided Verification 1855 154 10.1007/10722167_15 ] Model checking tools were initially developed to reason about the logical correctness of discrete state systems, but have since been extended to deal with real-time and limited forms of hybrid system s. [ See also ] Binary decision diagram Büchi automaton Computation tree logic Formal verification Linear temporal logic Partial order reduction [ Tools ] For a categorized list of tools see here. BLAST model checker CADP (Construction and Analysis of Distributed Processes) a toolbox for the design of communication protocols and distributed systems CHESS model checker CHIC FDR2 a model checker for verifying real-time systems modeled and specified as CSP Processes ISP code level verifier for MPI programs Java Pathfinder - open source model checker for Java programs Markov Reward Model Checker (MRMC) mCRL2 Toolset, Boost Software License, Based on ACP MoonWalker - open source model checker for.NET programs NuSMV, a new symbolic model checker ompca, an interactive symbolic simulator with API control for C/C++ programs with OpenMP directives. The tool is built as an application of REDLIB. PAT - an enhanced simulator, model checker and refinement checker for concurrent and real-time systems Prism, a probabilistic symbolic model checker Rabbit REDLIB, library for the model-checking of communicating timed automatas with BDD-like diagrams. Applications include a TCTL model-checker with timed fairness quantifications, fair simulation checker, and interactive symbolic simulator for C/C++ programs with OpenMP directives. GUI for model editing and symbolic simulation are also available. SMART Model checker, Symbolic Model checking Analyzer for Reliability and Timing SPIN model checker a general tool for verifying the correctness of distributed software models in a rigorous and mostly automated fashion. TAPAs : tool for the analysis of process algebra. TAPAAL, an integrated tool environment for modeling, validation and verification of Timed-Arc Petri Nets Vereofy, Vereofy.de a software model checker for component-based systems for operational correctness μCRL, GPL, Based on ACP UPPAAL an integrated tool environment for modeling, validation and verification of real-time systems modeled as networks of timed automata Roméo an integrated tool environment for modeling, simulation and verification of real-time systems modeled as parametric, time and stopwatch Petri nets TLA+ model checker by Leslie Lamport AlPiNA, alpina.unige.ch AlPiNA stands for Algebraic Petri Nets Analyzer and is a model checker for Algebraic Petri Nets. McErlang, a model checker for Erlang programs which can be distributed and fault-tolerant. Related techniques Abstract interpretation Automated theorem proving Model checking tools Program analysis (computer science) Static code analysis History E.M. Clarke : &apos;&apos;The birth of model checking&apos;&apos; E. Allen Emerson : &apos;&apos;The Beginning of Model Checking: A Personal Perspective&apos;&apos; (this is also a very good introduction and overview of model checking) Checking&apos;&apos;, Doron Peled, Patrizio Pelliccione, Paola Spoletini, Wiley Encyclopedia of Computer Science and Engineering, 2009. [ References ] [ November 2008 ] [ Further reading ] Checking&apos;&apos;, Doron Peled, Patrizio Pelliccione, Paola Spoletini, Wiley Encyclopedia of Computer Science and Engineering, 2009. Model Checking, Edmund M. Clarke, Jr., Orna Grumberg and Doron A. Peled, MIT Press, 1999, ISBN 0-262-03270-8. Systems and Software Verification: Model-Checking Techniques and Tools, B. Berard, M. Bidoit, A. Finkel, F. Laroussinie, A. Petit, L. Petrucci, P. Schnoebelen, ISBN 3-540-41523-8 Logic in Computer Science: Modelling and Reasoning About Systems, Michael Huth and Mark Ryan, Cambridge University Press, 2004. DOI DOI/org. &apos;&apos;The Spin Model Checker: Primer and Reference Manual&apos;&apos;, Gerard J. Holzmann, Addison-Wesley, ISBN 0-321-22862-6. Julian Bradfield and Colin Stirling, Modal logics and mu-calculi, Inf.ed.ac.uk Specification Patterns KSU.edu Property Pattern Mappings for RAFMC Inria.fr Radu Mateescu and Mihaela Sighireanu Efficient On-the-Fly Model-Checking for Regular Alternation-Free Mu-Calculus, page 6, Science of Computer Programming 46(3):255-281, 2003 Müller-Olm, M., Schmidt, D.A. and Steffen, B. &apos;&apos;Model checking: a tutorial introduction.&apos;&apos; Proc. 6th Static Analysis Symposium, G. File and A. Cortesi, eds., Springer LNCS 1694, 1999, pp.  330–354. de:Model Checking el:Έλεγχος μοντέλων es:Model checking fr:Model checking it:Model checking lt:Modelių tikrinimas ja:モデル検査 pt:Verificação de modelos ru:Проверка моделей sk:Overovanie modelov vi:Model checking