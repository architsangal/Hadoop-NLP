[ http://lilypond.org/doc/v2.15/Documentation/web/authors Authors LilyPond Development team 2010-02-16 ] [ 1996 ] { GPL } { Scheme, } { C++, } { Metafont, } { PostScript, } { Python } { http://lilypond.org/ } { abc_notation, } { LaTeX, } { MusicTex, } { muTeX, } { Povray } { Canorus, } { Denemo, } { Frescobaldi, } { Mutopia Project, } { NoteEdit, } { Rosegarden } { FETA } { Active } { 20MB, 100MB including documentation } { Dutch, } { English, } { French, } { German, } { Hungarian, } { Italian, } { Japanese, } { Spanish } { EPS, } { MIDI, } { MusicXML, } { PDF, } { PS, } { SVG } { application program s, } { music engraving, } { music software, } { scorewriter } GNU LilyPond is a computer program and file format for music engraving. One of LilyPond&apos;s major goals is to produce scores that are engraved with traditional layout rules, reflecting the era when scores were engraved by hand. LilyPond is cross-platform, and is available for several common operating system s; released under the terms of the GNU General Public License, LilyPond is free software. [ History ] The LilyPond project was started in 1996 by Han-Wen Nienhuys and Jan Nieuwenhuizen, after they decided to abandon work on MPP ( MusiXTeX PreProcessor), a project they began collaborating on in 1995. [ http://lilypond.org/doc/v2.12/Documentation/user/lilypond-learning/Preface GNU LilyPond Learning Manual: Preface 2010-02-16 ] [ http://github.com/janneke/mpp MusiXTeX PreProcessor README 2010-03-31 ] [ Version 1.0 ] LilyPond 1.0 was released on July 31, 1998, highlighting the development of a custom music font, Feta, and the complete separation of LilyPond from MusiXTeX. [ http://www.mail-archive.com/gnu-music-discuss%40gnu.org/msg00313.html GNU LilyPond 1.0 released 1998-07-31 2010-02-16 gnu-music-discuss Nienhuys Han-Wen ] [ Version 2.0 ] LilyPond 2.0 was released on September 24, 2003, announcing a simplified syntax model and a much more complete set of facilities for notating various styles of music. [ http://lists.gnu.org/archive/html/info-lilypond/2003-09/msg00008.html LilyPond 2.0 - make beautiful music prints 2003-09-24 2010-02-16 info-lilypond Nienhuys Han-Wen ] [ Design ] LilyPond is mostly written in C++ and uses Scheme (interpreted by GNU Guile ) as its extension language, allowing for user customization. [ http://lilypond.org/doc/v2.13/Documentation/contributor/lilypond-programming-languages LilyPond programming languages 2010-02-15 ] It has a relatively large codebase; as of February 2010, the source comprises over 68,000 lines of C++ and 23,000 lines of Scheme code. [ http://www.ohloh.net/p/lilypond/analyses/latest GNU LilyPond Music Typesetter - Code Analysis 2010-02-16 ] It uses a simple text notation for music input, which LilyPond interprets and processes in a series of stages. [ http://lilypond.org/doc/v2.13/Documentation/contributor/overview-of-lilypond-architecture Overview of LilyPond architecture 2010-02-15 ] In the final stage, music notation is output to PDF (via PostScript ) or other graphical formats, such as SVG or PNG. LilyPond also has the facility to generate MIDI files that correspond to the music notation output. LilyPond is a text-based application, so it does not contain its own graphical user interface to assist with score creation. It does, however, have a flexible input language that strives to be simple, easing the learning curve for new users. LilyPond adheres to the WYSIWYM paradigm; the workflow for typesetting music notation with LilyPond is similar to that of preparing documents with LaTeX. [ Software features ] LilyPond&apos;s primary goal is to produce output comparable to professionally-engraved scores instead of output that looks mechanical and computer-generated. An essay from the LilyPond website, written by LilyPond developers, explains some typographical issues addressed by LilyPond: [ Nienhuys Han-Wen Nieuwenhuizen Jan http://lilypond.org/web/about/automated-engraving/ Obsessed with putting ink on paper 2010-02-15 ] [ http://lilypond.org/web/switch/new-notation Strange notation 2010-02-15 ] Optical font scaling: depending on the staff size, the design of the music font is slightly altered; this is a feature that Donald Knuth&apos;s Computer Modern font is known for. As a result, note heads become more rounded, and staff lines become thicker. Optical spacing: stem directions are taken into account when spacing subsequent notes. Special ledger line handling: ledger lines are shortened when accidentals are nearby, thus enhancing readability. Proportional spacing: notes can be positioned in such a way that exactly reflects their duration. For example, with this setting, the space between consecutive quarter note s is four times greater than between consecutive sixteenth note s. [ Overview of input syntax ] The native input language for LilyPond is comprehensive, consisting of many commands needed for expressing any sort of articulation, dynamic, meter, etc. The ability to embed Scheme code within a LilyPond source file permits arbitrary extensions to the input language and assists with algorithmic composition. Some general syntactic features are listed below. [ http://lilypond.org/doc/v2.13/Documentation/learning/working-on-input-files LilyPond Learning Manual: 1.2.2 Working on input files 2010-09-22 ] [ http://lilypond.org/doc/v2.13/Documentation/notation/writing-pitches LilyPond Notation Reference: 1.1.1 Writing pitches 2010-09-22 ] [ http://lilypond.org/doc/v2.13/Documentation/notation/expressive-marks-attached-to-notes#dynamics LilyPond Notation Reference: 1.3.1 Expressive marks attached to notes 2010-09-22 ] [ http://lilypond.org/doc/v2.13/Documentation/notation/expressive-marks-as-curves#slurs LilyPond Notation Reference: 1.3.2 Expressive marks as curves 2010-09-22 ] [ http://lilypond.org/doc/v2.13/Documentation/notation/beams#manual-beams LilyPond Notation Reference: 1.2.4 Beams 2010-09-22 ] Single-line comments begin with a percent (%) sign. Note s are represented in pitch-duration format: pitch is specified with Helmholtz pitch notation, and duration is specified with a numeral based system. The semantics of the pitch-duration format change depending on the active input mode; this is explained in depth in the LilyPond manual. For example, in absolute mode, a&apos;4 is an A, one octave up from the base A (A3 in scientific pitch notation ), of quarter note length. Commands usually begin with a backslash (such as \time, or \slurUp ). The function of the command in question determines where the command is placed; for example, if the command is used to indicate a fixed dynamic on a specific note, it is placed after the note. Some common commands are represented symbolically to ease typing. One example is with slurs, where ( and ) indicate the beginning and ending of a slur, respectively. Another example is with manual beaming, where [ and ] indicate the extent of the beam. LilyPond&apos;s interface with Pango requires the input character encoding to be UTF-8. [ http://lilypond.org/doc/v2.13/Documentation/notation/text-encoding LilyPond Notation Reference: 3.3.3 Text encoding 2010-09-22 ] One benefit of this is that more than one language can be included in the same source file. [ Example of LilyPond input file ] \version &quot; 2.15.14 &quot; \include &quot; english.ly &quot; \header { { title = \markup { &quot; Excerpt from &quot; \italic &quot; fibonacci &quot; } } { composer = &quot; Patrick McCarty &quot; } { %copyright = } { % \markup \fontsize #-5 { } { % Copyright © 2009. } { % Typeset with GNU LilyPond. } { % Released into public domain by the composer. } { % } } } \paper { { paper-height = 4.6\in } { paper-width = 8.5\in } { indent = #0 } { system-count = #2 } } \score { { \new PianoStaff = &quot; pianostaff &quot; &lt; &lt; } { \new Staff = &quot; RH &quot; \relative c&apos; { } { #(set-accidental-style &apos;piano &apos;Score) } { \clef &quot; treble &quot; } { \time 2/4 } { \set Score.currentBarNumber = #51 } { \tempo &quot; Slow and steady &quot; 4 = 60 } { &lt; e gs, &gt; 4 \acciaccatura { cs16[ ds] } &lt; e gs, &gt; 4 | % m. 51 } { &lt; ds gs, &gt; 4 \acciaccatura { e16[ ds] } &lt; cs gs &gt; 4 | % m. 52 } { &lt; cs gs &gt; 4 \acciaccatura { ds16[ cs] } &lt; c g &gt; 4 | % m. 53 } { &lt; cs gs &gt; 4 \acciaccatura { ds16[ e] } &lt; es bs gs &gt; 4 | % m. 54 } { &lt; e gs, &gt; 4 \acciaccatura { cs16[ ds] } e16 f gs a | % m. 55 } { &lt; gs c, &gt; 8 \acciaccatura { as16[ gs] } } { &lt; es b &gt; 8 ~ &lt; es b &gt; 16 ds b as | % m. 56 } { b16 d8 bf32 f&apos; g16 af bf c | % m. 57 } { &lt; df df, &gt; 16 ( c af ) &lt; e&apos; e, &gt; ( ds b ) &lt; g&apos; g, &gt; ( ds | % m. 58 } { \time 3/4 } { &lt; gs gs, &gt; 16 ) \noBeam d,16 f gs } { a16 e f b } { c16 d, ( f gs | % m. 59 } { a16 b ) e, ( f } { gs16 b c ) f, ( } { gs16 as b c ) | % m. 60 } { } } { \new Dynamics = &quot; Dynamics_pf &quot; { } { s4 \p \ &lt; s4 | % m. 51 } { s4 s4 | % m. 52 } { s4 \mp \ &gt; s4 | % m. 53 } { s4 s4 \! | % m. 54 } { s4 \p s4 | % m. 55 } { s1 * 2/4 | % m. 56 } { s4 \ &lt; s4 | % m. 57 } { s4 s4 | % m. 58 } { \override DynamicText #&apos;extra-spacing-width = #&apos;(-0.75. 0.75) } { s16 \mf s16 \p s8 s4 s4 | % m. 59 } { s2. | % m. 60 } { } } { \new Staff = &quot; LH &quot; \relative c, { } { \clef &quot; bass &quot; } { \time 2/4 } { cs4. cs8 | % m. 51 } { cs4. d8 | % m. 52 } { f4. a8 | % m. 53 } { f4. d8 | % m. 54 } { cs4. cs8 | % m. 55 } { d4 ds | % m. 56 } { gs4. bf,8 | % m. 57 } { f&apos;4 b, | % m. 58 } { \time 3/4 } { d4. d8 ~ d4 | % m. 59 } { ef2 f4 | % m. 60 } { } } { &gt; &gt; } } [ Corresponding output ] Rendered output [ Collaboration with other projects ] { measure s of &apos;&apos; } { Adeste Fideles &apos;&apos;, generated by LilyPond. } Several graphical scorewriter s —such as Rosegarden, MuseScore, NoteEdit, Canorus, Denemo, and TuxGuitar —can export files directly to LilyPond format. Other graphical applications serve as front ends to LilyPond, including Frescobaldi and the LilyPondTool plugin for jEdit. The Mutopia Project, which distributes free content sheet music, uses LilyPond to typeset its music, as does Musipedia, a collaborative music encyclopedia. WikiTeX, a MediaWiki interface, supports editing LilyPond notation directly in wiki articles. Emacs &apos; org-mode contains support for embedding LilyPond scores into documents. { github.com } [ Comparison to other scorewriters ] Finale and Sibelius are two proprietary scorewriters often compared to LilyPond. One LilyPond user wrote a series of articles comparing output quality between Finale and LilyPond. [ Hawryluk Andrew http://www.musicbyandrew.ca/finale-lilypond-1.html Finale and LilyPond 2010-02-15 ] Another scorewriter with comparable features to LilyPond is SCORE. [ See also ] [ Free software ] List of scorewriters ABC notation Denemo Frescobaldi GUIDO music notation NoteEdit Rosegarden [ References ] [ 30em ] [ External links ] [ LilyPond ] Official LilyPond website WebLily.net - Web based LilyPond interface &quot; Lilypond, a system for automated music engraving &quot; (by Han-Wen Nienhuys, Jan Nieuwenhuizen; PDF ) { Category:Scorewriters } Category:GNU Project software Category:Free music software Category:Free software programmed in C++ Category:Music notation file formats Category:Cross-platform software ca:LilyPond de:LilyPond es:GNU LilyPond eo:LilyPond fr:GNU LilyPond it:GNU LilyPond la:LilyPond lv:GNU LilyPond hu:GNU LilyPond nl:LilyPond ja:GNU LilyPond no:Lilypond pl:LilyPond pt:LilyPond ru:GNU LilyPond tr:LilyPond uk:GNU LilyPond