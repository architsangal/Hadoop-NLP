[ Refactor the use of &apos;refactor&apos; on Wikipedia Wikipedia:Refactoring talk pages ] Code refactoring is a &quot; disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behavior &quot;, { [Martin Fowler in http://refactoring.com] } undertaken in order to improve some of the nonfunctional attributes of the software.Typically, this is done by applying series of &quot; refactorings &quot;, each of which is a (usually) tiny change in a computer program &apos;s source code that does not modify its functional requirement s. Advantages include improved code readability and reduced complexity to improve the maintainability of the source code, as well as a more expressive internal architecture or object model to improve extensibility. [ Kerievsky Joshua Refactoring to Patterns Addison Wesley 2004 ] [ Overview ] Refactoring is usually motivated by noticing a code smell. [ Fowler Martin Refactoring: Improving the design of existing code Addison Wesley 1999 ] For example the method at hand may be very long, or it may be a near duplicate of another nearby method. Once recognized, such problems can be addressed by refactoring the source code, or transforming it into a new form that behaves the same as before but that no longer &quot; smells &quot;. For a long routine, extract one or more smaller subroutines. Or for duplicate routines, remove the duplication and utilize one shared function in their place. Failure to perform refactoring can result in accumulating technical debt. There are two general categories of benefits to the activity of refactoring. [ Martin Robert Clean Code Prentice Hall 2009 ] Maintainability. It is easier to fix bugs because the source code is easy to read and the intent of its author is easy to grasp. This might be achieved by reducing large monolithic routines into a set of individually concise, well-named, single-purpose methods. It might be achieved by moving a method to a more appropriate class, or by removing misleading comments. Extensibility. It is easier to extend the capabilities of the application if it uses recognizable design patterns, and it provides some flexibility where none before may have existed. Before refactoring a section of code, a solid set of automatic unit tests is needed. The tests should demonstrate in a few seconds [ February 2011 ] that the behavior of the module is correct. The process is then an iterative cycle of making a small program transformation, testing it to ensure correctness, and making another small transformation. If at any point a test fails, you undo your last small change and try again, possibly in a different way. Through many small steps the program moves from where it was to where you want it to be. Proponents of extreme programming and other agile methodologies describe this activity as an integral part of the software development cycle. [ List of refactoring techniques ] Here are some examples of code refactorings; some of these may only apply to certain languages or language types. A longer list can be found in Fowler&apos;s Refactoring book and on Fowler&apos;s Refactoring Website. { Refactoring techniques in Fowler&apos;s refactoring Website } Encapsulate Field – force code to access the field with getter and setter methods Generalize Type – create more general types to allow for more code sharing Replace type-checking code with State/Strategy Replace type-checking code with State/Strategy Replace conditional with polymorphism Replace conditional with polymorphism { Techniques for breaking code apart into more logical pieces } Componentization breaks code down into reusable semantic units which present clear, well-defined, simple-to-use interfaces. Extract Class moves part of the code from an existing class into a new class. Extract Method, to turn part of a larger method into a new method. By breaking down code in smaller pieces, it is more easily understandable. This is also applicable to function s. { Techniques for improving names and location of code } Move Method or Move Field – move to a more appropriate Class or source file Rename Method or Rename Field – changing the name into a new one that better reveals its purpose Pull Up – in OOP, move to a superclass Push Down – in OOP, move to a subclass [ Hardware refactoring ] While the term refactoring originally referred exclusively to refactoring of software code, in recent years code written in hardware description language s (HDLs) has also been refactored. The term hardware refactoring is used as a shorthand term for refactoring of code in hardware description languages. Since HDLs are not considered to be programming language s by most hardware engineers, { Hardware description languages#HDL and programming languages } hardware refactoring is to be considered a separate field from traditional code refactoring. Automated refactoring of analog hardware descriptions (in VHDL-AMS ) has been proposed by Zeng and Huss. { Kaiping Zeng, Sorin A. Huss, &quot; Architecture refinements by code refactoring of behavioral VHDL-AMS models &quot;. ISCAS 2006 } In their approach, refactoring preserves the simulated behavior of a hardware design. The non-functional measurement that improves is that refactored code can be processed by standard synthesis tools, while the original code cannot.Refactoring of digital HDLs, albeit manual refactoring, has also been investigated by Synopsys fellow Mike Keating. { M. Keating : &quot; Complexity, Abstraction, and the Challenges of Designing Complex Systems &quot;, in DAC&apos;08 tutorial &quot; Bridging a Verification Gap: C++ to RTL for Practical Design &quot; } { M. Keating, P. Bricaud: Reuse Methodology Manual for System-on-a-Chip Designs, Kluwer Academic Publishers, 1999. } His target is to make complex systems easier to understand, which increasesthe designers&apos; productivity. In the summer of 2008, there was an intense discussion about refactoring of VHDL code on the news://comp.lang.vhdl newsgroup. { http://newsgroups.derkeiler.com/Archive/Comp/comp.lang.vhdl/2008-06/msg00173.html } The discussion revolved around a specific manual refactoring performed by one engineer, and the question to whether or not automated tools for such refactoring exist. As of late 2009, Sigasi is offering automated tool support for VHDL refactoring. { Sigasi launches its first production release for a VHDL development environment } AMIQ DVT, an IDE for hardware design and verification, provides refactoring capabilities for e (verification language), SystemVerilog, Verilog and VHDL. { www.dvteclipse.com } [ History ] In the past refactoring was avoided in development processes. One example of this is that CVS (created in 1984) does not version the moving or renaming of files and directories. Although refactoring code has been done informally for years, William Griswold &apos;s 1991 Ph.D. dissertation is one of the first major academic works on refactoring functional and procedural programs, followed by William Opdyke &apos;s 1992 dissertation on the refactoring of object-oriented programs, { Martin Fowler, &quot; MF Bliki: EtymologyOfRefactoring &quot; } although all the theory and machinery have long been available as program transformation systems. All of these resources provide a catalog of common methods for refactoring; a refactoring method has a description of how to apply the method and indicator s [ June 2011 ] for when you should (or should not) apply the method. Martin Fowler &apos;s book Refactoring: Improving the Design of Existing Code is the canonical reference. The first known use of the term &quot; refactoring &quot; in the published literature was in a September, 1990 article by William F. Opdyke and Ralph E. Johnson. [ William F. Opdyke William Opdyke Johnson, Ralph E. Refactoring: An Aid in Designing Application Frameworks and Evolving Object-Oriented Systems Proceedings of the Symposium on Object Oriented Programming Emphasizing Practical Applications (SOOPPA) ACM 1990 September ] Griswold&apos;s Ph.D. thesis, [ William G Griswold William Griswold Program Restructuring as an Aid to Software Maintenance Ph.D. thesis University of Washington 1991 July http://cseweb.ucsd.edu/~wgg/Abstracts/gristhesis.pdf 2011-12-24 ] Opdyke&apos;s Ph.D. thesis, [ William F Opdyke William Opdyke Refactoring Object-Oriented Frameworks Ph.D. thesis University of Illinois at Urbana-Champaign 1992 June ftp://st.cs.uiuc.edu/pub/papers/refactoring/opdyke-thesis.ps.Z compressed Postscript 2008-02-12 ] published in 1992, also used this term. The term &quot; factoring &quot; has been used in the Forth community since at least the early 1980s. Chapter Six of Leo Brodie &apos;s book Thinking Forth (1984) is dedicated to the subject. In extreme programming, the Extract Method refactoring technique has essentially the same meaning as factoring in Forth; to break down a &quot; word &quot; (or function ) into smaller, more easily maintained functions. Refactorings can also be reconstructed [ Peter Wei &amp; szlig;gerber Diehl, S. Identifying Refactorings from Source-Code Changes http://www.st.uni-trier.de/~diehl/pubs/ase06.pdf Proceedings of 21st IEEE/ACM International Conference on Automated Software Engineering (ASE 2006) ACM 2006 ] posthoc to produce concise descriptions of complex software changes recorded in software repositories like CVS or SVN. [ Automated code refactoring ] Many software editors and IDEs have automated refactoring support. Here is a list of a few of these editors, or so-called refactoring browsers. and RefactoringNG, a Netbeans module for refactoring where you can write transformations rules of the program&apos;s abstract syntax tree. { JDeveloper (for Java) } { Embarcadero Delphi } { Visual Studio (for.NET) } { Telerik } { JustCode (addon for Visual Studio) } { ReSharper (addon for Visual Studio) } { Coderush (addon for Visual Studio) } { Visual Assist (addon for Visual Studio with refactoring support for VB, VB.NET. C# and C++) } { DMS Software Reengineering Toolkit (Implements large-scale refactoring for C, C++, C#, COBOL, Java, PHP and other languages) } { Photran (a } { Fortran plugin for the } { Eclipse IDE ) } { SharpSort addin for } { Visual Studio 2008 } { Sigasi HDT (for VHDL) } { Xcode } { Smalltalk Refactoring Browser (for } { Smalltalk ) } { Simplifide (for Verilog, VHDL and SystemVerilog) } { Tidier (for } { Erlang ) } { AMIQ DVT (for e, SystemVerilog, Verilog and VHDL) } [ See also ] Code review Database refactoring Design pattern (computer science) Obfuscated code Software peer review Prefactoring Rewrite (programming) Separation of concerns Test-driven development Modular programming Redesign (software) [ References ] [ 30em ] [ Further reading ] [ Martin Fowler Martin Fowler 1999 Refactoring. Improving the Design of Existing Code Addison-Wesley 0-201-48567-2 ] [ William C. Wake 2003 Refactoring Workbook Addison-Wesley 0-321-10929-5 ] [ Michael C Feathers 2004 Working Effectively with Legacy Code Prentice Hall 0-13-117705-2 ] [ Joshua Kerievsky 2004 Refactoring To Patterns Addison-Wesley 0-321-21335-1 ] [ Danijel Arsenovski 2008 Professional Refactoring in Visual Basic Wrox 0-470-17979-1 ] [ Danijel Arsenovski 2009 Professional Refactoring in C# and ASP.NET Wrox 978-0-470-43452-9 ] [ Peter Ritchie 2010 Refactoring with Visual Studio 2010 Packt 978-1-84968-010-3 ] Mens, Tom and Tourwé, Tom (2004) &apos;&apos;A Survey of Software Refactoring&apos;&apos;, IEEE Transactions on Software Engineering, February 2004 (vol. 30 no. 2), pp.  126–139 [ External links ] [ Computers/Programming/Methodologies/Refactoring Refactoring ] What Is Refactoring? (c2.com article) Martin Fowler&apos;s homepage about refactoring Aspect-Oriented Refactoring by Ramnivas Laddad A Survey of Software Refactoring by Tom Mens and Tom Tourwé Refactoring Java Code Refactoring To Patterns Catalog Extract Boolean Variable from Conditional (a refactoring pattern not listed in the above catalog) Test-Driven Development With Refactoring Revisiting Fowler’s Video Store: Refactoring Code, Refining Abstractions Category:Extreme programming Category:Technology neologisms ar:إعادة هيكلة الكود ca:Refacció cs:Refaktorování da:Refactoring de:Refactoring es:Refactorización fr:Refactorisation gl:Refactorización ko:리팩토링 hr:Refaktoriranje koda it:Refactoring he:Refactoring lt:Pertvarkymas (programavimas) nl:Refactoren ja:リファクタリング (プログラミング) pl:Refaktoryzacja pt:Refatoração ru:Рефакторинг fi:Refaktorointi sv:Omstrukturering av kod uk:Рефакторинг vi:Cải tiến mã nguồn zh:代码重构