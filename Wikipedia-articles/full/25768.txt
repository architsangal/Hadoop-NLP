[ Ruby on Rails ] [ 2012 04 20 ] { duck, } { dynamic } { Ruby MRI, } { YARV, } { JRuby, } { Rubinius, } { IronRuby, } { MacRuby, } { HotRuby } { Ada, } { C++, } { CLU, } { Dylan, } { Eiffel, } [ Cooper Peter Beginning Ruby: From Novice to Professional 2nd Beginning from Novice to Professional 2009 APress Berkeley 1-4302-2363-4 101 To a lesser extent, Python, LISP, Eiffel, Ada, and C++ have also influenced Ruby. ] { Lisp, } { Perl, } { Python, } { Smalltalk } [ Bini Ola Practical JRuby on Rails Web 2.0 Projects: Bringing Ruby on Rails to Java 2007 APress Berkeley 1-59059-881-4 3 It draws primarily on features from Perl, Smalltalk, Python, Lisp, Dylan, and CLU. ] { Falcon, } { Fancy, } [ http://rubini.us/2011/02/23/introduction-to-fancy/ Introduction to Fancy Bertels Christopher 23 February 2011 Rubinius blog Engine Yard 2011-07-21 ] { Groovy, } { Ioke, } [ http://ioke.org/ Ioke Bini Ola Ioke.org 2011-07-21 inspired by Io, Smalltalk, Lisp and Ruby ] { Mirah, } { Nu, } [ http://programming.nu/about About Nu™ Burks Tim Programming Nu™ Neon Design Technology, Inc. 2011-07-21 ] { Reia } { Cross-platform } { Ruby License or } { BSD License COPYING in Ruby official source repository } { BSDL in Ruby official source repository } {.rb,.rbw } { Ruby Programming } Ruby is a dynamic, reflective, general-purpose object-oriented programming language that combines syntax inspired by Perl with Smalltalk -like features. It was also influenced by Eiffel and Lisp. Ruby was first designed and developed in the mid-1990s by Yukihiro &quot; Matz &quot; Matsumoto in Japan. Ruby supports multiple programming paradigm s, including functional, object oriented, imperative and reflective. It also has a dynamic type system and automatic memory management; it is therefore similar in varying respects to Smalltalk, Python, Perl, Lisp, Dylan, Pike, and CLU. The standard 1.8.7 implementation is written in C, as a single-pass interpreted language. The language specifications for Ruby were developed by the Open Standards Promotion Center of the Information-Technology Promotion Agency (a Japanese government agency) for submission to the Japanese Industrial Standards Committee and then to the International Organization for Standardization. It was accepted as a Japanese Industrial Standard (JIS X 3017) in 2011 { プログラム言語RubyのJIS規格（JIS X 3017）制定について } and an international standard (ISO/IEC 30170) in 2012. { プログラム言語Ruby、国際規格として承認 } [ 2010 ], there are a number of complete or upcoming alternative implementations of Ruby, including YARV, JRuby, Rubinius, IronRuby, MacRuby, and HotRuby. Each takes a different approach, with IronRuby, JRuby, MacRuby and Rubinius providing just-in-time compilation and MacRuby also providing ahead-of-time compilation. The official 1.9 branch uses YARV, as will 2.0 (development), and will eventually supersede the slower Ruby MRI. [ History ] Ruby was conceived on February 24, 1993 by Yukihiro Matsumoto who wished to create a new language that balanced functional programming with imperative programming. { Ruby-Lang About Ruby } Matsumoto has said, &quot; I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That&apos;s why I decided to design my own language. &quot; { http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html An Interview with the Creator of Ruby } At a Google Tech Talk in 2008 Matsumoto further stated, &quot; I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language. &quot; { http://www.youtube.com/watch?v=oEkJvvGEtB4 Google Tech Talks - Ruby 1.9 } [ Choice of the name &quot; Ruby &quot; ] The name &quot; Ruby &quot; was decided on during an online chat session between Matsumoto and Keiju Ishitsuka on February 24, 1993, before any code had been written for the language. { http://blog.nicksieger.com/articles/2006/10/20/rubyconf-history-of-ruby History of Ruby } Initially two names were proposed: &quot; Coral &quot; and &quot; Ruby &quot;, with the latter being chosen by Matsumoto in a later email to Ishitsuka. { http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/88819 &quot; [FYI: historic]The decisive moment of the language name Ruby. (Re: [ANN] ruby 1.8.1) &quot; - Email from Hiroshi Sugihara to ruby-talk } Matsumoto has later remarked that a factor in choosing the name &quot; Ruby &quot; was because it was the birthstone of one of his colleagues. [ http://www.ruby-doc.org/docs/ruby-doc-bundle/FAQ/FAQ.html The Ruby Language FAQ - 1.3 Why the name &apos;Ruby&apos;? Ruby-Doc.org April 10, 2012 ] [ http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/394 Re: the name of Ruby? Ruby-Talk June 11, 1999 Yukihiro Matsumoto April 10, 2012 ] [ First publication ] The first public release of Ruby 0.95 was announced on Japanese domestic newsgroup s on December 21, 1995. { More archeolinguistics: unearthing proto-Ruby } { &quot; Re: history of ruby &quot; - Email from Yukihiro Matsumoto to ruby-talk } Subsequently three more versions of Ruby were released in two days. The release coincided with the launch of the Japanese-language ruby-list mailing list, which was the first mailing list for the new language. Already present at this stage of development were many of the features familiar in later releases of Ruby, including object-oriented design, classes with inheritance, mixin s, iterator s, closure s, exception handling, and garbage collection. { &quot; TUTORIAL - ruby&apos;s features &quot; - Email From Yukihiro Matsumoto to ruby-list } [ Ruby 1.0 ] Ruby reached version 1.0 on December 25, 1996. Following the release of Ruby 1.3 in 1999 the first English language mailing list ruby-talk began, which signalled a growing interest in the language outside of Japan. In September 2000, the first English language book Programming Ruby was printed, which was later freely released to the public further widening the adoption of Ruby amongst English speakers. [ history and new features for pre-1.9 versions history and new features for pre-1.9 versions ] [ Ruby 1.2 ] Ruby 1.2 was initially released in December 1998. [ Ruby 1.4 ] Ruby 1.4 was initially released in August 1999. [ Ruby 1.6 ] Ruby 1.6 was initially released in September 2000. [ Ruby 1.8 ] Ruby 1.8 was initially released in August 2003, and was stable for a long time. Although deprecated, there is still code based on it. Ruby 1.8 is incompatible with Ruby 1.9. [ Ruby on Rails ] Around 2005, interest in the Ruby language surged in tandem with Ruby on Rails, a popular web application framework written in Ruby. Rails is frequently credited with making Ruby &quot; famous &quot;. [ Ruby 1.9 ] Ruby 1.9 was released in December 2007. The latest stable version of the reference implementation is 1.9.3 and is dual-licensed under the Ruby License and a BSD License. Ruby 1.9 introduces many significant changes over the 1.8 series. { http://slideshow.rubyforge.org/ruby19.html } Examples: Block local variables (variables that are local to the block in which they are declared) An additional lambda syntax ( fun = - &gt; (a,b) { puts a + b } ) Per-string character encoding s are supported New socket API ( IPv6 support) require_relative import security [ Ruby 2.0 ] Ruby 1.9 will be followed by Ruby 2.0. [ http://www.rubyinside.com/ruby-2-0-implementation-work-begins-what-is-ruby-2-0-and-whats-new-5515.html Ruby 2.0 Implementation Work Begins: What is Ruby 2.0 and What’s New? 2011-12-23 ] Ruby 2.0 is rumored to be &quot; 100% compatible &quot; with Ruby 1.9.3. { http://www.rubyinside.com/ruby-2-0-release-schedule-announced-roll-on-2013-5536.html } [ 2011 Oct ], the plan is to have code freeze October 2012 and release February 2013. [ Philosophy ] Matsumoto has said that Ruby is designed for programmer productivity and fun, following the principles of good user interface design. { The Ruby Programming Language by Yukihiro Matsumoto on 2000-06-12 (informit.com) } He stresses that systems design needs to emphasize human, rather than computer, needs: { The Philosophy of Ruby, A Conversation with Yukihiro Matsumoto, Part I by Bill Venners on 2003-09-29 (Artima Developer) } [ Often people, especially computer engineers, focus on the machines. They think, &quot; By doing this, the machine will run faster. By doing this, the machine will run more effectively. By doing this, the machine will something something something. &quot; They are focusing on machines. But in fact we need to focus on humans, on how humans care about doing programming or operating the application of the machines. We are the masters. They are the slaves. ] Ruby is said to follow the principle of least astonishment (POLA), meaning that the language should behave in such a way as to minimize confusion for experienced users. Matsumoto has said his primary design goal was to make a language which he himself enjoyed using, by minimizing programmer work and possible confusion. He has said that he had not applied the principle of least surprise to the design of Ruby, but nevertheless the phrase has come to be closely associated with the Ruby programming language. The phrase has itself been a source of surprise, as novice users may take it to mean that Ruby&apos;s behaviors try to closely match behaviors familiar from other languages. In a May 2005, discussion on the newsgroup comp.lang.ruby, Matsumoto attempted to distance Ruby from POLA, explaining that because any design choice will be surprising to someone, he uses a personal standard in evaluating surprise. If that personal standard remains consistent, there would be few surprises for those familiar with the standard. { Ruby Weekly News 23rd - 29th May 2005 } Matsumoto defined it this way in an interview: {. And it means the principle of least surprise after you learn Ruby very well. For example, I was a } { C++ programmer before I started designing Ruby. I programmed in } { C++ exclusively for two or three years. And after two years of C++ programming, it still surprises me. } [ Features ] Thoroughly object-oriented with inheritance, mixin s and metaclass es An Interview with the Creator of Ruby Dynamic typing and duck typing Everything is an expression (even statements ) and everything is executed imperatively (even declarations ) Succinct and flexible syntax Dynamic Productivity with Ruby that minimizes syntactic noise and serves as a foundation for domain-specific languages martinfowler.com Dynamic reflection and alteration of objects to facilitate metaprogramming Ruby - Add class methods at runtime Lexical closures, iterator s and generators, with a unique block syntax Blocks and Closures in Ruby Literal notation for arrays, hashes, regular expression s and symbols Embedding code in strings ( interpolation ) Default argument s Four levels of variable scope ( global, class, instance, and local ) denoted by sigils or the lack thereof Garbage collection First-class continuation s Strict boolean coercion rules (everything is true except false and nil ) Exception handling Operator overloading Built-in support for rational numbers, complex numbers and arbitrary-precision arithmetic Custom dispatch behavior (through method_missing and const_missing ) Native threads and cooperative fibers Initial support for Unicode and multiple character encodings (still buggy as of version 1.9) Unicode support in Ruby is too buggy compared to similar programming languages Native plug-in API in C Interactive Ruby Shell (a REPL ) Centralized package management through RubyGems Implemented on all major platforms Large standard library [ Semantics ] Ruby is object-oriented : every value is an object, including classes and instances of types that many other languages designate as primitives (such as integer s, booleans, and &quot; nil &quot; ). Variables always hold references to objects. Every function is a method and methods are always called on an object. Methods defined at the top level scope become members of the Object class. Since this class is an ancestor of every other class, such methods can be called on any object. They are also visible in all scopes, effectively serving as &quot; global &quot; procedures. Ruby supports inheritance with dynamic dispatch, mixin s and singleton methods (belonging to, and defined for, a single instance rather than being defined on the class). Though Ruby does not support multiple inheritance, classes can import module s as mixins. Ruby has been described as a multi-paradigm programming language : it allows procedural programming (defining functions/variables outside classes makes them part of the root, &apos;self&apos; Object), with object orientation (everything is an object) or functional programming (it has anonymous function s, closures, and continuation s; statements all have values, and functions return the last evaluation). It has support for introspection, reflection and metaprogramming, as well as support for interpreter-based { Green threads } thread s. Ruby features dynamic typing, and supports parametric polymorphism. According to the Ruby FAQ, { Ruby FAQ } &quot; If you like Perl, you will like Ruby and be right at home with its syntax. If you like Smalltalk, you will like Ruby and be right at home with its semantics. If you like Python, you may or may not be put off by the huge difference in design philosophy between Python and Ruby/Perl. &quot; [ Syntax ] The syntax of Ruby is broadly similar to Perl and Python. Class and method definitions are signaled by keywords. In contrast to Perl, variables are not obligatorily prefixed with a sigil. When used, the sigil changes the semantics of scope of the variable. One difference from C and Perl is that keywords are typically used to define logical code blocks, without braces (i.e., pair of { and }). For practical purposes there is no distinction between expressions and statements. { In Ruby&apos;s syntax, statement is just a special case of an expression which cannot appear as an argument (e.g. multiple assignment). http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/1120 statement [...] can not be part of expression unless grouped within parentheses. http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/2460 } Line breaks are significant and taken as the end of a statement; a semicolon may be equivalently used. Unlike Python, indentation is not significant. One of the differences of Ruby compared to Python and Perl is that Ruby keeps all of its instance variables completely private to the class and only exposes them through accessor methods ( attr_writer, attr_reader, etc.). Unlike the &quot; getter &quot; and &quot; setter &quot; methods of other languages like C++ or Java, accessor methods in Ruby are created with a single line of code via metaprogramming. As invocation of these methods does not require the use of parentheses, it is trivial to change an instance variable into a full function, without modifying a single line of code or having to do any refactoring achieving similar functionality to C# and VB.NET property members. Python&apos;s property descriptors are similar, but come with a tradeoff in the development process. If one begins in Python by using a publicly exposed instance variable, and later changes the implementation to use a private instance variable exposed through a property descriptor, code internal to the class may need to be adjusted to use the private variable rather than the public property. Ruby’s design forces all instance variables to be private, but also provides a simple way to declare set and get methods. This is in keeping with the idea that in Ruby, one never directly accesses the internal members of a class from outside of it; rather, one passes a message to the class and receives a response. See the examples section for samples of code demonstrating Ruby syntax. [ Deviations from behavior elsewhere ] Some features which differ notably from languages such as C or Perl : Greeting &lt; &lt; &quot; world! &quot; if Greeting == &quot; Hello &quot; &lt; /code &gt; does not generate an error or warning. This is similar to final variables in Java or a const pointer to a non-const object in C++, but Ruby provides the functionality to &quot; freeze &quot; an object, unlike Java. Some features which differ notably from other languages: The usual operators for conditional expressions, and and or, do not follow the normal rules of precedence: and does not bind tighter than or. Ruby also has expression operators || and &amp; &amp; which work as expected. A list of so-called gotcha s may be found in Hal Fulton&apos;s book The Ruby Way, 2nd ed (ISBN 0-672-32884-4), Section 1.5. A similar list in the 1st edition pertained to an older version of Ruby (version 1.6), some problems of which have been fixed in the meantime. retry, for example, now works with while, until, and for, as well as iterators. [ Interaction ] [ Interactive Ruby Shell ] The Ruby official distribution also includes &quot; &lt; code &gt; irb { &quot;, an interactive command-line interpreter which can be used to test code quickly. The following code fragment represents a sample session using irb : } $ irbirb(main):001:0 &gt; puts &quot; Hello, World &quot; Hello, World = &gt; nilirb(main):002:0 &gt; 1+2 = &gt; 3 [ Examples ] The following examples can be run in a Ruby shell such as Interactive Ruby Shell or saved in a file and run from the command line by typing ruby &lt; filename &gt;. Classic Hello world example: puts &quot; Hello World! &quot; Some basic Ruby code: Everything, including a literal, is an object, so this works: -199.abs # 199 &quot; ice is nice &quot;.length # 11 &quot; ruby is cool. &quot;.index( &quot; u &quot; ) # 1 &quot; Nice Day Isn&apos;t It? &quot;.downcase.split( &quot; &quot; ).uniq.sort.join # &quot; &apos;?acdeinsty &quot; Conversions: puts &quot; What&apos;s your favorite number? &quot; number = gets.chompoutput_number = number.to_i + 1puts output_number.to_s + &apos; is a bigger and better favorite number.&apos; [ Strings ] There are a variety of methods for defining strings in Ruby. The following assignments are equivalent and support Variable interpolation : a = &quot; \nThis is a double-quoted string\n &quot; a = %Q{\nThis is a double-quoted string\n}a = %{\nThis is a double-quoted string\n}a = %/\nThis is a double-quoted string\n/a = &lt; &lt; -BLOCK This is a double-quoted stringBLOCK The following assignments are equivalent and produce raw strings : a = &apos;This is a single-quoted string&apos;a = %q{This is a single-quoted string} [ Collections ] Constructing and using an array : a = [1, &apos;hi&apos;, 3.14, 1, 2, [4, 5]] puts a[2] # 3.14puts a.[] (2) # 3.14puts a.reverse # [[4, 5], 2, 1, 3.14, &apos;hi&apos;, 1] puts a.flatten.uniq # [1, &apos;hi&apos;, 3.14, 2, 4, 5] Constructing and using an associative array (called hashes in Ruby): hash = { :water = &gt; &apos;wet&apos;, :fire = &gt; &apos;hot&apos; }puts hash[:fire] # Prints: hot hash.each_pair do |key, value| # Or: hash.each do |key, value| { puts &quot; #{key} is #{value} &quot; } end Prints: water is wet fire is hot hash.delete :water # Deletes :water = &gt; &apos;wet&apos;hash.delete_if {|key,value| value==&apos;hot&apos;} # Deletes :fire = &gt; &apos;hot&apos; [ Blocks and iterators ] The two syntaxes for creating a code block: { puts &quot; Hello, World! &quot; } # Note the { braces } or do { puts &quot; Hello, World! &quot; } end When a code block is created it is always attached to a method as an optional block argument. Parameter-passing a block to be a closure : In an object instance variable (denoted with &apos;@&apos;), remember a block. def remember( &amp; a_block) { @block = a_block } end Invoke the above method, giving it a block which takes a name. remember {|name| puts &quot; Hello, #{name}! &quot; } When the time is right (for the object) -- call the closure! @block.call( &quot; Jon &quot; ) = &gt; &quot; Hello, Jon! &quot; Creating an anonymous function : proc {|arg| print arg}Proc.new {|arg| print arg}lambda {|arg| print arg} introduced in Ruby 1.9 - &gt; (arg) {print arg} Returning closures from a method: def create_set_and_get(initial_value=0) # Note the default value of 0 { closure_value = initial_value } { return Proc.new {|x| closure_value = x}, Proc.new { closure_value } } end setter, getter = create_set_and_get # ie. returns two valuessetter.call(21)getter.call # = &gt; 21 You can also use a parameter variable as a binding for the closure. So the above can be rewritten as... def create_set_and_get(closure_value=0) { return proc {|x| closure_value = x }, proc { closure_value } } end Yielding the flow of program control to a block which was provided at calling time: def use_hello { yield &quot; hello &quot; } end Invoke the above method, passing it a block. use_hello {|string| puts string} # = &gt; &apos;hello&apos; Iterating over enumerations and arrays using blocks: array = [1, &apos;hi&apos;, 3.14]array.each {|item| puts item } = &gt; 1 = &gt; &apos;hi&apos; = &gt; 3.14 array.each_index {|index| puts &quot; #{index}: #{array[index]} &quot; } = &gt; 0: 1 = &gt; 1: &apos;hi&apos; = &gt; 2: 3.14 The following uses a Range (3..6).each {|num| puts num } = &gt; 3 = &gt; 4 = &gt; 5 = &gt; 6 A method such as inject() can accept both a parameter and a block. Inject iterates over each member of a list, performing some function on it while retaining an aggregate. This is analogous to the foldl function in functional programming languages. For example: [1,3,5].inject(10) {|sum, element| sum + element} # = &gt; 19 On the first pass, the block receives 10 (the argument to inject) as sum, and 1 (the first element of the array) as element; this returns 11. 11 then becomes sum on the next pass, which is added to 3 to get 14. 14 is then added to 5, to finally return 19. Blocks work with many built-in methods: File.open(&apos;file.txt&apos;, &apos;w&apos;) do |file| # &apos;w&apos; denotes &quot; write mode &quot;. { file.puts &apos;Wrote some text.&apos; } end # File is automatically closed here File.readlines(&apos;file.txt&apos;).each do |line| { puts line } end = &gt; Wrote some text. Using an enumeration and a block to square the numbers 1 to 10 (using a range): (1..10).collect {|x| x*x} # = &gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] [ Classes ] The following code defines a class named Person. In addition to &apos;initialize&apos;, the usual constructor to create new objects, it has two methods: one to override the &lt; = &gt; comparison operator (so Array#sort can sort by age) and the other to override the to_s method (so Kernel#puts can format its output). Here, &quot; attr_reader &quot; is an example of metaprogramming in Ruby: &quot; attr_accessor &quot; defines getter and setter methods of instance variables, &quot; attr_reader &quot; only getter methods. Also, the last evaluated statement in a method is its return value, allowing the omission of an explicit &apos;return&apos;. class Person { attr_reader :name, :age } { def initialize(name, age) } { @name, @age = name, age } { end } { def &lt; = &gt; (person) # Comparison operator for sorting } { age &lt; = &gt; person.age } { end } { def to_s } { &quot; #{name} (#{age}) &quot; } { end } end group = [ { Person.new( &quot; Bob &quot;, 33), } { Person.new( &quot; Chris &quot;, 16), } { Person.new( &quot; Ash &quot;, 23) } ] puts group.sort.reverse The above prints three names in reverse age order: Bob (33)Ash (23)Chris (16) [ Open classes ] In Ruby, classes are never closed: you can always add methods to an existing class. This applies to the classes you write as well as the standard, built-in classes. All you have to do is open up a class definition for an existing class, and the new contents you specify will be added to whatever&apos;s there. A simple example of adding a new method to the standard library&apos;s Time class: re-open Ruby&apos;s Time class class Time { def yesterday } { self - 86400 } { end } end today = Time.now # = &gt; Thu Aug 14 16:51:50 +1200 2008yesterday = today.yesterday # = &gt; Wed Aug 13 16:51:50 +1200 2008 Adding methods to previously defined classes is often called monkey-patching. This practice, however, can lead to possible collisions of behavior and subsequent unexpected results, and is a concern for code scalability if performed recklessly. [ Exceptions ] An exception is raised with a raise call: raise An optional message can be added to the exception: raise &quot; This is a message &quot; You can also specify which type of exception you want to raise: raise ArgumentError, &quot; Illegal arguments! &quot; Alternatively, you can pass an exception instance to the raise method: raise ArgumentError.new( &quot; Illegal arguments! &quot; ) This last construct is useful when you need to raise a custom exception class featuring a constructor which takes more than one argument: class ParseError &lt; Exception { def initialize input, line, pos } { super &quot; Could not parse &apos;#{input}&apos; at line #{line}, position #{pos} &quot; } { end } end raise ParseError.new( &quot; Foo &quot;, 3, 9) Exceptions are handled by the rescue clause. Such a clause can catch exceptions which inherit from StandardError. Also supported for use with exceptions are else and ensure begin Do something rescue Handle exception else Do this if no exception was raised ensure Do this whether or not an exception was raised end It is a common mistake to attempt to catch all exceptions with a simple rescue clause. To catch all exceptions one must write: begin Do something rescue Exception don&apos;t write just rescue -- that only catches StandardError, a subclass of Exception Handle exception end Or catch particular exceptions: begin... rescue RuntimeError handling end It is also possible to specify that the exception object be made available to the handler clause: begin... rescue RuntimeError = &gt; e handling, possibly involving e, such as &quot; print e.to_s &quot; end Alternatively, the most recent exception is stored in the magic global $!. You can also catch several exceptions: begin... rescue RuntimeError, Timeout::Error = &gt; e handling, possibly involving e end [ Metaprogramming ] Ruby code can programmatically modify, at runtime, aspects of its own structure that would be fixed in more rigid languages, such as class and method definitions. This sort of metaprogramming can be used to write more concise code and effectively extend the language. For example, the following Ruby code generates new methods for the built-in String class, based on a list of colors. The methods wrap the contents of the string with an HTML tag styled with the respective color. COLORS = { :black = &gt; &quot; 000 &quot;, { :red = &gt; &quot; f00 &quot;, } { :green = &gt; &quot; 0f0 &quot;, } { :yellow = &gt; &quot; ff0 &quot;, } { :blue = &gt; &quot; 00f &quot;, } { :magenta = &gt; &quot; f0f &quot;, } { :cyan = &gt; &quot; 0ff &quot;, } { :white = &gt; &quot; fff &quot; } } class String { COLORS.each do |color,code| } { define_method &quot; in_#{color} &quot; do } { &quot; } {self} { &quot; } { end } { end } end The generated methods could then be used like so: &quot; Hello, World! &quot;.in_blue = &gt; &quot; Hello, World! &quot; To implement the equivalent in many other languages, the programmer would have to write each method (in_black, in_red, in_green, etc.) by hand. Some other possible uses for Ruby metaprogramming include: intercepting and modifying method calls implementing new inheritance models dynamically generating classes from parameters automatic object serialization interactive help and debugging [ More examples ] More sample Ruby code is available as algorithms in the following articles: Exponentiating by squaring Trabb Pardo-Knuth algorithm [ Implementations ] [ Ruby MRI#Operating systems ] The newest version of Ruby, the recently released version 1.9, has a single working implementation written in C that utilizes a Ruby-specific virtual machine. Ruby version 1.8 has three main implementations: the official Ruby interpreter often referred to as the Matz&apos;s Ruby Interpreter or MRI, which is the most widely used; JRuby, a Java -based implementation that runs on the Java virtual machine; and Rubinius, a reimplementation of Ruby focusing on writing as much of the core in Ruby as possible. There are other less-known or upcoming implementations such as Cardinal (an implementation for the Parrot virtual machine ), IronRuby ( alpha version available since July 24, 2008), [ http://www.iunknown.com/2008/07/ironruby-at-oscon.html IronRuby at OSCON Lam John We&apos;re shipping our first binary release. In this package, we&apos;re taking a &quot; batteries included &quot; approach and shipping the Ruby standard libraries in it 2008-07-24 2008-08-04 ] MacRuby, MagLev, Ruby.NET, XRuby and HotRuby (runs Ruby source code on a web browser and Flash). The maturity of Ruby implementations tends to be measured by their ability to run the Ruby on Rails (Rails) framework, because it is a complex framework to implement, and it uses many Ruby-specific features. The point when a particular implementation achieves this goal is called The Rails singularity. The reference implementation (MRI), JRuby, and Rubinius [ http://www.rubyinside.com/the-why-what-and-how-of-rubinius-1-0-s-release-3261.html The Why, What, and How of Rubinius 1.0&apos;s Release Peter Cooper 2010-05-18 ] are all able to run Rails unmodified in a production environment. IronRuby [ http://rubyforge.org/pipermail/ironruby-core/2008-May/001909.html IronRuby / Rails Question John Lam 2008-05-25 2008-05-25 ] [ http://www.iunknown.com/2008/05/ironruby-and-rails.html IronRuby and Rails John Lam 2008-05-30 2008-06-01 ] is starting to be able to run Rails test cases, but is still far from being production-ready. Ruby is available on many operating system s, such as Linux, Mac OS X, Microsoft Windows, Windows Phone 7, [ http://msdn.microsoft.com/en-us/magazine/ff960707.aspx Iron Ruby on Windows Phone 7 ] Windows CE and most flavors of Unix. Ruby 1.9 has recently been ported onto Symbian OS 9.x. [ https://ella.pragmaticomm.com/symbian-ruby Ruby 1.9 for Symbian OS 2010-07-28 ] [ Repositories and libraries ] The Ruby Application Archive (RAA), as well as RubyForge, serve as repositories for a wide range of Ruby applications and libraries, containing more than seven thousand items. Although the number of applications available does not match the volume of material available in the Perl or Python community, there are a wide range of tools and utilities which serve to foster further development in the language. RubyGems has become the standard package manager for Ruby libraries. It is very similar in purpose to Perl&apos;s CPAN, although its usage is more like apt-get. Recently, many new and existing libraries have found a home on GitHub, a service that offers version control repository hosting for Git. [ See also ] [ Free software Computer programming ] Comparison of programming languages Ruby MRI, the reference C implementation JRuby MacRuby IronRuby Rubinius XRuby Ruby on Rails Why&apos;s (poignant) Guide to Ruby - an online ruby textbook in graphic novel format Metasploit Project - the world&apos;s largest Ruby project with over 700,000 lines of code [ References ] [ 30em ] [ Further reading ] [ Jeremy McAnally Assaf Arkin March 28, 2009 Ruby in Practice First Manning Publications 360 1-933988-47-9 ] [ Dave Thomas Chad Fowler Andy Hunt April 28, 2009 Programming Ruby 1.9: The Pragmatic Programmers&apos; Guide Third Pragmatic Bookshelf 1000 1-934356-08-5 http://pragprog.com/titles/ruby3/programming-ruby-1-9 ] [ David Flanagan Yukihiro Matsumoto January 25, 2008 The Ruby Programming Language First O&apos;Reilly Media 446 0-596-51617-7 http://oreilly.com/catalog/9780596516178/ ] [ Kevin Baird June 8, 2007 Ruby by Example: Concepts and Code First No Starch Press 326 1-59327-148-4 http://nostarch.com/ruby.htm ] [ Michael Fitzgerald May 14, 2007 Learning Ruby First O&apos;Reilly Media 255 0-596-52986-4 http://oreilly.com/catalog/9780596529864 ] [ Peter Cooper March 26, 2007 Beginning Ruby: From Novice to Professional First Apress 664 1-59059-766-4 http://apress.com/book/view/9781590597668 ] [ Hal Fulton November 4, 2006 The Ruby Way Second Addison-Wesley Professional 888 0-596-52369-6 http://www.informit.com/store/product.aspx?isbn%3D0672328844 ] [ Lucas Carlson Leonard Richardson July 19, 2006 Ruby Cookbook First O&apos;Reilly Media 906 0-596-52369-6 http://oreilly.com/catalog/9780596523695/ ] [ External links ] [ Ruby programming language ] [ Ruby Programming ] [ Topic:Ruby ] [ http://www.ruby-lang.org/en/ ] [ Computers/Programming/Languages/Ruby Ruby ] Ruby documentation site Ruby Draft Specification- Sep 2010 Wiki: Ruby language and implementation specification Try Ruby! - web-based Ruby REPL The Great Ruby Shootout (December 2008) : Ruby implementations comparison. Collingbourne, Huw (June 17 2006), The Little Book Of Ruby, free PDF eBook 1.1MB, pp. 87 Collingbourne, Huw (April 18 2009), The Book Of Ruby, free PDF eBook 2.9MB, pp. 425 Ruby.on-page.net — simple Ruby manual with many samples Ruby User Guide By Matz, the creator of Ruby. Translated into English. Ruby From Other Languages Writing C Extensions to Ruby (MRI 1.8) RubyFlow: Community Filtered Ruby News The Ruby Reflector Automated Ruby News Ruby Forum - Gateway to the ruby-talk mailing list The Ruby in Stone Ruby IDE inside FlowStone Programming Language Category:Class-based programming languages Category:Dynamically typed programming languages Category:Scripting languages Category:Object-oriented programming languages Category:Articles with example Ruby code Category:Programming languages created in 1995 Category:Text-oriented programming languages [ ru ] ar:روبي (لغة برمجة) az:Ruby bn:রুবি (প্রোগ্রামিং ভাষা) bg:Ruby bs:Ruby ca:Ruby cs:Ruby (programovací jazyk) da:Ruby (programmeringssprog) de:Ruby (Programmiersprache) et:Ruby (programmeerimiskeel) el:Ruby es:Ruby eo:Ruby (programlingvo) eu:Ruby fa:روبی (زبان برنامه‌نویسی) fr:Ruby gl:Ruby ko:루비 (프로그래밍 언어) hr:Ruby (programski jezik) id:Ruby (bahasa pemrograman) ia:Ruby (linguage de programmation) it:Ruby he:Ruby ka:რუბი lt:Ruby hu:Ruby (programozási nyelv) ml:റൂബി (പ്രോഗ്രാമിങ് ഭാഷ) ms:Ruby my:Ruby Programming Language nl:Ruby (programmeertaal) ja:Ruby no:Ruby nn:Ruby pl:Ruby (język programowania) pt:Ruby (linguagem de programação) ro:Ruby ru:Ruby sk:Ruby (programovací jazyk) ckb:روبی sr:Руби (програмски језик) fi:Ruby sv:Ruby ta:ரூபி th:ภาษารูบี tg:Руби tr:Ruby uk:Ruby vi:Ruby (ngôn ngữ lập trình) zh-yue:Ruby程式語言 bat-smg:Ruby zh:Ruby