A computer program (also software, or just a program) is a sequence of instructions written to perform a specified task with a computer. [ Stair Ralph M., et al. Principles of Information Systems, Sixth Edition Thomson Learning, Inc. 2003 132 0-619-06489-7 ] A computer requires programs to function, typically executing the program&apos;s instructions in a central processor. [ Silberschatz Abraham Operating System Concepts, Fourth Edition Addison-Wesley 1994 58 0-201-50480-4 ] The program has an executable form that the computer can use directly to execute the instructions. The same program in its human-readable source code form, from which executable programs are derived (e.g., compiled ), enables a programmer to study and develop its algorithms. Computer source code is often written by computer programmer s. Source code is written in a programming language that usually follows one of two main paradigms : imperative or declarative programming. Source code may be converted into an executable file (sometimes called an executable program or a binary) by a compiler and later executed by a central processing unit. Alternatively, computer programs may be executed with the aid of an interpreter, or may be embedded directly into hardware. Computer programs may be categorized along functional lines: system software and application software. Two or more computer programs may run simultaneously on one computer, a process known as multitasking. [ Programming ] [ Computer programming ] # include &lt; stdio.h &gt; int main() { printf( &quot; Hello world!\n &quot; ); return 0; } Source code of a program written in the C programming language Computer programming is the iterative process of writing or editing source code. Editing source code involves testing, analyzing, and refining, and sometimes coordinating with other programmers on a jointly developed program. A person who practices this skill is referred to as a computer programmer, software developer or coder. The sometimes lengthy process of computer programming is usually referred to as software development. The term software engineering is becoming popular as the process is seen as an engineering discipline. [ Paradigms ] Computer programs can be categorized by the programming language paradigm used to produce them. Two of the main paradigms are imperative and declarative. Programs written using an imperative language specify an algorithm using declarations, expressions, and statements. [ Wilson Leslie B. Comparative Programming Languages, Second Edition Addison-Wesley 1993 75 0-201-56885-3 ] A declaration couples a variable name to a datatype. For example: { var x: integer; }. An expression yields a value. For example: { 2 + 2 } yields 4. Finally, a statement might assign an expression to a variable or use the value of a variable to alter the program&apos;s control flow. For example: x := 2 + 2; if x = 4 then do_something(); One criticism of imperative languages is the side effect of an assignment statement on a class of variables called non-local variables. Programs written using a declarative language specify the properties that have to be met by the output. They do not specify details expressed in terms of the control flow of the executing machine but of the mathematical relations between the declared objects and their properties. Two broad categories of declarative languages are functional language s and logical language s. The principle behind functional languages (like Haskell ) is to not allow side effects, which makes it easier to reason about programs like mathematical functions. [ Wilson Leslie B. Comparative Programming Languages, Second Edition Addison-Wesley 1993 213 0-201-56885-3 ] The principle behind logical languages (like Prolog ) is to define the problem to be solved  — the goal  — and leave the detailed solution to the Prolog system itself. [ Wilson Leslie B. Comparative Programming Languages, Second Edition Addison-Wesley 1993 244 0-201-56885-3 ] The goal is defined by providing a list of subgoals. Then each subgoal is defined by further providing a list of its subgoals, etc. If a path of subgoals fails to find a solution, then that subgoal is backtracked and another path is systematically attempted. The form in which a program is created may be textual or visual. In a visual language program, elements are graphically manipulated rather than textually specified. [ Compiling or interpreting ] A computer program in the form of a human-readable, computer programming language is called source code. Source code may be converted into an executable image by a compiler or executed immediately with the aid of an interpreter. Either compiled or interpreted programs might be executed in a batch process without human interaction, but interpreted programs allow a user to type commands in an interactive session. In this case the programs are the separate commands, whose execution occurs sequentially, and thus together. When a language is used to give commands to a software application (such as a shell ) it is called a scripting language. Compilers are used to translate source code from a programming language into either object code or machine code. Object code needs further processing to become machine code, and machine code is the central processing unit &apos;s native code, ready for execution. Compiled computer programs are commonly referred to as executables, binary images, or simply as binaries  — a reference to the binary file format used to store the executable code. Interpreted computer programs - in a batch or interactive session - are either decoded and then immediately executed or are decoded into some efficient intermediate representation for future execution. BASIC, Perl, and Python are examples of immediately executed computer programs. Alternatively, Java computer programs are compiled ahead of time and stored as a machine independent code called bytecode. Bytecode is then executed on request by an interpreter called a virtual machine. The main disadvantage of interpreters is that computer programs run slower than when compiled. Interpreting code is slower than running the compiled version because the interpreter must decode each statement each time it is loaded and then perform the desired action. However, software development may be faster using an interpreter because testing is immediate when the compiling step is omitted. Another disadvantage of interpreters is that at least one must be present on the computer during computer program execution. By contrast, compiled computer programs need no compiler present during execution. No properties of a programming language require it to be exclusively compiled or exclusively interpreted. The categorization usually reflects the most popular method of language execution. For example, BASIC is thought of as an interpreted language and C a compiled language, despite the existence of BASIC compilers and C interpreters. Some systems use just-in-time compilation (JIT) whereby sections of the source are compiled &apos;on the fly&apos; and stored for subsequent executions. [ Self-modifying programs ] A computer program in execution is normally treated as being different from the data the program operates on. However, in some cases this distinction is blurred when a computer program modifies itself. The modified computer program is subsequently executed as part of the same program. Self-modifying code is possible for programs written in machine code, assembly language, Lisp, C, COBOL, PL/1, Prolog and JavaScript (the eval feature) among others. [ Execution and storage ] Typically, computer programs are stored in non-volatile memory until requested either directly or indirectly to be executed by the computer user. Upon such a request, the program is loaded into random access memory, by a computer program called an operating system, where it can be accessed directly by the central processor. The central processor then executes ( &quot; runs &quot; ) the program, instruction by instruction, until termination. A program in execution is called a process. [ Silberschatz Abraham Operating System Concepts, Fourth Edition Addison-Wesley 1994 97 0-201-50480-4 ] Termination is either by normal self-termination or by error  — software or hardware error. [ Embedded programs ] { microcontroller on the right of this } { USB flash drive is controlled with embedded } { firmware. } Some computer programs are embedded into hardware. A stored-program computer requires an initial computer program stored in its read-only memory to boot. The boot process is to identify and initialize all aspects of the system, from processor register s to device controllers to memory contents. [ Silberschatz Abraham Operating System Concepts, Fourth Edition Addison-Wesley 1994 30 0-201-50480-4 ] Following the initialization process, this initial computer program loads the operating system and sets the program counter to begin normal operations. Independent of the host computer, a hardware device might have embedded firmware to control its operation. Firmware is used when the computer program is rarely or never expected to change, or when the program must not be lost when the power is off. [ Tanenbaum Andrew S. Structured Computer Organization, Third Edition Prentice Hall 1990 11 0-13-854662-2 ] [ Manual programming ] { Data General Nova 3 } Computer programs historically were manually input to the central processor via switches. An instruction was represented by a configuration of on/off settings. After setting the configuration, an execute button was pressed. This process was then repeated. Computer programs also historically were manually input via paper tape or punched cards. After the medium was loaded, the starting address was set via switches and the execute button pressed. [ Silberschatz Abraham Operating System Concepts, Fourth Edition Addison-Wesley 1994 6 0-201-50480-4 ] [ Automatic program generation ] Generative programming is a style of computer programming that creates source code through generic classes, prototypes, templates, aspects, and code generators to improve programmer productivity. Source code is generated with programming tool s such as a template processor or an integrated development environment. The simplest form of source code generator is a macro processor, such as the C preprocessor, which replaces patterns in source code according to relatively simple rules. Software engine s output source code or markup code that simultaneously become the input to another computer process. Application server s are software engines that deliver applications to client computer s. For example, a Wiki is an application server that lets users build dynamic content assembled from articles. Wikis generate HTML, CSS, Java, and JavaScript which are then interpreted by a web browser. [ Simultaneous execution ] [ Process (computing) Multiprocessing ] Many operating systems support multitasking which enables many computer programs to appear to run simultaneously on one computer. Operating systems may run multiple programs through process scheduling  — a software mechanism to switch the CPU among processes often so users can interact with each program while it runs. [ Silberschatz Abraham Operating System Concepts, Fourth Edition Addison-Wesley 1994 100 0-201-50480-4 ] Within hardware, modern day multiprocessor computers or computers with multicore processors may run multiple programs. [ Akhter Shameem Multi-Core Programming Richard Bowles (Intel Press) 2006 11–13 0-9764832-4-6 ] One computer program can calculate simultaneously more than one operation using threads or separate processes. Multithreading processors are optimized to execute multiple threads efficiently. [ Functional categories ] Computer programs may be categorized along functional lines. The main functional categories are system software and application software. System software includes the operating system which couples computer hardware with application software. The purpose of the operating system is to provide an environment in which application software executes in a convenient and efficient manner. [ Silberschatz Abraham Operating System Concepts, Fourth Edition Addison-Wesley 1994 1 0-201-50480-4 ] In addition to the operating system, system software includes utility programs that help manage and tune the computer. If a computer program is not system software then it is application software. Application software includes middleware, which couples the system software with the user interface. Application software also includes utility programs that help users solve application problems, like the need for sorting. Sometimes development environments for software development are seen as a functional category on its own, especially in the context of human-computer interaction and programming language design. Development environments gather system software (such as compilers and system&apos;s batch processing scripting languages) and application software (such as IDEs ) for the specific purpose of helping programmers create new programs. [ See also ] Algorithm for the relationship between computer programs and algorithms Computer software for more information on computer programs Data structure [ References ] [ Further reading ] [ Knuth Donald E. The Art of Computer Programming, Volume 1, 3rd Edition 1997 Addison-Wesley Boston 0-201-89683-4 ] [ Knuth Donald E. The Art of Computer Programming, Volume 2, 3rd Edition 1997 Addison-Wesley Boston 0-201-89684-2 ] [ Knuth Donald E. The Art of Computer Programming, Volume 3, 3rd Edition 1997 Addison-Wesley Boston 0-201-89685-0 ] [ External links ] Definition of &quot; Program &quot; at Webopedia Definition of &quot; Software &quot; at FOLDOC Definition of &quot; Computer Program &quot; at dictionary.com { Category:Computer programming } Category:Computing terminology { af:Rekenaarprogram } ar:برنامج (حاسوب) as:কম্পিউটাৰ প্ৰ’গ্ৰাম ast:Programa informáticu az:Kompyuter proqramları bn:কম্পিউটার প্রোগ্রাম zh-min-nan:Tiān-náu thêng-sek be:Камп&apos;ютарная праграма be-x-old:Праграма bg:Компютърна програма bs:Računarski program br:Goulev ca:Programa informàtic cs:Počítačový program de:Computerprogramm et:Arvutiprogramm el:Πρόγραμμα υπολογιστή es:Programa informático eo:Komputila programo fa:برنامه (رایانه) fiu-vro:Puutriprogramm fr:Programme (informatique) ga:Ríomhchlár gd:Prògram (coimpiutair) ko:컴퓨터 프로그램 hi:कम्प्यूटर प्रोग्राम hr:Računalni program io:Programo di ordinatro id:Program komputer is:Forrit it:Programma (informatica) he:תוכנית מחשב ka:კომპიუტერული პროგრამა kk:Компьютерлік бағдарлама ky:Компьютердик программалоо lo:ໂປແກມ ຄອມພິວເຕີ la:Programma computatrale lv:Datorprogramma lb:Computerprogramm hu:Számítógépes program xmf:კომპიუტერული პროგრამა ms:Atur cara komputer my:Computer program nl:Computerprogramma ja:プログラム (コンピュータ) no:Dataprogram mhr:Программе uz:Kompyuter dasturi pl:Program komputerowy pt:Programa de computador ro:Program (informatică) qu:Wakichi rue:Компютеровый проґрам ru:Компьютерная программа sq:Programi kompjuterik simple:Computer program sk:Program (počítačový) sl:Računalniški program sr:Рачунарски програм fi:Tietokoneohjelma sv:Datorprogram ta:செய்நிரல் th:โปรแกรมคอมพิวเตอร์ bug:ᨄᨛᨑᨚᨁᨛᨑᨆ ᨀᨚᨇᨘᨈᨛᨑᨛ uk:Комп&apos;ютерна програма ur:شمارندی برنامج wa:Programe éndjolike wo:Tëriinuw nosukaay yi:קאמפיוטער פראגראם zh-yue:電腦程式 zh:计算机程序