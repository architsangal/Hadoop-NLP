[ Church&apos;s thesis the constructive mathematics assertion Church&apos;s thesis (constructive mathematics) ] In computability theory, the Church–Turing thesis (also known as the Church–Turing conjecture, Church&apos;s thesis, Church&apos;s conjecture, and Turing&apos;s thesis) is a combined hypothesis ( &quot; thesis &quot; ) about the nature of functions whose values are effectively calculable; or, in more modern terms, functions whose values are algorithm ically computable. In simple terms, the Church–Turing thesis states that &quot; everything algorithmically computable is computable by a Turing machine. &quot; Several attempts were made in the first half of the 20th Century to formalize the notion of computability : American mathematician Alonzo Church created a method for defining functions called the λ-calculus, British mathematician Alan Turing created a theoretical model for a machine, now called a universal Turing machine, that could carry out calculations from inputs, Church, along with mathematician Stephen Kleene and logician J.B. Rosser created a formal definition of a class of functions whose values could be calculated by recursion. All three computational processes (recursion, the λ-calculus, and the Turing machine) were shown to be equivalent—all three approaches define the same class of functions. { Church 1934:90 footnote in Davis 1952 } { Turing 1936–7 in Davis 1952:149 } This has led mathematicians and computer scientists to believe that the concept of computability is accurately characterized by these three equivalent processes. Informally the Church–Turing thesis states that if some method ( algorithm ) exists to carry out a calculation, then the same calculation can also be carried out by a Turing machine (as well as by a recursively definable function, and by a λ-function ). The Church–Turing thesis is a statement that characterizes the nature of computation and cannot be formally proven. Even though the three processes mentioned above proved to be equivalent, the fundamental premise behind the thesis—the notion of what it means for a function to be &quot; effectively calculable &quot; (computable)—is &quot; a somewhat vague intuitive one &quot;. { Kleene 1952:317 } Thus, the &quot; thesis &quot; remains a hypothesis. Despite the fact that it cannot be formally proven, the Church–Turing thesis now has near-universal acceptance. [ Formal statement ] [ Effectively calculable ] Rosser 1939 addresses the notion of &quot; effective computability &quot; as follows: &quot; Clearly the existence of CC and RC (Church&apos;s and Rosser&apos;s proofs) presupposes a precise definition of &quot; effective &quot;. &quot; Effective method &quot; is here used in the rather special sense of a method each step of which is precisely predetermined and which is certain to produce the answer in a finite number of steps &quot;. { Rosser 1939 in Davis 1965:225 } Thus the adverb-adjective &quot; effective &quot; is used in a sense of &quot; 1a: producing a decided, decisive, or desired effect &quot;, and &quot; capable of producing a result &quot;. { Merriam Webster&apos;s Ninth New Collegiate Dictionary } In the following, the words &quot; effectively calculable &quot; will mean &quot; produced by any intuitively &apos;effective&apos; means whatsoever &quot; and &quot; effectively computable &quot; will mean &quot; produced by a Turing-machine or equivalent mechanical device &quot;. Turing&apos;s 1939 &quot; definitions &quot; are virtually the same: &quot; †We shall use the expression &quot; computable function &quot; to mean a function calculable by a machine, and we let &quot; effectively calculable &quot; refer to the intuitive idea without particular identification with any one of these definitions. &quot; (cf. the footnote † in Turing 1939 (his Ordinals paper) in Davis 1965:160). The thesis can be stated as follows: Every effectively calculable function is a computable function. Gandy (Gandy 1980 in Barwise 1980:123) states it this way: What is effectively calculable is computable. He calls this &quot; Church&apos;s Thesis &quot;, a peculiar choice of moniker. Turing stated it this way: &quot; It was stated... that &apos;a function is effectively calculable if its values can be found by some purely mechanical process.&apos; We may take this literally, understanding that by a purely mechanical process one which could be carried out by a machine. The development... leads to... an identification of computability † with effective calculability &quot; († is the footnote above, ibid). [ History ] [ History of the Church–Turing thesis ] One of the important problems for logicians in the 1930s was David Hilbert&apos;s Entscheidungsproblem, which asked if there was a mechanical procedure for separating mathematical truths from mathematical falsehoods. This quest required that the notion of “algorithm” or “effective calculability” be pinned down, at least well enough for the quest to begin. { Davis’s commentary before Church 1936 An Unsolvable Problem of Elementary Number Theory in Davis 1965:88. Church uses the words “effective calculability” on page 100ff. } But from the very outset Alonzo Church &apos;s attempts began with a debate that continues to this day. { In his review of Church’s Thesis after 70 Years edited by Adam Olszewski et al. 2006, Peter Smith&apos;s criticism of a paper by Muraswski and Wolenski suggests 4 &quot; lines &quot; re the status of the Church–Turing Thesis: (1) empirical hypothesis (2) axiom or theorem, (3) definition, (4) explication. But Smith opines that (4) is indistinguishable from (3), cf Smith (July 11, 2007) Church’s Thesis after 70 Years at http://www.phil.cam.ac.uk/teaching_staff/Smith/godelbook/other/CTT.pdf } Was the notion of “effective calculability” to be (i) an &quot; axiom or axioms &quot; in an axiomatic system, or (ii) merely a definition that “identified” two or more propositions, or (iii) an empirical hypothesis to be verified by observation of natural events, or (iv) or just a proposal for the sake of argument (i.e. a &quot; thesis &quot; ). [ Circa 1930–1952 ] In the course of studying the problem, Church and his student Stephen Kleene introduced the notion of λ-definable functions, and they were able to prove that several large classes of functions frequently encountered in number theory were λ-definable. { cf footnote 3 in Church 1936 ‘’An Unsolvable Problem of Elementary Number Theory’’ in Davis 1965:89 } The debate began when Church proposed to Kurt Gödel that one should define the &quot; effectively computable &quot; functions as the λ-definable functions. Gödel, however, was not convinced and called the proposal &quot; thoroughly unsatisfactory &quot;. { Dawson 1997:99 } Rather in correspondence with Church (ca 1934–5), Gödel proposed axiomatizing the notion of &quot; effective calculability &quot;; indeed, in a 1935 letter to Kleene, Church reported that: &quot; His [Gödel&apos;s] only idea at the time was that it might be possible, in terms of effective calculability as an undefined notion, to state a set of axioms which would embody the generally accepted properties of this notion, and to do something on that basis &quot;. But Gödel offered no further guidance. Eventually, he would suggest his (primitive) recursion, modified by Herbrand &apos;s suggestion, that Gödel had detailed in his 1934 lectures in Princeton NJ (Kleene and another student J. B. Rosser transcribed the notes.). But &quot; he did not think that the two ideas could be satisfactorily identified &quot; except heuristically &quot;. { Sieg 1997:160 quoting from the 1935 letter written by Church to Kleene, cf Footnote 3 in Gödel 1934 in Davis 1965:44 } Next, it was necessary to identify and prove the equivalence of two notions of effective calculability. Equipped with the λ-calculus and &quot; general &quot; recursion, Stephen Kleene with help of Church and J. B. Rosser produced proofs (1933, 1935) to show that the two calculi are equivalent. Church subsequently modified his methods to include use of Herbrand–Gödel recursion and then proved (1936) that the Entscheidungsproblem is unsolvable: There is no generalized &quot; effective calculation &quot; (method, algorithm) that can determine whether or not a formula in either the recursive- or λ-calculus is &quot; valid &quot; (more precisely: no method to show that a well formed formula has a &quot; normal form &quot; ). { cf Church 1936 in Davis 1965:105ff } Many years later in a letter to Davis (ca 1965), Gödel would confess that &quot; he was, at the time of these [1934] lectures, not at all convinced that his concept of recursion comprised all possible recursions &quot;. { Davis&apos;s commentary before Gödel 1934 in Davis 1965:40 } By 1963–4 Gödel would disavow Herbrand–Gödel recursion and the λ-calculus in favor of the Turing machine as the definition of “algorithm” or “mechanical procedure” or “formal system”. { For a detailed discussion of Gödel&apos;s adoption of Turing&apos;s machines as models of computation, see Shagrir date TBD at http://edelstein.huji.ac.il/staff/shagrir/papers/Goedel_on_Turing_on_Computability.pdf } An hypothesis leading to a natural law?: In late 1936 Alan Turing ’s paper (also proving that the Entscheidungsproblem is unsolvable) had not yet appeared. On the other hand, Emil Post &apos;s 1936 paper had appeared and was certified independent of Turing&apos;s work. { cf. Editor&apos;s footnote to Post 1936 Finite Combinatory Process. Formulation I. at Davis 1965:289. } Post strongly disagreed with Church’s “identification” of effective computability with the λ-calculus and recursion, stating: &quot; Actually the work already done by Church and others carries this identification considerably beyond the working hypothesis stage. But to mask this identification under a definition... blinds us to the need of its continual verification. &quot; Post 1936 in Davis 1965:291 footnote 8 Rather, he regarded the notion of “effective calculability” as merely a &quot; working hypothesis &quot; that might lead by inductive reasoning to a &quot; natural law &quot; rather than by “a definition or an axiom”. { Post 1936 in Davis 1952:291 } This idea was &quot; sharply &quot; criticized by Church. { Sieg 1997:171 and 176–7) } Thus Post in his 1936 { Sieg 1997:160 } was also discounting Kurt Gödel &apos;s suggestion to Church in 1934–5 that the thesis might be expressed as an axiom or set of axioms. Turing adds another definition, Rosser equates all three: Within just a short time, Turing&apos;s 1936–37 paper &quot; On Computable Numbers, with an Application to the Entscheidungsproblem &quot; appeared. In it he asserted another notion of &quot; effective computability &quot; with the introduction of his a-machines (now known as the Turing machine abstract computational model). And in a proof-sketch added as an &quot; Appendix &quot; to his 1936–37 paper, Turing showed that the classes of functions defined by λ-calculus and Turing machines coincided. { Turing 1936–7 in Davis 1965:263ff } In a few years (1939) Turing would propose, like Church and Kleene before him, that his formal definition of mechanical computing agent was the correct one. { Turing 1939 in Davis:160 } Thus, by 1939, both Church (1934) and Turing (1939), neither having knowledge of the other’s efforts, had individually proposed that their &quot; formal systems &quot; should be definitions of &quot; effective calculability &quot;; { cf Church 1934 in Davis 1965:100, also Turing 1939 in Davis 1965:160) } neither framed their assertions as theses. Rosser (1939) formally identified the three notions-as-definitions: &quot; All three definitions are equivalent, so it does not matter which one is used. &quot; italics added, Rosser 1939 in Davis 1965:226 Kleene proposes Church&apos;s Thesis: This left the overt expression of a &quot; thesis” to Kleene. In his 1943 paper Recursive Predicates and Quantifiers Kleene proposed his &quot; THESIS I &quot; : &quot; THESIS I. Every effectively calculable function (effectively decidable predicate) is general An archaic usage of Kleene et al. to distinguish Gödel&apos;s (1931) &quot; rekursiv &quot; (a few years later named primitive recursion by Rózsa Péter (cf Gandy 1994 in Herken 1994–5:68)) from Herbrand–Gödel&apos;s recursion of 1934 i.e. primitive recursion equipped with the additional mu operator; nowadays mu-recursion is called, simply, &quot; recursion &quot;. recursive [Kleene&apos;s italics] { &quot; Since a precise mathematical definition of the term effectively calculable (effectively decidable) has been wanting, we can take this thesis... as a definition of it... &quot; Kleene 1943 in Davis 1965:274 } &quot; ( 22 ) references Church 1936 &quot; ( 23 ) references Turing 1936–7 Kleene goes on to note that: &quot; (24) references Post 1936 of Post and Church&apos;s Formal definitions in the theory of ordinal numbers, Fund. Math. vol 28 (1936) pp.11–21 (see ref. #2, Davis 1965:286). Kleene&apos;s Church–Turing Thesis: A few years later (1952) Kleene would overtly name, defend, and express the two &quot; theses &quot; and then &quot; identify &quot; them (show equivalence) by use of his Theorem XXX: Thesis I. Every effectively calculable function (effectively decidable predicate) is general recursive. Kleene 1952:300 { Theorem XXX: &quot; The following classes of partial functions are coextensive, i.e. have the same members: (a) the partial recursive functions, (b) the computable functions... &quot;. Kleene 1952:376 } { Turing&apos;s thesis: &quot; Turing&apos;s thesis that every function which would naturally be regarded as computable is computable under his definition, i.e. by one of his machines, is equivalent to Church&apos;s thesis by Theorem XXX. &quot; Kleene 1952:376) } [ Later developments ] An attempt to understand the notion of &quot; effective computability &quot; better led Robin Gandy (Turing&apos;s student and friend) in 1980 to analyze machine computation (as opposed to human-computation acted out by a Turing machine). Gandy&apos;s curiosity about, and analysis of, &quot; cellular automata &quot;, &quot; Conway&apos;s game of life &quot;, &quot; parallelism &quot; and &quot; crystalline automata &quot; led him to propose four &quot; principles (or constraints)... which it is argued, any machine must satisfy. &quot; { Gandy 1980 in Barwise 1980:123ff) } His most-important fourth, &quot; the principle of causality &quot; is based on the &quot; finite velocity of propagation of effects and signals; contemporary physics rejects the possibility of instantaneous action at a distance. &quot; { Gandy 1980 in Barwise 1980:135 } From these principles and some additional constraints—(1a) a lower bound on the linear dimensions of any of the parts, (1b) an upper bound on speed of propagation (the velocity of light), (2) discrete progress of the machine, and (3) deterministic behavior—he produces a theorem that &quot; What can be calculated by a device satisfying principles I–IV is computable. { Gandy 1980 in Barwise:126 } &quot;. In the late 1990s Wilfried Sieg analyzed Turing&apos;s and Gandy&apos;s notions of &quot; effective calculability &quot; with the intent of &quot; sharpening the informal notion, formulating its general features axiomatically, and investigating the axiomatic framework &quot;. { (Sieg 1998–9 in Sieg–Somner–Talcott 2002:390ff; also Sieg 1997:154ff) } In his 1997 and 2002 Sieg presents a series of constraints on the behavior of a computor— &quot; a human computing agent who proceeds mechanically &quot;; these constraints reduce to: &quot; (B.1) (Boundedness) There is a fixed bound on the number of symbolic configurations a computor can immediately recognize. &quot; (B.2) (Boundedness) There is a fixed bound on the number of internal states a computor can be in. &quot; (L.1) (Locality) A computor can change only elements of an observed symbolic configuration. &quot; (L.2) (Locality) A computor can shift attention from one symbolic configuration to another one, but the new observed configurations must be within a bounded distance of the immediately previously observed configuration. &quot; (D) (Determinacy) The immediately recognizable (sub-)configuration determines uniquely the next computation step (and id [instantaneous description] ) &quot;; stated another way: &quot; &apos;&apos;A computor&apos;s internal state together with the observed configuration fixes uniquely the next computation step and the next internal state. &quot; In a footnote Sieg breaks Post&apos;s 1936 (B) into (B.1) and (B.2) and (L) into (L.1) and (L.2) and describes (D) differently. With respect to his proposed Gandy machine he later adds LC.1, LC.2, GA.1 and GA.2. These are complicated; see Sieg 1998–9 in Sieg–Somner–Talcott 2002:390ff. The matter remains in active discussion within the academic community. { A collection of papers can be found at Church’s Thesis after 70 Years edited by AdamOlszewski et al. 2006. Also a review of this collection by Peter Smith (July 11, 2007) Church’s Thesis after 70 Years at http://www.phil.cam.ac.uk/teaching_staff/Smith/godelbook/other/CTT.pdf } [ Success of the thesis ] Other formalisms (besides recursion, the λ-calculus, and the Turing machine ) have been proposed for describing effective calculability/computability. Stephen Kleene (1952) adds to the list the functions &quot; reckonable in the system S 1 &quot; of Kurt Gödel 1936, and Emil Post &apos;s (1943, 1946) &quot; canonical [also called normal] systems &quot;. { Kleene 1952:320 } In the 1950s Hao Wang and Martin Davis greatly simplified the one-tape Turing-machine model (see Post–Turing machine ). Marvin Minsky expanded the model to two or more tapes and greatly simplified the tapes into &quot; up-down counters &quot;, which Melzak and Lambek further evolved into what is now known as the counter machine model. In the late 1960s and early 1970s researchers expanded the counter machine model into the register machine, a close cousin to the modern notion of the computer. Other models include combinatory logic and Markov algorithm s. Gurevich adds the pointer machine model of Kolmogorov and Uspensky (1953, 1958): &quot;...they just wanted to... convince themselves that there is no way to extend the notion of computable function. &quot; { Gurevich 1988:2 } All these contributions involve proofs that the models are computationally equivalent to the Turing machine; such models are said to be Turing complete. Because all these different attempts at formalizing the concept of &quot; effective calculability/computability &quot; have yielded equivalent results, it is now generally assumed that the Church–Turing thesis is correct. In fact, Gödel (1936) proposed something stronger than this; he observed that there was something &quot; absolute &quot; about the concept of &quot; reckonable in S 1 &quot; : &quot; It may also be shown that a function which is computable [&apos;reckonable&apos;] in one of the systems S i, or even in a system of transfinite type, is already computable [reckonable] in S 1. Thus the concept &apos;computable&apos; [&apos;reckonable&apos;] is in a certain definite sense &apos;absolute&apos;, while practically all other familiar metamathematical concepts (e.g. provable, definable, etc.) depend quite essentially on the system to which they are defined &quot; translation of Gödel (1936) by Davis in The Undecidable p. 83, differing in the use of the word &apos;reckonable&apos; in the translation in Kleene (1952) p. 321 [ Informal usage in proofs ] Proofs in computability theory often invoke { Horsten in Olszewski 2006:256 } the Church–Turing thesis in an informal way to establish the computability of functions while avoiding the (often very long) details which would be involved in a rigorous, formal proof. To establish that a function is computable by Turing machine, it is usually considered sufficient to give an informal English description of how the function can be effectively computed, and then conclude &quot; By the Church–Turing thesis &quot; that the function is Turing computable (equivalently partial recursive). Dirk van Dalen (in Gabbay 2001:284 { Gabbay 2001:284 } ) gives the following example for the sake of illustrating this informal use of the Church–Turing thesis: EXAMPLE: Each infinite RE set contains an infinite recursive set. Proof: Let A be infinite RE. We list the elements of A effectively, n 0, n 1, n 2, n 3,... From this list we extract an increasing sublist: put m 0 =n 0, after finitely many steps we find an n k such that n k &gt; m 0, put m 1 =n k. We repeat this procedure to find m 2 &gt; m 1, etc. this yields an effective listing of the subset B={m 0,m 1,m 2,...} of A, with the property m i &lt; m i+1. Claim. B is decidable. For, in order to test k in B we must check if k=m i for some i. Since the sequence of m i &apos;s is increasing we have to produce at most k+1 elements of the list and compare them with k. If none of them is equal to k, then k not in B. Since this test is effective, B is decidable and, by Church&apos;s thesis, recursive. (Emphasis added). In order to make the above example completely rigorous, one would have to carefully construct a Turing Machine, or λ-function, or carefully invoke recursion axioms, or at best, cleverly invoke various theorems of computability theory. But because the computability theorist believes that Turing computability correctly captures what can be computed effectively, and because an effective procedure is spelled out in English for deciding the set B, the computability theorist accepts this as proof that the set is indeed recursive. As a rule of thumb, the Church–Turing thesis should only be invoked to simplify proofs in cases where the writer would be capable of, and expects the readers also to be capable of, easily (but not necessarily without tedium) producing a rigorous proof if one were demanded. [ Variations ] The success of the Church–Turing thesis prompted variations of the thesis to be proposed. For example, the Physical Church–Turing thesis (PCTT) states: [ 10.1007/s11229-005-0194-z ] &quot; According to Physical CTT, all physically computable functions are Turing-computable &quot; Piccinini 2007:101 &quot; Computationalism, the Church–Turing Thesis, and the Church–Turing Fallacy &quot;.. in Synthese (2007) 154:97–120. The Church–Turing thesis says nothing about the efficiency with which one model of computation can simulate another. It has been proved for instance that a (multi-tape) universal Turing machine only suffers a logarithmic slowdown factor in simulating any Turing machine. { Arora, Sanjeev; Barak, Boaz, &quot; Complexity Theory: A Modern Approach &quot;, Cambridge University Press, 2009, ISBN 978-0-521-42426-4, section 1.4, &quot; Machines as strings and the universal Turing machine &quot; and 1.7, &quot; Proof of theorem 1.9 &quot; } No such result has been proved in general for an arbitrary but reasonable model of computation. A variation of the Church–Turing thesis that addresses this issue is the Feasibility Thesis { http://www.claymath.org/millennium/P_vs_NP/Official_Problem_Description.pdf } or (Classical) Complexity-Theoretic Church–Turing Thesis (SCTT), which is not due to Church or Turing, but rather was realized gradually in the development of complexity theory. It states: { Phillip Kaye, Raymond Laflamme, Michele Mosca, An introduction to quantum computing, Oxford University Press, 2007, ISBN 0-19-857049-X, pp. 5–6 } &quot; A probabilistic Turing machine can efficiently simulate any realistic model of computation. &quot; The word &apos;efficiently&apos; here means up to polynomial-time reductions. This thesis was originally called Computational Complexity-Theoretic Church–Turing Thesis by Ethan Bernstein and Umesh Vazirani (1997). The Complexity-Theoretic Church–Turing Thesis, then, posits that all &apos;reasonable&apos; models of computation yield the same class of problems that can be computed in polynomial time. Assuming the conjecture that probabilistic polynomial time ( BPP ) equals deterministic polynomial time ( P ), the word &apos;probabilistic&apos; is optional in the Complexity-Theoretic Church–Turing Thesis. A similar thesis, called the Invariant Thesis, was introduced by Cees F. Slot and Peter van Emde Boas. It states: &quot; Reasonable &quot; machines can simulate each other within a polynomially bounded overhead in time and a constant-factor overhead in space. { Peter van Emde Boas&apos;s, Machine Models and Simulations, in Handbook of Theoretical Computer Science A, Elsevier, 1990, p. 5 } The thesis originally appeared in a paper at STOC &apos;84, which was the first paper to show that polynomial-time overhead and constant-space overhead could be simultaneously achieved for a simulation of a Random Access Machine on a Turing machine. { C. Slot, P. van Emde Boas, On tape versus core: an application of space efficient perfect hash functions to the invariance of space, } { STOC, December 1984 } If production-scale quantum computers can be built, { Liesbeth Venema, Quantum information: Reality check, Nature 450, 175–176 (8 November 2007) } [ 10.1038/450175a ] they could invalidate the Complexity-Theoretic Church–Turing Thesis, since it is also conjectured that quantum polynomial time ( BQP ) is larger than BPP. In other words, there are efficient quantum algorithms that perform tasks that are not known to have efficient probabilistic algorithms; for example, factoring integers. They would not however invalidate the original Church–Turing thesis, since a quantum computer can always be simulated by a Turing machine, but they would invalidate the classical Complexity-Theoretic Church–Turing thesis for efficiency reasons. Consequently, the Quantum Complexity-Theoretic Church–Turing thesis states: &quot; A quantum Turing machine can efficiently simulate any realistic model of computation. &quot; Eugene Eberbach and Peter Wegner { Eberbach and Wegner, 2003 } claim that the Church–Turing thesis is sometimes interpreted too broadly,stating &quot; the broader assertion that algorithms precisely capturewhat can be computed is invalid &quot;. They claim that forms of computation not captured by the thesis are relevant today,terms which they call super-Turing computation. [ Philosophical implications ] The Church–Turing thesis has some profound implications for the philosophy of mind; however many of the philosophical interpretations of the Thesis involve basic misunderstandings of the thesis statement. { In particular see the numerous examples (of errors, of misappropriation of the thesis) at the entry in the Stanford Encyclopedia of Philosophy. For a good place to encounter original papers see David J. Chalmers, ed. 2002, Philosophy of Mind: Classical and Contemporary Readings, Oxford University Press, New York. } B. Jack Copeland states that it&apos;s an open empirical question whether there are actual deterministic physical processes that, in the long run, elude simulation by a Turing machine; furthermore, he states that it is an open empirical question whether any such processes are involved in the working of the human brain. { B. Jack Copeland, Computation in Luciano Floridi (ed.), The Blackwell guide to the philosophy of computing and information, Wiley-Blackwell, 2004, ISBN 0-631-22919-1, p. 15 } There are also some important open questions which cover the relationship between the Church–Turing thesis and physics, and the possibility of hypercomputation. When applied to physics, the thesis has several possible meanings: The universe is equivalent to a Turing machine; thus, computing non-recursive functions is physically impossible. This has been termed the Strong Church–Turing thesis and is a foundation of digital physics. The universe is not equivalent to a Turing machine (i.e., the laws of physics are not Turing-computable), but incomputable physical events are not &quot; harnessable &quot; for the construction of a hypercomputer. For example, a universe in which physics involves real numbers, as opposed to computable real s, might fall into this category. The universe is a hypercomputer, and it is possible to build physical devices to harness this property and calculate non-recursive functions. For example, it is an open question whether all quantum mechanical events are Turing-computable, although it is known that rigorous models such as quantum Turing machines are equivalent to deterministic Turing machines. (They are not necessarily efficiently equivalent; see above.) John Lucas and, more famously, Roger Penrose cf his subchapter &quot; The Church–Turing Thesis &quot; (p. 47–49) in his chapter &quot; Algorithms and Turing machines &quot; in his 1990 (2nd edition) Emperor&apos;s New Mind: Concerning Computers, Minds, and the Laws of Physics, Oxford University Press, Oxford UK. Also his a final chapter titled &quot; Where lies the physics of mind? &quot; where, in a subsection he asserts &quot; The non-algorithmic nature of mathematical insight &quot; (p. 416–8). have suggested that the human mind might be the result of some kind of quantum-mechanically enhanced, &quot; non-algorithmic &quot; computation, although there is no scientific evidence for this proposal. There are many other technical possibilities which fall outside or between these three categories, but these serve to illustrate the range of the concept. [ Non-computable functions ] One can formally define functions that are not computable. A well known example of such a function is the Busy Beaver function. This function takes an input n and returns the largest number of symbols that a Turing machine with n states can print before halting, when run with no input. Finding an upper bound on the busy beaver function is equivalent to solving the halting problem, a problem known to be unsolvable by Turing machines. Since the busy beaver function cannot be computed by Turing machines, the Church–Turing thesis asserts that this function cannot be effectively computed by any method. For more information see the article busy beaver. Several computational models allow for the computation of (Church-Turing) non-computable functions. These are known as hypercomputers.Mark Burgin [ October 2011 ] argues that super-recursive algorithm s such as inductive Turing machines disprove the Church–Turing thesis. His argument relies on a definition of algorithm broader than the ordinary one, so that non-computable functions obtained from some inductive Turing machines are called computable. This interpretation of the Church–Turing thesis differs from the interpretation commonly accepted in computability theory, discussed above. The argument that super-recursive algorithms are indeed algorithms in the sense of the Church–Turing thesis has not found broad acceptance within the computability research community. [ September 2011 ] [ See also ] Church&apos;s thesis in constructive mathematics Computability logic Computability theory Decidability History of the Church–Turing thesis Hypercomputer Super-recursive algorithm Church–Turing–Deutsch principle, which states that every physical process can be simulated by a universal computing device [ Footnotes ] [ 2 ] [ References ] [ Ben-Amram A.M. 2005 The Church-Turing Thesis and its Look-Alikes SIGACT News 36 3 113–116 10.1145/1086649.1086651 ] [ Bernstein E Vazirani, U. 1997 Quantum complexity theory SIAM Journal on Computing 26 5 1411–1473 10.1137/S0097539796300921 ] [ Blass Andreas Andreas Blass Yuri Gurevich 2003 Algorithms: A Quest for Absolute Definitions Bulletin of European Association for Theoretical Computer Science 81 http://research.microsoft.com/~gurevich/Opera/164.pdf ] [ Burgin Mark Monographs in computer science Springer 2005 Super-recursive algorithms 0-387-95569-0 ] [ Church Alonzo 1932 A set of Postulates for the Foundation of Logic Annals of Mathematics 2 33 346–366 1968337 10.2307/1968337 ] [ Church Alonzo 1936 An Unsolvable Problem of Elementary Number Theory American Journal of Mathematics 58 345–363 2371045 58 10.2307/2371045 ] [ Church Alonzo 1936 A Note on the Entscheidungsproblem Journal of Symbolic Logic 1 40–41 ] [ Church Alonzo The Calculi of Lambda-Conversion Princeton University Press Princeton 1941 ] [ Cooper S. B. Odifreddi, P. Computability and Models: Perspectives East and West S. B. Cooper &amp; S. S. Goncharov Kluwer Academic/Plenum Publishers 2003 137–160 Incomputability in Nature ] [ The Undecidable, Basic Papers on Undecidable Propositions, Unsolvable Problems And Computable Functions Martin Davis Raven Press New York 1965 ] [ Eberbach, E. Wegner, P. October 2003 Beyond Turing Machines Bulletin of the European Association for Theoretical Computer Science 81 279–304 ] [ Gandy Robin The Kleene Symposium H.J. Barwise, H.J. Keisler, and K. Kunen North-Holland Publishing Company 1980 123–148 Church&apos;s Thesis and the Principles for Mechanisms Robin Gandy ] [ Gandy Robin The universal Turing Machine: A Half-Century Survey Rolf Herken Wien Springer–Verlag New York 1994–5 51ff 3-211-82637-8 ] [ Gödel Kurt Kleene and Rosser (lecture note-takers); Institute for Advanced Study (lecture sponsor) The Undecidable Davis, M. Raven Press New York 1965 On Undecidable Propositions of Formal Mathematical Systems 1934 ] [ Kurt Gödel On The Length of Proofs 1936 Ergenbnisse eines mathematishen Kolloquiums Heft 7 23–24 German ] [ Gurevich Yuri June 1988 On Kolmogorov Machines and Related Issues Bulletin of European Association for Theoretical Computer Science 35 71–82 Yuri Gurevich ] [ Gurevich Yuri July 2000 Sequential Abstract State Machines Capture Sequential Algorithms ACM Transactions on Computational Logic 1 1 77–111 http://research.microsoft.com/~gurevich/Opera/141.pdf 10.1145/343369.343384 ] [ Herbrand Jacques 1932 Sur la non-contradiction de l&apos;arithmétique Journal fur die reine und angewandte Mathematik 166 1–8 Jacques Herbrand ] [ Hofstadter Douglas R. Gödel, Escher, Bach: an Eternal Golden Braid Chapter XVII: Church, Turing, Tarski, and Others Douglas Hofstadter ] [ Kleene Stephen Cole 1935 A Theory of Positive Integers in Formal Logic American Journal of Mathematics 57 153–173 &amp; 219–244 Stephen Cole Kleene 2372027 57 10.2307/2372027 ] [ Kleene Stephen Cole 1936 Lambda-Definability and Recursiveness Duke Mathematical Journal 2 340–353 ] [ Kleene Stephen Cole Recursive Predicates and Quantifiers American Mathematical Society Transactions 54 1 41–73 1943 10.2307/1990131 1990131 Transactions of the American Mathematical Society, Vol. 53, No. 1 ] [ Kleene Stephen Cole Introduction to Metamathematics North-Holland 1952 523942 ] [ Knuth Donald The Art of Computer Programming Addison–Wesley 1973 2nd 1/Fundamental Algorithms Donald Knuth ] [ Kugel Peter November 2005 Communications of the ACM It&apos;s time to think outside the computational box 48 11 ] [ Lewis, H.R. Harry R. Lewis Papadimitriou, C.H. Elements of the Theory of Computation Prentice-Hall Upper Saddle River, NJ, USA 1998 ] [ Manna Zohar Mathematical Theory of Computation Dover 1974 978-0-486-43238-0 2003 Zohar Manna ] [ 1960 The Theory of Algorithms American Mathematical Society Translations 2 15 1–14 1954 Andrey Markov (Soviet mathematician) ] [ Pour-El, M.B. Richards, J.I. Computability in Analysis and Physics Springer Verlag 1989 ] [ Rosser J. B. 1939 An Informal Exposition of Proofs of Godel&apos;s Theorem and Church&apos;s Theorem The Journal of Symbolic Logic 4 53–60 J. B. Rosser 10.2307/2269059 2269059 2 The Journal of Symbolic Logic, Vol. 4, No. 2 ] [ Soare Robert 1996 Computability and Recursion Bulletin of Symbolic Logic 2 284–321 Robert Soare ] [ Syropoulos Apostolos 2008 Hypercomputation: Computing Beyond the Church–Turing Barrier Springer 9780-387308869 ] [ Turing A.M. 1937 1936 On Computable Numbers, with an Application to the Entscheidungsproblem Proceedings of the London Mathematical Society 2 42 230–265 10.1112/plms/s2-42.1.230 ] [ Turing A.M. 1937 On Computable Numbers, with an Application to the Entscheidungsproblem: A correction Proceedings of the London Mathematical Society 2 43 544–546 10.1112/plms/s2-43.6.544 1938 6 ] [ Olszewski Adam 2006 Church&apos;s Thesis After 70 Years ] [ Gabbay D.M. 2001 Handbook of Philosophical Logic 2nd 1 ] Includes original papers by Gödel, Church, Turing, Rosser, Kleene, and Post mentioned in this section. Cited by Kleene (1952) as &quot; Über die Lāange von Beweisen &quot;, in Ergebnisse eines math. Koll, etc. Reprinted in The Undecidable, p.  255ff. Kleene refined his definition of &quot; general recursion &quot; and proceeded in his chapter &quot; 12. Algorithmic theories &quot; to posit &quot; Thesis I &quot; (p.  274); he would later repeat this thesis (in Kleene 1952:300) and name it &quot; Church&apos;s Thesis &quot; (Kleene 1952:317) (i.e., the Church thesis ). (and ) [ External links ] [ church-turing The Church–Turing Thesis B. Jack Copeland ]. &apos;&apos;Computation in Physical Systems&apos;&apos; A comprehensive philosophical treatment of relevant issues. Category:Computability theory Category:Alan Turing Category:Theory of computation Category:Philosophy of computer science bg:Тезис на Чърч ca:Tesi de Church-Turing cs:Churchova-Turingova teze da:Church-Turing-tesen de:Church-Turing-These et:Churchi tees es:Tesis de Church-Turing eo:Ĉurĉa tezo fa:تز چرچ-تورینگ fr:Thèse de Church ko:처치-튜링 명제 hr:Church-Turingova teza it:Tesi di Church-Turing he:תזת צ&apos;רץ&apos;-טיורינג lt:Tiuringo mašina#Tiuringo tezė hu:Church–Turing-tézis nl:Church-Turing-hypothese ja:チャーチ＝チューリングのテーゼ pl:Hipoteza Churcha-Turinga pt:Tese de Church-Turing ru:Тезис Чёрча — Тьюринга simple:Church-Turing thesis sh:Church-Turingova teza fi:Churchin–Turingin teesi tr:Church-Turing tezi uk:Теза Черча zh:邱奇-图灵论题