Software engineering (SE) is the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software, and the study of these approaches; that is, the application of engineering to software. { SWEBOK } [ Pierre Bourque and Robert Dupuis Guide to the Software Engineering Body of Knowledge - 2004 Version IEEE Computer Society 2004 1–1 0-7695-2330-7 http://www.swebok.org executive editors, Alain Abran, James W. Moore; editors, Pierre Bourque, Robert Dupuis. ] It is the application of engineering to software because it integrates significant mathematics, computer science and practices whose origins are in engineering. [ ACM 2006 http://computingcareers.acm.org/?page_id%3D12 Computing Degrees &amp; Careers ACM 2010-11-23 ] It is also defined as a systematic approach to the analysis, design, assessment, implementation, testing, maintenance and reengineering of software, that is, the application of engineering to software. [ Laplante Phillip What Every Engineer Should Know about Software Engineering CRC Boca Raton 2007 978-0-8493-7228-5 http://books.google.com/?id%3DpFHYk0KWAEgC%26amp%3Blpg%3DPP1%26amp%3Bdq%3DWhat%20Every%20Engineer%20Should%20Know%20about%20Software%20Engineering.%26amp%3Bpg%3DPA1#v%3Donepage%26amp%3Bq%26amp%3Bf%3Dfalse 2011-01-21 ] The term software engineering first appeared in the 1968 NATO Software Engineering Conference, and was meant to provoke thought regarding the perceived &quot; software crisis &quot; at the time. [ Naur Peter Brian Randell Software Engineering: Report of a conference sponsored by the NATO Science Committee Scientific Affairs Division, NATO 7–11 October 1968 Garmisch, Germany http://homepages.cs.ncl.ac.uk/brian.randell/NATO/nato1968.PDF PDF 2008-12-26 ] [ http://homepages.cs.ncl.ac.uk/brian.randell/NATO/NATOReports/index.html The 1968/69 NATO Software Engineering Reports 2008-10-11 Randell Brian Brian Randell 10 August 2001 Brian Randell&apos;s University Homepage The School of the Computer Sciences, Newcastle University The idea for the first NATO Software Engineering Conference, and in particular that of adopting the then practically unknown term &quot; software engineering &quot; as its (deliberately provocative) title, I believe came originally from Professor Fritz Bauer. ] In other word software engineering is the engineering way by which we can produce a software with three main criteria:- 1. Quality2. Cost3. Time Software development, a much used and more generic term, does not necessarily subsume the engineering paradigm. Although it is questionable what impact it has had on actual software development over the last 40 years, [ http://alistair.cockburn.us/The%2Bend%2Bof%2Bsoftware%2Bengineering%2Band%2Bthe%2Bstart%2Bof%2Beconomic-cooperative%2Bgaming The end of software engineering and the start of economic-cooperative gaming Alistair.cockburn.us 2012-03-25 ] [ http://cat.inist.fr/?aModele%3DafficheN%26amp%3Bcpsidt%3D15417224 35 years on: to what extent has software engineering design achieved its goals? Cat.inist.fr 2012-03-25 ] the field&apos;s future looks bright according to Money Magazine and Salary.com, which rated &quot; software engineer &quot; as the best job in the United States in 2006. [ Kalwarski Tara Daphne Mosher, Janet Paskin and Donna Rosato 2006 http://money.cnn.com/magazines/moneymag/bestjobs/2006/ Best Jobs in America MONEY Magazine CNN 2006-04-20 ] In 2012, software engineering was again ranked as the best job in the United States, this time by the Wall Street Journal. [ http://online.wsj.com/article/SB10001424052702303772904577336230132805276.html Best and Worst Jobs of 2012 online.wsj.com 2012 ] [ History ] [ History of software engineering ] When the first modern digital computer s appeared in the early 1940s, [ Leondes intelligent systems: technology and applications 2002 CRC Press 978-0-8493-1121-5 ] the instructions to make them operate were wired into the machine. Practitioners quickly realized that this design was not flexible and came up with the &quot; stored program architecture &quot; or von Neumann architecture. Thus the division between &quot; hardware &quot; and &quot; software &quot; began with abstraction being used to deal with the complexity of computing. Programming languages started to appear in the 1950s and this was also another major step in abstraction. Major languages such as Fortran, ALGOL, and COBOL were released in the late 1950s to deal with scientific, algorithmic, and business problems respectively. E.W. Dijkstra wrote his seminal paper, &quot; Go To Statement Considered Harmful &quot;, [ Dijkstra E. W. Edsger_Dijkstra Go To Statement Considered Harmful Communications of the ACM 11 3 147–148 March 1968 http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF 2009-08-10 10.1145/362929.362947 ] in 1968 and David Parnas introduced the key concept of modularity and information hiding in 1972 [ Parnas David David Parnas Communications of the ACM 15 12 1053–1058 http://www.acm.org/classics/may96/ On the Criteria To Be Used in Decomposing Systems into Modules December 1972 2008-12-26 10.1145/361598.361623 ] to help programmers deal with the ever increasing complexity of software systems. A software system for managing the hardware called an operating system was also introduced, most notably by Unix in 1969. In 1967, the Simula language introduced the object-oriented programming paradigm. These advances in software were met with more advances in computer hardware. In the mid 1970s, the microcomputer was introduced, making it economical for hobbyists to obtain a computer and write software for it. This in turn led to the now famous Personal Computer (PC) and Microsoft Windows. The Software Development Life Cycle or SDLC was also starting to appear as a consensus for centralized construction of software in the mid 1980s. The late 1970s and early 1980s saw the introduction of several new Simula-inspired object-oriented programming languages, including Smalltalk, Objective-C, and C++. Open-source software started to appear in the early 90s in the form of Linux and other software introducing the &quot; bazaar &quot; or decentralized style of constructing software. { Raymond, Eric S. } { The Cathedral and the Bazaar. ed 3.0. 2000. } Then the World Wide Web and the popularization of the Internet hit in the mid 90s, changing the engineering of software once again. Distributed systems gained sway as a way to design systems, and the Java programming language was introduced with its own virtual machine as another step in abstraction. Programmers collaborated and wrote the Agile Manifesto, which favored more lightweight processes to create cheaper and more timely software. The current definition of software engineering is still being debated by practitioners today as they struggle to come up with ways to produce software that is &quot; cheaper, better, faster &quot;. Cost reduction has been a primary focus of the IT industry since the 1990s. Total cost of ownership represents the costs of more than just acquisition. It includes things like productivity impediments, upkeep efforts, and resources needed to support infrastructure. [ Profession ] [ Software engineer ] Legal requirements for the licensing or certification of professional software engineers vary around the world. In the UK, the British Computer Society licenses software engineers and members of the society can also become Chartered Engineers (CEng), while in some areas of Canada, such as Alberta, Ontario, [ N.S.W. Williams Professional Engineers Ontario&apos;s approach to licensing software engineering practitioners Software Engineering Education and Training, 2001 Proceedings. 14th Conference on 77–78 IEEE 19–21 February 2001 Charlotte, NC ] and Quebec, software engineers can hold the Professional Engineer (P.Eng)designation and/or the Information Systems Professional (I.S.P.) designation; however, there is no legal requirement to have these qualifications. The IEEE Computer Society and the ACM, the two main professional organizations of software engineering, publish guides to the profession of software engineering. The IEEE&apos;s Guide to the Software Engineering Body of Knowledge - 2004 Version, or SWEBOK, defines the field and describes the knowledge the IEEE expects a practicing software engineer to have. The IEEE also promulgates a &quot; Software Engineering Code of Ethics &quot;. [ http://www.computer.org/cms/Computer.org/Publications/code-of-ethics.pdf &apos; &amp; #39;Software Engineering Code of Ethics&apos; &amp; #39; PDF 2012-03-25 ] [ Employment ] In 2004, the U. S. Bureau of Labor Statistics counted 760,840 software engineer s holding jobs in the U.S.; in the same time period there were some 1.4 million practitioners employed in the U.S. in all other engineering disciplines combined. { Bureau of Labor Statistics, U.S. Department of Labor, &apos;&apos;USDL 05-2145: Occupational Employment and Wages, November 2004&apos;&apos;, Table 1. } Due to its relative newness as a field of study, formal education in software engineering is often taught as part of a computer science curriculum, and many software engineers hold computer science degrees. [ http://computingcareers.acm.org/?page_id%3D12 Software Engineering 2008-02-01 ] Many software engineer s work as employees or contractors. Software engineers work with businesses, government agencies (civilian or military), and non-profit organizations. Some software engineers work for themselves as freelancer s. Some organizations have specialists to perform each of the tasks in the software development process. Other organizations require software engineers to do many or all of them. In large projects, people may specialize in only one role. In small projects, people may fill several or all roles at the same time. Specializations include: in industry ( analysts, architects, developers, testers, technical support, middleware analyst s, managers ) and in academia ( educator s, researcher s ). Most software engineers and programmers work 40 hours a week, but about 15 percent of software engineers and 11 percent of programmers worked more than 50 hours a week in 2008. Injuries in these occupations are rare. However, like other workers who spend long periods in front of a computer terminal typing at a keyboard, engineers and programmers are susceptible to eyestrain, back discomfort, and hand and wrist problems such as carpal tunnel syndrome. [ http://www.bls.gov/oco/ocos303.htm#training Computer Software Engineers and Computer Programmers 2009-12-17 ] [ Certification ] The Software Engineering Institute offers certifications on specific topics like Security, Process improvement and Software architecture. [ http://www.sei.cmu.edu/certification/ SEI certification page Sei.cmu.edu 2012-03-25 ] Apple, IBM, Microsoft and other companies also sponsor their own certification examinations. Many IT certification programs are oriented toward specific technologies, and managed by the vendors of these technologies. [ http://www.informit.com/articles/article.aspx?p%3D1180991 The Top 10 Problems with IT Certification in 2008 Wyrostek Warren March 14, 2008 InformIT 2009-03-03 ] These certification programs are tailored to the institutions that would employ people who use these technologies. Broader certification of general software engineering skills is available through various professional societies. [ 2006 ], the IEEE had certified over 575 software professionals as a Certified Software Development Professional (CSDP). [ IEEE Computer Society http://www.ifip.org/minutes/GA2006/Tab18b-US-IEEE.pdf PDF 2006 IEEE computer society report to the IFIP General Assembly 2007-04-10 ] In 2008 they added an entry-level certification known as the Certified Software Development Associate (CSDA). [ IEEE http://www.computer.org/portal/web/certification/csda CSDA 2010-04-20 ] The ACM had a professional certification program in the early 1980s, [ March 2009 ] which was discontinued due to lack of interest. The ACM examined the possibility of professional certification of software engineers in the late 1990s, but eventually decided that such certification was inappropriate for the professional industrial practice of software engineering. [ http://www.cs.wm.edu/~coppit/csci690-spring2004/papers/selep_main.pdf A Summary of the ACM Position on Software Engineering as a Licensed Engineering Profession ACM July 17, 2000 Association for Computing Machinery (ACM) 2009-03-03 At its meeting in May 2000, the Council further concluded that the framework of a licensed professional engineer, originally developed for civil engineers, does not match the professional industrial practice of software engineering. Such licensing practices would give false assurances of competence even if the body of knowledge were mature; and would preclude many of the most qualified software engineers from becoming licensed. ] [ October 2010 H3llBot ] In the U.K. the British Computer Society has developed a legally recognized professional certification called Chartered IT Professional (CITP), available to fully qualified Members (MBCS). Software engineers may be eligible for membership of the Institution of Engineering and Technology and so qualify for Chartered Engineer status. In Canada the Canadian Information Processing Society has developed a legally recognized professional certification called Information Systems Professional (ISP). [ Canadian Information Processing Society http://www.cips.ca/standards/isp I.S.P. Designation 2007-03-15 ] In Ontario, Canada, Software Engineers who graduate from a Canadian Engineering Accreditation Board (CEAB) accredited program, successfully complete PEO&apos;s (Professional Engineers Ontario) Professional Practice Examination (PPE) and have at least 48 months of acceptable engineering experience are eligible to be licensed through the Professional Engineers Ontario and can become Professional Engineers P.Eng. [ http://www.peo.on.ca Professional Engineers Ontario: Welcome to PEO&apos;s website Peo.on.ca 2012-03-25 ] [ Impact of globalization ] The initial impact of outsourcing, and the relatively lower cost of international human resources in developing third world countries led to a massive migration of software development activities from corporations in North America and Europe to India and later: China, Russia, and other developing countries. This approach had some flaws, mainly the distance / timezone difference that prevented human interaction between clients and developers, but also the lower quality of the software developed by the outsourcing companies and the massive job transfer. This had a negative impact on many aspects of the software engineering profession. For example, some students in the developed world avoid education related to software engineering because of the fear of offshore outsourcing (importing software products or services from other countries) and of being displaced by foreign visa workers. [ Patrick Thibodeau http://www.computerworld.com/printthis/2006/0%2C4814%2C111202%2C00.html As outsourcing gathers steam, computer science interest wanes Computerworld.com 2006-05-05 2012-03-25 ] Although statistics do not currently show a threat to software engineering itself; a related career, computer programming does appear to have been affected. [ http://www.bls.gov/oco/ocos110.htm#outlook Computer Programmers Bls.gov 2012-03-25 ] [ Mullins Robert http://www.infoworld.com/article/07/03/13/HNslowsoftdev_1.html Software developer growth slows in North America InfoWorld 2007-03-13 2012-03-25 ] Nevertheless, the ability to smartly leverage offshore and near-shore resources via the follow-the-sun workflow has improved the overall operational capability of many organizations. [ http://www.cognizant.com/html/content/news/GartnerMQ_Cognizant.pdf Gartner Magic Quadrant Cognizant.com 2012-03-25 ] When North Americans are leaving work, Asians are just arriving to work. When Asians are leaving work, Europeans are arriving to work. This provides a continuous ability to have human oversight on business-critical processes 24 hours per day, without paying overtime compensation or disrupting key human resource sleep patterns. [ Education ] A knowledge of programming is a pre-requisite to becoming a software engineer. In 2004 the IEEE Computer Society produced the SWEBOK, which has been published as ISO/IEC Technical Report 19759:2004, describing the body of knowledge that they believe should be mastered by a graduate software engineer with four years of experience. [ Abran Alain Guide to the Software Engineering Body of Knowledge IEEE Computer Society Los Alamitos 2005 0-7695-2330-7 http://www.computer.org/portal/web/swebok 2010-09-13 2004 Chapter 1: Introduction to the Guide http://www.computer.org/portal/web/swebok/html/ch1 The total volume of cited literature is intended to be suitable for mastery through the completion of an undergraduate education plus four years of experience. ] Many software engineers enter the profession by obtaining a university degree or training at a vocational school. One standard international curriculum for undergraduate software engineering degrees was defined by the CCSE, and updated in 2004. [ http://sites.computer.org/ccse/ SE2004 Software Engineering Curriculum Sites.computer.org 2003-09-30 2012-03-25 ] A number of universities have Software Engineering degree programs; [ 2010 on ], there were 244 Campus programs, 70 Online programs, 230 Masters-level programs, 41 Doctorate-level programs, and 69 Certificate-level programs in the United States. { Degree programs in Software Engineering } In addition to university education, many companies sponsor internships for students wishing to pursue careers in information technology. These internships can introduce the student to interesting real-world tasks that typical software engineers encounter every day. Similar experience can be gained through military service in software engineering. [ Comparison with other disciplines ] Major differences between software engineering and other engineering disciplines, according to some researchers, result from the costs of fabrication. [ Young Michal Faulk Stuart 2010 Proceedings of the FSE/SDP workshop on Future of software engineering research (FoSER &apos;10) PDF 2011-02-25 ACM 978-1-4503-0427-6 10.1145/1882362.1882451 439–442 Sharing What We Know About Software Engineering http://www.ics.uci.edu/~jajones/papers/p439.pdf The essential distinction between software and other engineered artifacts has always been the absence of fabrication cost. In conventional engineering of physical artifacts, the cost of materials and fabrication has dominated the cost of design and placed a check on the complexity of artifacts that can be designed. When one bottleneck is removed, others appear, and software engineering has therefore faced the essential challenges of complexity and the cost of design to an extent that conventional engineering has not. Software engineering has focused on issues in managing complexity, from process to modular design to cost-effective verification, because that is the primary leverage point when the costs of materials and fabrication are nil. ] [ Subdisciplines ] Software engineering can be divided into ten subdisciplines. They are: Software requirements : The elicitation, analysis, specification, and validation of requirements for software. Software design : The process of defining the architecture, components, interfaces, and other characteristics of a system or component. It is also defined as the result of that process. Software construction : The detailed creation of working, meaningful software through a combination of coding, verification, unit testing, integration testing, and debugging. Software testing : The dynamic verification of the behavior of a program on a finite set of test cases, suitably selected from the usually infinite executions domain, against the expected behavior. Software maintenance : The totality of activities required to provide cost-effective support to software. Software configuration management : The identification of the configuration of a system at distinct points in time for the purpose of systematically controlling changes to the configuration, and maintaining the integrity and traceability of the configuration throughout the system life cycle. Software engineering management: The application of management activities—planning, coordinating, measuring, monitoring, controlling, and reporting—to ensure that the development and maintenance of software is systematic, disciplined, and quantified. Software engineering process : The definition, implementation, assessment, measurement, management, change, and improvement of the software life cycle process itself. Software engineering tools and methods: The computer-based tools that are intended to assist the software life cycle processes, see Computer Aided Software Engineering, and the methods which impose structure on the software engineering activity with the goal of making the activity systematic and ultimately more likely to be successful. Software quality : The degree to which a set of inherent characteristics fulfills requirements. [ Related disciplines ] Software engineering is a direct subfield of computer science and has some relations with management science. It is also considered a part of overall systems engineering. [ Systems engineering ] Systems engineers deal primarily with the overall system requirements and design, including hardware and human issues. They are often concerned with partitioning functionality to hardware, software or human operators. Therefore, the output of the systems engineering process serves as an input to the software engineering process. [ Computer software engineers ] Computer Software Engineers are usually systems level (software engineering, information systems) computer science or software level computer engineering graduates. This term also includes general computer science graduates with a few years of practical on the job experience involving software engineering. [ See also ] [ Software Software Testing ] [ Outline of software engineering ] Bachelor of Science in Information Technology Bachelor of Software Engineering List of software engineering conferences List of software engineering publications Software craftsmanship [ References ] [ 30em ] [ Further reading ] [ Ghezzi Carlo Fundamentals of Software Engineering 1991 2nd (International) 2003 Pearson Education @ Prentice-Hall Mehdi Jazayeri, Dino Mandrioli ] [ Jalote Pankaj Pankaj Jalote An Integrated Approach to Software Engineering 1991 http://www.springer.com/east/home?SGWisbn%3D5-102-22-52090005-0%26amp%3BchangeHeader%3Dtrue 3rd 2005 Springer 0-387-20881-X ] [ Pressman Roger S Roger S. Pressman Software Engineering: A Practitioner&apos;s Approach 6th 2005 McGraw-Hill Boston, Mass 0-07-285318-2 ] [ Sommerville Ian Ian Sommerville (academic) Software Engineering 1982 http://www.pearsoned.co.uk/HigherEducation/Booksby/Sommerville/ 8th 2007 Pearson Education Harlow, England 0-321-31379-8 ] [ External links ] [ Software engineering ] [ Introduction to Software Engineering ] Computing Curricula 2005: The Overview Report by The Joint Task Force for Computing Curricula ACM/AIS/IEEE-CS Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering by The Joint Task Force on Computing Curricula ACM/IEEE-CS Guidelines for Associate-Degree Transfer Curriculum in Software Engineering by The ACM Two-Year College Education Committee and The IEEE Computer Society/ACM Joint Task Force on Software Engineering Guide to the Software Engineering Body of Knowledge Computer Software Engineers - Definition and statistics from the U.S. Bureau of Labor Statistics A Student&apos;s Guide to Software Engineering Projects - a free online guide for students taking SE project courses The Open Systems Engineering and Software Development Life Cycle Framework OpenSDLC.org the integrated Creative Commons SDLC af:Sagteware-ingenieurswese am:የሶፍትዌር አሠራር ar:هندسة البرمجيات ast:Inxeniería del software bg:Софтуерно инженерство bs:Softverski inženjering ca:Enginyeria de programari cs:Softwarové inženýrství da:Softwareudvikling de:Softwaretechnik el:Μηχανική λογισμικού es:Ingeniería de software eu:Software-ingeniaritza fa:مهندسی نرم‌افزار fr:Génie logiciel ga:Innealtóireacht bogearraí gv:Jeshaghteyrys cooid vog gl:Enxeñaría de software ko:소프트웨어 공학 hy:Ծրագրային ապահովման ճարտարագիտություն hi:सॉफ्टवेयर इंजीनियरी hr:Programsko inženjerstvo id:Rekayasa perangkat lunak is:Hugbúnaðarverkfræði it:Ingegneria del software he:הנדסת תוכנה sw:Uundaji bidhaa pepe za tarakilishi ku:Endezyariya nivîsbariyê lo:Software engineering lv:Programminženierija lt:Programų inžinerija mk:Софтверско инженерство ml:സോഫ്റ്റ്വെയർ എഞ്ചിനീയറിങ് ms:Pembangunan perisian mn:Програм хангамжийн инженерчлэл nl:Software engineering ja:ソフトウェア工学 kk:Бағдарламалық жасақтама инжинирингі no:Programvareutvikling pl:Inżynieria oprogramowania pt:Engenharia de software ro:Inginerie software ru:Инженерия программного обеспечения sq:Inxhinieria Softuerike si:මෘදුකාංග ඉංජිනේරු ශිල්පය sk:Softvérové inžinierstvo sr:Инжењеринг софтвера su:Rékayasa software fi:Ohjelmistotuotanto sv:Programvaruutveckling tl:Software engineering ta:மென்பொருட் பொறியியல் th:วิศวกรรมซอฟต์แวร์ ti:ሶፍትዌር ምህንድስና tr:Yazılım mühendisliği uk:Програмна інженерія vi:Công nghệ phần mềm war:Inhenyerya hin software yi:ווייכווארג אינזשעניריע zh:软件工程