Direct3D is part of Microsoft &apos;s DirectX application programming interface (API). Direct3D is available for Microsoft Windows operating system s ( Windows 95 and above), and for other platforms through the open source software Wine. It is the base for the graphics API on the Xbox and Xbox 360 console systems. Direct3D is used to render three dimensional graphics in applications where performance is important, such as games. Direct3D also allows applications to run fullscreen instead of embedded in a window, though they can still run in a window if programmed for that feature. Direct3D uses hardware acceleration if it is available on the graphics card, allowing for hardware acceleration of the entire 3D rendering pipeline or even only partial acceleration. Direct3D exposes the advanced graphics capabilities of 3D graphics hardware, including z-buffering, anti-aliasing, alpha blending, mipmap ping, atmospheric effects, and perspective-correct texture mapping. Integration with other DirectX technologies enables Direct3D to deliver such features as video mapping, hardware 3D rendering in 2D overlay planes, and even sprites, providing the use of 2D and 3D graphics in interactive media titles. Direct3D is a 3D API. That is, it contains many commands for 3D rendering; however, since version 8, Direct3D has superseded the old DirectDraw framework and also taken responsibility for the rendering of 2D graphics. [ http://www.microsoft.com/download/en/details.aspx?id%3D9977 DirectX Software Development Kit, October 2006 Microsoft ] Microsoft strives to continually update Direct3D to support the latest technology available on 3D graphics cards. Direct3D offers full vertex software emulation but no pixel software emulation for features not available in hardware. For example, if software programmed using Direct3D requires pixel shaders and the video card on the user&apos;s computer does not support that feature, Direct3D will not emulate it, although it will compute and render the polygons and textures of the 3D models, albeit at a usually degraded quality and performance compared to the hardware equivalent. The API does include a Reference Rasterizer (or REF device), which emulates a generic graphics card in software, although it is too slow for most real-time 3D applications and is typically only used for debugging. A new real-time software rasterizer, WARP, designed to emulate complete feature set of Direct3D 10.1, is included with Windows 7; its performance is said to be on par with lower-end 3D cards on multi-core CPUs. [ http://msdn.microsoft.com/en-us/library/windows/desktop/gg615082#architecture Windows Advanced Rasterization Platform (WARP) Guide - WARP Architecture and Performance MSDN ] Direct3D&apos;s main competitor is OpenGL. There are many features and issues that proponents of either API disagree over, see Comparison of OpenGL and Direct3D for a summary. [ History ] In 1992, Servan Keondjian started a company named RenderMorphics, which developed a 3D graphics API named Reality Lab, which was used in medical imaging and CAD software. Two versions of this API were released. Microsoft bought RenderMorphics in February 1995, bringing Keondjian on board to implement a 3D graphics engine for Windows 95. This resulted in the first version of Direct3D that shipped in DirectX 2.0 and DirectX 3.0. Direct3D initially implemented &quot; retained mode &quot; and &quot; immediate mode &quot; 3D APIs. The retained mode was a COM -based scene graph API that attained little adoption. Game developers clamored for more direct control of the hardware&apos;s activities than the Direct3D retained mode could provide. Only two games that sold a significant volume, Lego Island and Lego Rock Raiders, were based on the Direct3D retained mode, so Microsoft did not update the retained mode after DirectX 3.0. The first version of Direct3D immediate mode was based on an &quot; execute buffer &quot; programming model that Microsoft hoped hardware vendors would support directly. Execute buffers were intended to be allocated in hardware memory and parsed by the hardware in order to perform the 3D rendering. They were extremely awkward to program, however, hindering adoption of the new API and stimulating calls for Microsoft to adopt OpenGL as the official 3D rendering API for games as well as workstation applications. (see OpenGL vs. Direct3D ) Rather than adopt OpenGL as a gaming API, Microsoft chose to continue improving Direct3D, not only to be competitive with OpenGL, but to compete more effectively with proprietary APIs such as 3dfx &apos;s Glide. A team in Redmond took over development of the Direct3D Immediate mode, while Servan&apos;s RenderMorphics team continued work on the Retained mode. [ Direct3D 5 to 9 ] Direct3D 5.0 introduced the DrawPrimitive API that eliminated the need for applications to construct execute buffers. Direct3D 6.0 introduced numerous features to cover contemporary hardware (such as multitexture [ http://www.gamedev.net/page/resources/_/reference/programming/directx/direct3d/direct3d-7-immediate-mode-framework-programming-r1028 Direct3D 7 Immediate Mode Framework Programming 3: Multitexturing gamedev.net 2000-05-29 ] and stencil buffer s ) as well as optimized geometry pipeline s for x87, SSE and 3DNow! and optional texture management to simplify programming. Direct3D 6.0 also included support for features that had been licensed by Microsoft from specific hardware vendors for inclusion in the API, in exchange for the time-to-market advantage to the licensing vendor. S3 texture compression support was one such feature, renamed as DXTC for purposes of inclusion in the API. Another was TriTech&apos;s proprietary bump mapping technique. Microsoft included these features in DirectX, then added them to the requirements needed for drivers to get a Windows logo to encourage broad adoption of the features in other vendors&apos; hardware. Direct3D 7.0 introduced the.dds texture format [ http://msdn.microsoft.com/en-us/library/windows/desktop/bb943990 DDS (DirectDraw Surface format) MSDN ] and support for transform and lighting hardware acceleration (first available on PC hardware with NVIDIA&apos;s GeForce ), as well as the ability to allocate vertex buffers in hardware memory. Hardware vertex buffers represent the first substantive improvement over OpenGL in DirectX history. Direct3D 7.0 also augmented DirectX support for multitexturing hardware, and represents the pinnacle of fixed-function multitexture pipeline features: although powerful, it was so complicated to program that a new programming model was needed to expose the shading capabilities of graphics hardware. Direct3D 8.0 introduced programmability in the form of vertex and pixel shader s, enabling developers to write code without worrying about superfluous hardware state. The complexity of the shader programs depended on the complexity of the task, and the display driver compiled those shaders to instructions that could be understood by the hardware. Direct3D 8.0 and its programmable shading capabilities were the first major departure from an OpenGL-style fixed-function architecture, where drawing is controlled by a complicated state machine. Direct3D 8.0 also eliminated DirectDraw as a separate API. [ http://www.gamedev.net/reference/articles/article1247.asp DirectX 8 Graphics and Video: A Fresh Start 2000-11-30 gamedev.net ] Direct3D subsumed all remaining DirectDraw API calls still needed for application development, such as Present(), the function used to display rendering results. Direct3D was not considered to be user friendly, but as of DirectX version 8.1, many usability problems were resolved. Direct3D 8 contained many powerful 3D graphics features, such as vertex shaders, pixel shaders, fog, bump mapping and texture mapping. Direct3D 9.0 added a new version of the High Level Shader Language, [ http://www.microsoft.com/presspass/press/2003/Jan03/01-22DirectXHLSLPR.mspx HLSL in Direct3D 9.0 ] support for floating-point texture formats, Multiple Render Targets, and texture lookups in the vertex shader. An extension only available in Windows Vista, called Direct3D 9Ex (previously versioned 9.0L), allows the use of the advantages offered by Windows Vista&apos;s Windows Display Driver Model (WDDM) and is used for Windows Aero. [ http://msdn.microsoft.com/en-us/library/windows/desktop/ee417756 Graphics APIs in Windows August 2009 MSDN ] Direct3D 9Ex, in conjunction with DirectX 9 class WDDM drivers allows graphics memory to be virtualized and paged out to system memory, allows graphics operations to be interrupted and scheduled and allow DirectX surfaces to be shared across processes. [ http://blogs.msdn.com/greg_schechter/archive/2006/04/02/566767.aspx The role of the Windows Display Driver Model in the DWM 2006-04-02 ] Direct3D 9.0Ex was previously known as version 1.0 of Windows Graphics Foundation (WGF). [ Direct3D 10 ] [ List of games with DirectX 10 support Windows Display Driver Model ] Windows Vista includes a major update to the Direct3D API. Originally called WGF 2.0 (Windows Graphics Foundation 2.0), then DirectX 10 and DirectX Next, Direct3D 10 features an updated shader model 4.0 and optional interruptibility for shader programs.. In this model shaders still consist of fixed stages as on previous versions, but all stages support a nearly unified interface, as well as a unified access paradigm for resources such as textures and shader constants. The language itself has been extended to be more expressive, including integer operations, a greatly increased instruction count, and more C-like language constructs. In addition to the previously available vertex and pixel shader stages, the API includes a geometry shader stage that breaks the old model of one vertex in/one vertex out, to allow geometry to actually be generated from within a shader, allowing for complex geometry to be generated entirely on the graphics hardware. Windows XP does not support DirectX 10 and above. Unlike prior versions of the API, Direct3D 10 no longer uses &quot; capability bits &quot; (or &quot; caps &quot; ) to indicate which features are supported on a given graphics device. Instead, it defines a minimum standard of hardware capabilities which must be supported for a display system to be &quot; Direct3D 10 compatible &quot;. This is a significant departure, with the goal of streamlining application code by removing capability-checking code and special cases based on the presence or absence of specific capabilities. Because Direct3D 10 hardware was comparatively rare after the initial release of Windows Vista and because of the massive installed base of non-Direct3D 10 compatible graphics cards, the first Direct3D 10-compatible games still provide Direct3D 9 render paths. Examples of such titles are games originally written for Direct3D 9 and ported to Direct3D 10 after their release, such as Company of Heroes, or games originally developed for Direct3D 9 with a Direct3D 10 path retrofitted later in development, such as Hellgate: London or Crysis. The DirectX 10 SDK became available in February 2007. [ http://www.microsoft.com/download/en/details.aspx?id%3D9539 DirectX Software Development Kit, February 2007 Microsoft ] New features: [ http://www.tomshardware.com/reviews/direct3d-10%2C1356-6.html What Direct3D 10 is all about - Additional Improvements 2006-11-08 Tom&apos;s Hardware ] Fixed pipelines CNet News are being done away with in favor of fully programmable pipelines (often referred to as unified pipeline architecture), which can be programmed to emulate the same. New state object to enable (mostly) the CPU to change states efficiently. Shader model 4.0 enhances the programmability of the graphics pipeline. It adds instructions for integer and bitwise calculations. Geometry shaders, which work on adjacent triangles which form a mesh. Texture arrays enable swapping of textures in GPU without CPU intervention. Predicated Rendering allows drawing calls to be ignored based on some other conditions. This enables rapid occlusion culling, which prevents objects from being rendered if it is not visible or too far to be visible. Instancing 2.0 support, allowing multiple instances of similar meshes, such as armies, or grass or trees, to be rendered in a single draw call, reducing the processing time needed for multiple similar objects to that of a single one. [ Direct3D 10.1 ] Direct3D 10.1 was announced by Microsoft shortly after the release of Direct3D 10 as a minor update. The specification was finalized with the release of November 2007 DirectX SDK and the runtime was shipped with the Windows Vista SP1, which is available since mid-March 2008. Direct3D 10.1 sets a few more image quality standards for graphics vendors, and gives developers more control over image quality. [ http://www.extremetech.com/extreme/57370-microsoft-presents-directx-101-details-at-siggraph Microsoft Presents DirectX 10.1 Details at SIGGRAPH 2007-08-07 ExtremeTech ] [ http://msdn.microsoft.com/en-us/library/windows/desktop/bb694530 Direct3D 10.1 Features MSDN ] Features include finer control over antialiasing (both multisampling and supersampling with per sample shading and application control over sample position) and more flexibilities to some of the existing features (cubemap arrays and independent blending modes). Direct3D 10.1 level hardware must support the following features: Mandatory 32-bit floating point filtering. Mandatory support for 4x anti-aliasing Shader model 4.1 Unlike Direct3D 10 which strictly required Direct3D 10-class hardware and driver interfaces, Direct3D 10.1 runtime can run on Direct3D 10.0 hardware using a concept of &quot; feature levels &quot;, [ http://msdn.microsoft.com/en-us/library/windows/desktop/bb694529 D3D10_FEATURE_LEVEL1 enumeration 2009-11-22 MSDN ] but new features will be supported exclusively by new hardware. The only available Direct3D 10.1 hardware as of June 2008 were the Radeon HD 3000 series and Radeon HD 4000 series from ATI; in 2009, they were joined by Chrome 430/440GT GPUs from S3 Graphics and select lower-end models in GeForce 200 series from Nvidia. In 2011, Intel chipsets started supporting Direct3D 10.1 with the introduction of HD graphics 2000 (GMA HD). [ Direct3D 11 ] [ List of games with DirectX 11 support Windows Advanced Rasterization Platform ] Direct3D 11 was released as part of Windows 7. It was presented at Gamefest 2008 on July 22, 2008 and demonstrated at the Nvision 08 technical conference on August 26, 2008. [ http://www.microsoftgamefest.com/presentations/2008.htm Gamefest 2008 Presentations Microsoft ] [ http://www.nvidia.com/content/nvision2008/tech_presentations.html 2011-09-16 Nvision 08 Tech Presentations Nvidia ] AMD previewed working DirectX11 hardware at Computex on June 3, 2009, running some DirectX 11 SDK samples. [ http://www.engadget.com/2009/06/03/amd-shows-off-worlds-first-directx-11-gpu/ 2009-06-03 AMD shows off world&apos;s first DirectX 11 GPU Engadget ] Its features include: Tessellation — to increase at runtime the number of visible polygons from a low detail polygonal model Multithreaded rendering — to render to the same Direct3D device object from different threads for multi core CPUs Compute shaders — which exposes the shader pipeline for non-graphical tasks such as stream processing and physics acceleration, similar in spirit to what OpenCL, Nvidia CUDA, ATI Stream achieves, and HLSL Shader Model 5 among others. Other notable features are the addition of two new texture compression algorithms for more efficient packing of high quality and HDR/alpha textures and an increased texture cache. The Direct3D 11 runtime is able to run on Direct3D 9 and 10.x-class hardware and drivers, expanding the [ D3D10_FEATURE_LEVEL1 ] functionality first introduced in Direct3D 10.1 runtime. Feature levels 9_1, 9_2 and 9_3 encapsulate various features of popular Direct3D 9 cards, and feature levels 10_0 and 10_1 refer to Direct3D 10 and 10.1 respectively; each upper level is a strict superset of a lower level. Feature levels allow developers to unify the rendering pipeline under Direct3D 11 API and make use of API improvements such as better resource management and multithreading even on entry-level cards, though advanced features such as new shader models and rendering stages will only be exposed on up-level hardware. [ http://msdn.microsoft.com/en-us/library/windows/hardware/ff569862 Windows Driver Kit - Supporting Direct3D 11 MSDN 2009-06-13 ] [ http://www.microsoft.com/download/en/details.aspx?id%3D15051 GameFest 2008: Introduction to the Direct3D 11 Graphics Pipeline Slide 56 Microsoft ] Tessellation was earlier considered for Direct3D 10, but was later abandoned. GPUs such as Radeon R600 feature a tessellation engine that can be used with Direct3D 9/10/10.1 [ http://null-ptr.blogspot.com/2008/07/using-ati-hardware-tesselation-in-dx9.html 2008-07-14 Using ATI hardware tessellation in DX9 ] [ http://developer.amd.com/gpu/radeon/Tessellation/Pages/default.aspx AMD DX9 Tessellation SDK ] [ http://developer.amd.com/gpu_assets/Real-Time_Tessellation_on_GPU.pdf Programming for Real-Time Tessellation on GPU ] and OpenGL, [ http://developer.amd.com/gpu/wgsdk/Pages/default.aspx OpenGL Tessellation Samples ] but it&apos;s not compatible with Direct3D 11 (according to Microsoft). Older graphics hardware such as Radeon 8xxx, GeForce 3/4 had support for another form of tesselation (RT patches, N patches) but those technologies never saw substantial use. As such, their support was dropped from newer hardware. Microsoft has also hinted at other features such as order independent transparency, which was never exposed by the Direct3D API but supported almost transparently by early Direct3D hardware such as Videologic&apos;s PowerVR line of chips. The Direct3D 11 Technical Preview has been included in November 2008 release of DirectX SDK. [ http://www.microsoft.com/download/en/details.aspx?id%3D4064 DirectX Software Development Kit, November 2008 Microsoft 2008-11-07 ] First seen in the Release Candidate version, Windows 7 integrates the first released Direct3D 11 support. Windows Vista Platform Update includes full-featured Direct3D 11 runtime and DXGI 1.1 update, as well as other related components from Windows 7 like WARP, Direct2D, DirectWrite, and WIC. { http://support.microsoft.com/kb/971644 } { http://blogs.msdn.com/directx/archive/2009/09/10/windows-7-transition-pack-for-windows-vista.aspx } [ Direct3D 11.1 ] Direct3D 11.1 is an update to the API that will initially ship with Windows 8. The Direct3D runtime in Windows 8 features DXGI 1.2 and requires new WDDM 1.2 device drivers. [ http://msdn.microsoft.com/en-us/library/windows/hardware/br259098 Windows Display Driver Model Enhancements in Windows Developer Preview 2011-09-13 MSDN ] Preliminary version of the Windows SDK for Windows 8 Developer Preview was released on September 13, 2011. [ http://msdn.microsoft.com/en-us/library/windows/desktop/hh404562 Direct3D 11.1 Features 2009-09-13 MSDN ] The new API features shader tracing, support for video playback, shader processing of video resources, and on-the-fly swapping between Direct3D 10 and 11 contexts and feature levels. Direct3D 11.1 also features minor updates to the shader language, such as larger constant buffers and optional double-precision instructions, as well as improved blending modes and mandatory support for 16-bit color formats to improve the performance of entry-level GPUs such as Intel HD Graphics. [ http://www.anandtech.com/show/4585/intels-haswell-igp-to-feature-directx-111-increased-professional-application-support Intel&apos;s Haswell IGP to Feature DirectX 11.1, Increased Professional Application Support 2011-08-05 AnandTech ] [ Architecture ] Abstract Layer Direct3D is a Microsoft DirectX API subsystem component. The aim of Direct3D is to abstract the communication between a graphics application and the graphics hardware drivers. It is presented like a thin abstract layer at a level comparable to GDI (see attached diagram). Direct3D contains numerous features that GDI lacks. Direct3D is an Immediate mode graphics API. It provides a low-level interface to every video card 3D function ( transformations, clipping, lighting, materials, textures, depth buffering and so on). It also had a higher level Retained mode component, that has now been officially discontinued. Direct3D immediate mode presents three main abstractions: devices, resources and swap chains (see attached diagram). Devices are responsible for rendering the 3D scene. They provide an interface with different rendering capabilities. For example, the mono device provides white and black rendering, while the RGB device renders in color. There are four types of devices: HAL ( hardware abstraction layer ) device: For devices supporting hardware acceleration. Device [ http://www.microsoft.com/download/en/details.aspx?id%3D1839 Software Rasterizer for DirectX 9.0 SDK 2005-08-01 Microsoft ] Reference device: Simulates new functions not yet available in hardware. It is necessary to install the Direct3D SDK to use this device type. Null reference device: Does nothing. This device is used when the SDK is not installed and a reference device is requested. Pluggable software device: Performs software rendering. This device was introduced with DirectX 9.0. Every device contains at least one swap chain. A swap chain is made up of one or more back buffer surfaces. Rendering occurs in the back buffer. Moreover, devices contain a collection of resources; specific data used during rendering. Each resource has four attributes: [ http://www.toymaker.info/Games/html/d3d_resources.html#MemoryPool Direct3D Resources - Memory pool ] Type: Determines the type of resource: surface, volume, texture, cube texture, volume texture, surface texture, index buffer or vertex buffer. Pool : Describes how the resource is managed by the runtime and where it is stored. In the Default pool the resource will exist only in device memory. Resources in the managed pool will be stored in system memory, and will be sent to the device when required. Resources in system memory pool will only exist in system memory. Finally, the scratch pool is basically the same as the system memory pool, but resources are not bound by hardware restrictions. Format: Describes the layout of the resource data in memory. For example, D3DFMT_R8G8B8 format value means a 24 bits colour depth (8 bits for red, 8 bits for green and 8 bits for blue). Usage: Describes, with a collection of flag bits, how the resource will be used by the application. These flags dictate which resources are used in dynamic or static access patterns. Static resource values don’t change after being loaded, whereas dynamic resource values may be modified. [ Pipeline ] Graphics pipeline process The Microsoft Direct3D 11 API defines a process to convert a group of vertices, textures, buffers, and state into an image on the screen. This process is described as a rendering pipeline with several distinct stages. The different stages of the Direct3D 10 pipeline are: [ http://msdn.microsoft.com/en-us/library/ff476882.aspx Graphics Pipeline MSDN ] Input Assembler: Reads in vertex data from an application supplied vertex buffer and feeds them down the pipeline. Vertex Shader : Performs operations on a single vertex at a time, such as transformations, skinning, or lighting. Hull Shader : Performs operations on sets of patch control points, and generates additional data known as patch constants. Tesselation stage: Subdivides geometry to create higher-order representations of the hull. Domain Shader : Performs operations on vertices output by the tessellation stage, in much the same way as a vertex shader. Geometry Shader : Processes entire primitives such as triangles, points, or lines. Given a primitive, this stage discards it, or generates one or more new primitives. Stream Output: Can write out the previous stage&apos;s results to memory. This is useful to recirculate data back into the pipeline. Rasterizer: Converts primitives into pixels, feeding these pixels into the pixel shader. The Rasterizer may also perform other tasks such as clipping what is not visible, or interpolating vertex data into per-pixel data. Pixel Shader : Determines the final pixel colour to be written to the render target and can also calculate a depth value to be written to the depth buffer. Output Merger: Merges various types of output data ( pixel shader values, alpha blending, depth/stencil...) to build the final result. The pipeline stages illustrated with a round box are fully programmable. The application provides a shader program that describes the exact operations to be completed for that stage. Many stages are optional and can be disabled altogether. [ Display modes ] Direct3D implements two display modes: [ February 2011 ] Fullscreen mode: The Direct3D application generates all of the graphical output for a display device. In this mode Direct3D automatically captures Alt-Tab and sets/restores screen resolution and pixel format without the programmer intervention. This also provides plenty of problems for debugging due to the &apos;Exclusive Cooperative Mode&apos;. Windowed mode: The result is shown inside the area of a window. Direct3D communicates with GDI to generate the graphical output in the display. Windowed mode can have the same level of performance as full-screen, depending on driver support. [ Direct3D Mobile ] [ October 2011 ] Direct3D Mobile is derived from Direct3D but has a smaller memory footprint. Windows CE provides Direct3D Mobile support. { Direct3D Mobile, Microsoft, 6 January 2010. } [ Related tools ] [ D3DX ] [ D3DX ] Direct3D comes with D3DX, a library of tools designed to perform common mathematical calculations on vector s, matrices and colors, calculating look-at and projection matrices, spline interpolation s, and several more complicated tasks, such as compiling or assembling shaders used for 3D graphic programming, compressed skeletal animation storage and matrix stacks. There are several functions that provide complex operations over 3D mesh es like tangent-space computation, mesh simplification, precomputed radiance transfer, optimizing for vertex cache friendliness and stripification, and generators for 3D text meshes. 2D features include classes for drawing screen-space lines, text and sprite based particle system s. Spatial functions include various intersection routines, conversion from/to barycentric coordinates and bounding box /sphere generators. D3DX is provided as a dynamic link library (DLL). Some features present in previous versions of D3DX were removed in Direct3D 11, such as: A large part of the math library has been removed. Microsoft recommends use of the XNA Math library instead. The Effect framework has been removed and is now distributed as source. The Mesh interface has been removed. [ DXUT ] DXUT (also called the sample framework) is a layer built on top of the Direct3D API. The framework is designed to help the programmer spend less time with mundane tasks, such as creating a window, creating a device, processing Windows messages and handling device events. It is only usable for writing simple technology-oriented demos, tutorials and workshops [ November 2011 ]. [ Wine ] The Wine project has working implementations of the Direct3D 8, 9 and 10 APIs (they are, as of 16 April 2011, 100%, 78% and 44% complete respectively). { Status of Windows APIs implementation } Wine&apos;s implementation can also be on Windows under certain conditions. { http://wiki.winehq.org/WineD3DOnWindows } Work on implementing Direct3D 10 began in Wine 1.1.7, using OpenGL via WGL. [ October 2011 ] [ Direct3D and Windows Vista ] [ September 2011 ] Windows Vista and its updated driver model brings some new improvements and changes compared to the Windows XP model, and is expected to evolve even more as the hardware and the OS evolve (via future service packs or in the next version of Windows ). Windows Vista forces multithreading, via a theoretically unlimited number of execution contexts on the GPU. Multithreading was already supported in Windows XP as two applications or more could execute in different windows and be hardware accelerated. Windows Vista makes it a requirement to support an arbitrarily large number of execution contexts (or threads) in hardware or in software. Vista, in its basic scheduling incarnation (the current driver model), manages threads all by itself, allowing the hardware to switch from one thread to the other when appropriate. This is a departure from Windows XP, where the hardware could decide to switch threads on its own, as the OS had limited control about what the GPU could do. Also Windows Vista handles memory management and paging (to system memory and to disk), which is a necessity in order to support a large number of execution contexts with their own resources. Each execution context is presented with a resource view of the GPU that matches the maximum available (or exceeds it for aware applications). Most of the management is implemented on the OS side in order to be properly integrated into the OS-kernel memory management. Execution contexts are protected from each other. Because of the user-mode implementation of the Vista driver, a rogue or badly written app can take control of the execution of the driver and could potentially access data from another process within GPU memory by sending modified commands. Though protected from access by another app, a well-written app still needs to protect itself against failures and device loss caused by other applications. The user-mode implementation can reduce the occurrence of BSODs caused by graphics drivers (which is a much more catastrophic event to a running app than a device-lost event). Regularly Microsoft spokespeople talked about the necessity to have a finer grain context switching (referred to as &quot; advanced scheduling &quot; ) so as to be able to switch two execution threads at the shader-instruction level instead of the single-command level or even batch of commands, as in yet-unpublished WDDM 2.x specification. This is not a requirement of Vista, nor of Direct3D 10 compatibility. Direct3D10 apps can run, and are now running, on top of the basic scheduling implementation. This is not typically a problem except for a potential application that would have very long execution of a single command/batch of commands ( which is currently prevented under Windows Vista ). Vista cannot enforce right now a finer-grained context switching, as it will require additional support from hardware vendors, but it may appear in the future. Finer-grain preemptive multitasking was introduced in WDDM/DXGI 1.2 which shipped with Windows 8 Developer Preview. [ See also ] HLSL – High Level Shader Language DirectX – Collection of API&apos;s in which Direct3D is implemented OpenGL – Main competitor to Direct3D DirectDraw 3D computer graphics Shader Silverlight [ References ] [ 2 ] [ External links ] DirectX website MSDN: DirectX Graphics and Gaming DirectX 10: The Future of PC Gaming Technical article discussing the new features of DirectX 10 and their impact on computer games Category:Graphics libraries 3d Microsoft Direct3D ar:دايركت ثري دي cs:Direct3D de:Direct3D es:Direct3D eu:Direct3D fr:Direct3D ko:Direct3D it:Direct3D nl:Direct3D ja:Direct3D pl:Direct3D pt:Direct3D ru:Direct3D 10 sk:Direct3D tr:Direct3D zh:Direct3D