{ Windows command shell showing filenames in a directory } The filename is metadata about a file; a string used to uniquely identify a file stored on the file system. Different file systems impose different restrictions on length and allowed characters on filenames. A filename includes one or more of these components: directory (or path) – directory tree (e.g., /usr/bin, \TEMP, [USR.LIB.SRC], etc.) file – base name of the file type (format or extension ) – indicates the content type of the file (e.g.,.txt,.exe,.COM, etc.) version – revision or generation number of the file To refer to a file on a remote computer filesystem ( host, server) some utilities use the remote computer name or address to prefix the filename. [ References: absolute vs relative ] An absolute reference includes all directory levels. In some systems, a filename reference that does not include the complete directory path it defaults to the current working directory. This is a relative reference. One advantage of using a relative reference in program configuration files or scripts is that different instances of the script or program can use different files. Unix-like file systems allow a file to have more than one name; in traditional Unix-style file systems, the names are hard link s to the file&apos;s inode or equivalent. Windows supports hard links on NTFS file systems, but provides no command line tool for creating them until Windows Vista. [ NTFS Hard Links, Directory Junctions, and Windows Shortcuts http://www.flexhex.com/docs/articles/hard-links.phtml Flex hex Inv Softworks 12 March 2011 ] Hard links are different from Windows shortcuts, Mac OS aliases, or symbolic link s. [ Length restrictions ] Some filesystems restrict the length of filenames to 11 (e.g., MS-DOS), 14 (e.g., early Unix), 31, 44 (e.g., IBM S/370), [ http://publib.boulder.ibm.com/infocenter/zos/v1r11/index.jsp?topic%3D%2Fcom.ibm.zos.r11.halu001%2Fdd_name_support.htm DSN ] or 255 (e.g., early Berkeley Unix) characters. [ Filename extensions ] Many file systems, including FAT, NTFS, and VMS systems, allow a filename extension that consists of one or more characters following the last period in the filename, dividing the filename into two parts: the basename { http://kernel.org/doc/man-pages/online/pages/man3/basename.3.html } (the primary filename) and an extension used by some applications to indicate the file type. Multiple output files created by an application use the same basename and various extensions. For example a compiler might use the extension FOR for the source input file, OBJ for the object output and LST for the listing. Although there are some common extensions they are arbitrary and a different application might use REL and RPT. On filesystems that do not segregate the extension, files will often have a longer extension such as html. [ Uniqueness ] Within a single directory, filenames must be unique. Since the filename syntax also applies for directories, it is not possible to create a file and directory entries with the same name in a single directory. Multiple files in different directories may have the same name. [ Letter case preservation ] Some filesystems, such as FAT, store filenames as upper-case regardless of the letter case used to create them. For example, a file created with the name &quot; MyName.Txt &quot; or &quot; myname.txt &quot; would be stored with the filename &quot; MYNAME.TXT &quot;. Any variation of upper and lower case can be used to refer to the same file. These kinds of file systems are called case-insensitive and are not case-preserving. Some filesystems prohibit the use of lower case letters in filenames altogether. Some file systems store filenames in the form that they were originally created; these are referred to as case-retentive or case-preserving. Such a file system can be case-sensitive or case-insensitive. If case-sensitive, then &quot; MyName.Txt &quot; and &quot; myname.txt &quot; may refer to two different files in the same directory, and each file must be referenced by the exact capitalisation by which it is named. On a case-insensitive, case-preserving file system, on the other hand, only one of &quot; MyName.Txt &quot;, &quot; myname.txt &quot; and &quot; Myname.TXT &quot; can be the name of a file in a given directory at a given time, and a file with one of these names can be referenced by any capitalisation of the name. From its original inception, Unix and its derivative systems were case-preserving. However, not all Unix-like file systems are case-sensitive; by default, HFS+ in Mac OS X is case-insensitive, and SMB servers usually provide case-insensitive behavior (even when the underlying file system is case-sensitive, e.g. Samba on most Unix-like systems), and SMB client file systems provide case-insensitive behavior. File system case sensitivity is a considerable challenge for software such as Samba and Wine, which must interoperate efficiently with both systems that treat uppercase and lowercase files as different and with systems that treat them the same. [ http://wiki.winehq.org/CaseInsensitiveFilenames CaseInsensitiveFilenames - The Official Wine Wiki Wiki.winehq.org 2009-11-08 2010-08-20 ] [ Reserved characters and words ] Many file system utilities prohibit control character s from appearing in filenames. In Unix-like file systems the null character, as that is the end-of-string indicator [ The Open Group Base Specifications Issue 6 http://pubs.opengroup.org/onlinepubs/007904875/basedefs/xbd_chap03.html#tag_03_169 ] and the path separator / are prohibited. Some file system utilities prohibit some particular characters from appearing in filenames: [ http://www.thescripts.com/forum/thread23123.html When did Windows start accepting forward slash as a path separator? - Python answers Thescripts.com July 18, 2005 2010-08-20 ] [ August 2010 ] Character Name Reason / slash used as a path name component separator in Unix-like, Windows, and Amiga systems. (The MS-DOS command.com shell would consume it as a switch character, but Windows itself always accepts it as a separator. ) \ backslash Also used as a path name component separator in MS-DOS, OS/2 and Windows (where there are few differences between slash and backslash); allowed in Unix filenames, see Note 1 ? question mark used as a wildcard in Unix, Windows and AmigaOS; marks a single character. Allowed in Unix filenames, see Note 1 % percent used as a wildcard in RT-11; marks a single character. asterisk or star used as a wildcard in Unix, MS-DOS, RT-11, VMS and Windows. Marks any sequence of characters (Unix, Windows, later versions of MS-DOS) or any sequence of characters in either the basename or extension (thus &quot; *.* &quot; in early versions of MS-DOS means &quot; all files &quot;. Allowed in Unix filenames, see note 1 colon used to determine the mount point / drive on Windows; used to determine the virtual device or physical device such as a drive on AmigaOS, RT-11 and VMS; used as a pathname separator in classic Mac OS. Doubled after a name on VMS, indicates the DECnet nodename (equivalent to a NetBIOS (Windows networking) hostname preceded by &quot; \\ &quot;.) | vertical bar or pipe designates software pipelining in Unix and Windows; allowed in Unix filenames, see Note 1 &quot; quote used to mark beginning and end of filenames containing spaces in Windows, see Note 1 &lt; code &gt; &lt; &lt; /code &gt; less than used to redirect input, allowed in Unix filenames, see Note 1 &gt; greater than used to redirect output, allowed in Unix filenames, see Note 1. period or dot allowed but the last occurrence will be interpreted to be the extension separator in VMS, MS-DOS and Windows. In other OSes, usually considered as part of the filename, and more than one period (full stop) may be allowed. Note 1: While they are allowed in Unix file and folder names, most Unix shell s require certain characters such as spaces, &lt;, &gt;, |, \, and sometimes :, (, ), &amp;,;, #, as well as wildcards such as ? and *, to be quoted or escaped : &lt; code &gt; five\ and\ six\ &lt; seven &lt; /code &gt; (example of escaping) &lt; code &gt; &apos;five and six &lt; seven&apos; &lt; /code &gt; or &lt; code &gt; &quot; five and six &lt; seven &quot; &lt; /code &gt; (examples of quoting) In Windows utilities the space and the period are not allowed as the final character of a filename. { Windows Naming Conventions (see last bulleted item) } The period is allowed as the first character, but certain Windows applications, such as Windows Explorer, forbid creating or renaming such files (despite this convention being used in Unix-like systems to describe hidden file s and directories). Among workarounds are using different explorer applications or saving a file with the desired filename from within an application. { Naming a file msdn.microsoft.com (MSDN), filename restrictions on Windows } Some file systems on a given operating system (especially file systems originally implemented on other operating systems), and particular applications on that operating system, may apply further restrictions and interpretations. See comparison of file systems for more details on restrictions. In Unix-like systems, MS-DOS, and Windows, the filenames &quot;. &quot; and &quot;.. &quot; have special meanings (current and parent directory respectively). In addition, in Windows and DOS utilities, some words might also be reserved and can not be used as filenames. For example, DOS Device file : { CON, PRN, AUX, CLOCK$, NUL } { COM0, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9 } { LPT0, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, and LPT9. } Systems that have these restrictions cause incompatibilities with some other filesystems. For example, Windows will fail to handle, or raise error reports for, these legal UNIX filenames: aux.c, q &quot; uote &quot; s.txt, or NUL.txt. NTFS filenames that are used internally include: { $Mft, $MftMirr, $LogFile, $Volume, $AttrDef, $Bitmap, $Boot, $BadClus, $Secure, } { $Upcase, $Extend, $Quota, $ObjId and $Reparse } [ Comparison of filename limitations ] [ Comparison of file systems ] forbids the use of characters in range 1-31 (0x01-0x1F) and characters &quot; * : &lt; &gt; ? \ / &amp; #124; unless the name is flagged as being in the Posix namespace. NTFS allows each path component (directory or filename) to be 255 characters long. Windows forbids the use of the MS-DOS device names AUX, CLOCK$, COM1, &amp; hellip;, COM9, CON, LPT1, &amp; hellip;, LPT9, NUL and PRN, as well as these names with any extension (for example, AUX.txt), except when using Long UNC paths (ex. \\.\C:\nul.txt or \\?\D:\aux\con). (CLOCK$ may be used if an extension is provided.) The Win32 API strips trailing space and period (full-stop) characters from filenames, except when UNC paths are used. These restrictions only apply to Windows; in Linux distributions that support NTFS, filenames are written using NTFS&apos;s Posix namespace, which allows any Unicode character except / and NUL. on disk, in classic Mac OS, and at the Carbon layer in Mac OS X; / at the Unix layer in Mac OS X first character must be alphabetic or national ($, #, @) &quot; Qualified &quot; contains. after every 8 characters or fewer. / &quot; / &quot; / &quot; / &quot; / &quot; / &quot;, = System Case sensitive Case preserving Allowed character set Reserved characters Reserved words Maximum length Comments | MS-DOS FAT No No any 8-bit set x00-x1F SPACE DEL &quot; * / : &lt; &gt; ? \ | Device names including: AUX COM1 … COM9 CON LPT1 … LPT9 NUL PRN 11 Maximum 8 character base name limit and 3 character extension; see 8.3 filename | Windows VFAT No Yes Unicode, using UTF-16 encoding &amp; #124;\?* &lt; &quot; : &gt; +[]/ control characters 255 | NTFS Optional Yes Unicode, using UTF-16 encoding / null (i.e., 0x00) Only in root directory: $AttrDef $BadClus $Bitmap $Boot $LogFile $MFT $MFTMirr pagefile.sys $Secure $UpCase $Volume $Extend $Extend\$ObjId $Extend\$Quota $Extend\$Reparse ($Extend is a directory) 255 | OS/2 HPFS No Yes any 8-bit set &amp; #124;\?* &lt; &quot; : &gt; / 254 | Mac OS HFS No Yes any 8-bit set 255 old versions of Finder are limited to 31 characters | Mac OS HFS+ Optional Yes Unicode, using UTF-16 encoding 255 Mac OS 8.1 - Mac OS X | most UNIX file systems Yes Yes any 8-bit set / null 255 a leading. indicates that ls and file managers will not show the file by default | zOS ? ? other than $ # @ - x&apos;C0&apos; 44 http://publib.boulder.ibm.com/infocenter/zos/v1r11/index.jsp?topic=/com.ibm.zos.r11.ieab600/iea2b690211.htm | early UNIX ( AT &amp; T ) Yes Yes any 8-bit set / 14 a leading. indicates a &quot; hidden &quot; file | POSIX &quot; Fully portable filenames &quot; Lewine, Donald. POSIX Programmer&apos;s Guide: Writing Portable UNIX Programs 1991 O&apos;Reilly &amp; Associates, Inc. Sebastopol, CA pp63-64 Yes Yes A–Z a–z 0–9.  _  - / null Filenames to avoid include: a.out, core,.profile,.history,.cshrc 14 hyphen must not be first character | ISO 9660 No ? A–Z 0–9 _. &quot; close to 180 &quot; (Level  2) or 200(Level  3) Used on CDs; 8 directory levels max (for Level 1, not level 2,3) | AmigaOS No Yes any 8-bit set 107 dos.library | Amiga OFS No Yes any 8-bit set 30 Original File System 1985 | Amiga FFS No Yes any 8-bit set 30 Fast File System 1988 | Amiga PFS No Yes any 8-bit set 255 Professional File System 1993 | Amiga SFS No Yes any 8-bit set 32,000 Smart File System 1998 | Amiga FFS2 No Yes any 8-bit set 107 Fast File System 2 2002 | BeOS BFS Yes Yes Unicode, using UTF-8 encoding / 255 | DEC PDP-11 RT-11 No No RADIX-50 6 + 3 Flat filesystem with no subdirs. A full &quot; file specification &quot; includes device, filename and extension (file type) in the format: dev:filnam.ext. | DEC VAX VMS No From v7.2 A–Z 0–9 $ - _ 32 per component; earlier 9 per component; latterly, 255 for a filename and 32 for an extension. a full &quot; file specification &quot; includes nodename, diskname, directory/ies, filename, extension and version in the format: OURNODE::MYDISK:[THISDIR.THATDIR]FILENAME.EXTENSION;2 Directories can only go 8 levels deep. | Commodore DOS Yes Yes any 8-bit set $ 16 length depends on the drive, usually 16 [ See also ] File system Fully qualified file name Long filename Path (computing) Symbolic link Uniform Resource Identifier (URI) Uniform Resource Locator (URL) [ References ] [ External links ] [ Computers/Data_Formats/ Data Formats ] File Extension Library FILExt Category:Computer file formats Category:Names ar:أسم ملف de:Dateiname eo:Dosiernomo ko:파일 이름 id:Nama berkas is:Skráarnafn ja:ファイル名 pl:Ścieżka dostępu ru:Имя файла sv:Filnamn uk:Назва файлу zh:檔案名稱