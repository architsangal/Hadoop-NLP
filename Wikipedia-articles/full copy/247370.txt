In computer science, Communicating Sequential Processes (CSP) is a formal language for describing pattern s of interaction in concurrent systems. [ A. W. Roscoe Bill Roscoe The Theory and Practice of Concurrency Prentice Hall 0-13-674409-5 1997 ] It is a member of the family of mathematical theories of concurrency known as process algebras, or process calculi. CSP was highly influential in the design of the occam programming language, [ INMOS INMOS http://www.wotug.org/occam/documentation/oc21refman.pdf PDF occam 2.1 Reference Manual SGS-THOMSON Microelectronics Ltd. 1995-05-12 ] {, INMOS document 72 occ 45 03 } and also influenced the design of programming languages such as Limbo [ Resources about threaded programming in the Bell Labs CSP style http://swtch.com/~rsc/thread/ 2010-04-15 ] and Go. [ Language Design FAQ: Why build concurrency on the ideas of CSP? http://golang.org/doc/go_faq.html#csp ] CSP was first described in a 1978 paper by C. A. R. Hoare, [ Hoare C. A. R. C. A. R. Hoare Communicating sequential processes Communications of the ACM 21 8 666 –677 1978 10.1145/359576.359585 ] but has since evolved substantially. [ Abdallah Ali E. Jones, Cliff B. Sanders, Jeff W. Communicating Sequential Processes: The First 25 Years LNCS 3525 Springer 2005 http://www.springer.com/computer/theoretical%2Bcomputer%2Bscience/foundations%2Bof%2Bcomputations/book/978-3-540-25813-1 ] CSP has been practically applied in industry as a tool for specifying and verifying the concurrent aspects of a variety of different systems, such as the T9000 Transputer, [ Barrett G. Model checking in practice: The T9000 Virtual Channel Processor IEEE Transactions on Software Engineering 21 2 69–78 1995 10.1109/32.345823 ] as well as a secure ecommerce system. [ Hall A R. Chapman http://www.anthonyhall.org/c_by_c_secure_system.pdf PDF Correctness by construction: Developing a commercial secure system IEEE Software 19 1 18–25 2002 10.1109/52.976937 ] The theory of CSP itself is also still the subject of active research, including work to increase its range of practical applicability (e.g., increasing the scale of the systems that can be tractably analyzed). [ Creese, S. Data Independent Induction: CSP Model Checking of Arbitrary Sized Networks D. Phil. Oxford University 2001 ] [ History ] The version of CSP presented in Hoare&apos;s original 1978 paper was essentially a concurrent programming language rather than a process calculus. It had a substantially different syntax than later versions of CSP, did not possess mathematically defined semantics, [ Hoare C. A. R. C. A. R. Hoare Communicating Sequential Processes Prentice Hall 0-13-153289-8 1985 ] and was unable to represent unbounded nondeterminism. [ William Clinger William Clinger (computer scientist) Foundations of Actor Semantics https://dspace.mit.edu/handle/1721.1/6935 MIT Mathematics Doctoral Dissertation June 1981 ] Programs in the original CSP were written as a parallel composition of a fixed number of sequential processes communicating with each other strictly through synchronous message-passing. In contrast to later versions of CSP, each process was assigned an explicit name, and the source or destination of a message was defined by specifying the name of the intended sending or receiving process. For example the process { COPY = *[c:character; west?c → east!c] } repeatedly receives a character from the process named west, and then sends that character to process named east. The parallel composition { [west::DISASSEMBLE || X::COPY || east::ASSEMBLE] } assigns the names west to the DISASSEMBLE process, X to the COPY process, and east to the ASSEMBLE process, and executes these three processes concurrently. Following the publication of the original version of CSP, Hoare, Stephen Brookes, and A. W. Roscoe developed and refined the theory of CSP into its modern, process algebraic form. The approach taken in developing CSP into a process algebra was influenced by Robin Milner &apos;s work on the Calculus of Communicating Systems (CCS), and vice versa. The theoretical version of CSP was initially presented in a 1984 article by Brookes, Hoare, and Roscoe, [ Stephen Brookes C. A. R. Hoare and A. W. Roscoe A Theory of Communicating Sequential Processes Journal of the ACM 31 3 560 –599 1984 10.1145/828.833 ] and later in Hoare&apos;s book Communicating Sequential Processes, which was published in 1985. In September 2006, that book was still the third-most cited computer science reference of all time according to Citeseer (albeit an unreliable source due to the nature of its sampling). The theory of CSP has undergone a few minor changes since the publication of Hoare&apos;s book. Most of these changes were motivated by the advent of automated tools for CSP process analysis and verification. Roscoe&apos;s The Theory and Practice of Concurrency describes this newer version of CSP. [ Applications ] An early and important application of CSP was its use for specification and verification of elements of the INMOS T9000 Transputer, a complex superscalar pipelined processor designed to support large-scale multiprocessing. CSP was employed in verifying the correctness of both the processor pipeline, and the Virtual Channel Processor which managed off-chip communications for the processor. Industrial application of CSP to software design has usually focused on dependable and safety-critical systems. For example, the Bremen Institute for Safe Systems and Daimler-Benz Aerospace modeled a fault management system and avionics interface (consisting of some 23,000 lines of code) intended for use on the International Space Station in CSP, and analyzed the model to confirm that their design was free of deadlock and livelock. [ B. Buth M. Kouvaras, J. Peleska, and H. Shi Deadlock analysis for a fault-tolerant system Proceedings of the 6th International Conference on Algebraic Methodology and Software Technology (AMAST’97) 60–75 December 1997 ] [ B. Buth J. Peleska, and H. Shi Combining methods for the livelock analysis of a fault-tolerant system Proceedings of the 7th International Conference on Algebraic Methodology and Software Technology (AMAST’98) 124– 139 January 1999 ] The modeling and analysis process was able to uncover a number of errors that would have been difficult to detect using testing alone. Similarly, Praxis High Integrity Systems applied CSP modeling and analysis during the development of software (approximately 100,000 lines of code) for a secure smart-card Certification Authority to verify that their design was secure and free of deadlock. Praxis claims that the system has a much lower defect rate than comparable systems. Since CSP is well-suited to modeling and analyzing systems that incorporate complex message exchanges, it has also been applied to the verification of communications and security protocols. A prominent example of this sort of application is Lowe’s use of CSP and the FDR refinement-checker to discover a previously unknown attack on the Needham-Schroeder public-key authentication protocol, and then to develop a corrected protocol able to defeat the attack. [ G. Lowe Breaking and fixing the Needham-Schroeder public-key protocol using FDR Tools and Algorithms for the Construction and Analysis of Systems (TACAS) 147–166. Springer-Verlag 1996 http://citeseer.ist.psu.edu/lowe96breaking.html ] [ Informal description ] As its name suggests, CSP allows the description of systems in terms of component processes that operate independently, and interact with each other solely through message-passing communication. However, the &quot; Sequential &quot; part of the CSP name is now something of a misnomer, since modern CSP allows component processes to be defined both as sequential processes, and as the parallel composition of more primitive processes. The relationships between different processes, and the way each process communicates with its environment, are described using various process algebraic operators. Using this algebraic approach, quite complex process descriptions can be easily constructed from a few primitive elements. [ Primitives ] CSP provides two classes of primitives in its process algebra: Events Events represent communications or interactions. They are assumed to be indivisible and instantaneous. They may be atomic names (e.g. on, off), compound names (e.g. valve.open, valve.close), or input/output events (e.g. mouse?xy, screen!bitmap). Primitive processes Primitive processes represent fundamental behaviors: examples include STOP (the process that communicates nothing, also called deadlock ), and SKIP (which represents successful termination). [ Algebraic operators ] CSP has a wide range of algebraic operators. The principal ones are: Prefix The prefix operator combines an event and a process to produce a new process. For example, a \rightarrow P is the process which is willing to communicate \mathit{a} with its environment, and, after \mathit{a}, behaves like the process \mathit{P}. Deterministic Choice The deterministic (or external) choice operator allows the future evolution of a process to be defined as a choice between two component processes, and allows the environment to resolve the choice by communicating an initial event for one of the processes. For example, \left(a \rightarrow P\right) \Box \left(b \rightarrow Q\right) is the process which is willing to communicate the initial events \mathit{a} and \mathit{b}, and subsequently behaves as either \mathit{P} or \mathit{Q} depending on which initial event the environment chooses to communicate. If both \mathit{a} and \mathit{b} were communicated simultaneously the choice would be resolved nondeterministically. Nondeterministic Choice The nondeterministic (or internal) choice operator allows the future evolution of a process to be defined as a choice between two component processes, but does not allow the environment any control over which one of the component processes will be selected. For example, \left(a \rightarrow P\right) \sqcap \left(b \rightarrow Q\right) can behave like either \left(a \rightarrow P\right) or \left(b \rightarrow Q\right). It can refuse to accept \mathit{a} or \mathit{b}, and is only obliged to communicate if the environment offers both \mathit{a} and \mathit{b}. Nondeterminism can be inadvertently introduced into a nominally deterministic choice if the initial events of both sides of the choice are identical. So, for example, \left(a \rightarrow a \rightarrow STOP\right) \Box \left(a \rightarrow b \rightarrow STOP\right) is equivalent to a \rightarrow \left(\left(a \rightarrow STOP\right) \sqcap \left(b \rightarrow STOP\right)\right) Interleaving The interleaving operator represents completely independent concurrent activity. The process P \;\vert\vert\vert\; Q behaves as both \mathit{P} and \mathit{Q} simultaneously. The events from both processes are arbitrarily interleaved in time. Interface Parallel The interface parallel operator represents concurrent activity that requires synchronization between the component processes – any event in the interface set can only occur when all component processes are able to engage in that event. For example, the process P \left\vert\left[ \left\{ a \right\} \right]\right\vert Q requires that \mathit{P} and \mathit{Q} must both be able to perform event \mathit{a} before that event can occur. So, for example, the process \left(a \rightarrow P\right) \left\vert\left[ \left\{ a \right\} \right]\right\vert \left(a \rightarrow Q\right) can engage in event \mathit{a}, and become the process P \left\vert\left[ \left\{ a \right\} \right]\right\vert Q while \left (a \rightarrow P\right ) \left\vert\left[ \left\{ a, b \right\} \right]\right\vert \left(b \rightarrow Q\right) will simply deadlock. Hiding The hiding operator provides a way to abstract processes, by making some events unobservable. A trivial example of hiding is \left(a \rightarrow P\right) \setminus \left\{ a \right\} which, assuming that the event \mathit{a} doesn&apos;t appear in \mathit{P}, simply reduces to \mathit{P} [ Examples ] One of the archetypal CSP examples is an abstract representation of a chocolate vending machine, and its interactions with a person wishing to buy some chocolate. This vending machine might be able to carry out two different events, “coin” and “choc” which represent the insertion of payment and the delivery of a chocolate respectively. A machine which demands payment before offering a chocolate can be written as: \textit{VendingMachine} = \textit{coin} \rightarrow \textit{choc} \rightarrow \textit{STOP} A person who might choose to use a coin or card to make payments could be modelled as: \textit{Person} = (\textit{coin} \rightarrow \textit{STOP}) \Box (\textit{card} \rightarrow \textit{STOP}) These two processes can be put in parallel, so that they can interact with each other. The behaviour of the composite process depends on the events that the two component processes must synchronise on. Thus, \textit{VendingMachine} \left\vert\left[\left\{ \textit{coin}, \textit{card} \right\}\right]\right\vert \textit{Person} \equiv \textit{coin} \rightarrow \textit{choc} \rightarrow \textit{STOP} whereas if synchronization was only required on “coin”, we would obtain \textit{VendingMachine} \left\vert\left[\left\{ \textit{coin} \right\}\right]\right\vert \textit{Person} \equiv \left (\textit{coin} \rightarrow \textit{choc} \rightarrow \textit{STOP}\right ) \Box \left (\textit{card} \rightarrow \textit{STOP}\right ) If we abstract this latter composite process by hiding the “coin” and “card” events, i.e. \left (\left (\textit{coin} \rightarrow \textit{choc} \rightarrow \textit{STO}P\right ) \Box \left (\textit{card} \rightarrow \textit{STOP}\right )\right ) \setminus \left\{\textit{coin}, card\right\} we get the nondeterministic process \left (\textit{choc} \rightarrow \textit{STOP}\right ) \sqcap \textit{STOP} This is a process which either offers a “choc” event and then stops, or just stops. In other words, if we treat the abstraction as an external view of the system (e.g., someone who does not see the decision reached by the person), nondeterminism has been introduced. [ Formal definition ] [ Syntax ] The syntax of CSP defines the “legal” ways in which processes and events may be combined. Let \mathit{e} be an event, and \mathit{X} be a set of events. Then the basic syntax of CSP can be defined as: \begin{matrix} Proc &amp; ::= &amp; \textit{STOP} &amp; \; \\ &amp; | &amp; \textit{SKIP} &amp; \; \\ &amp; | &amp; e \rightarrow \textit{Proc} &amp; (\textit{prefixing})\\ &amp; | &amp; \textit{Proc} \;\Box\; \textit{Proc} &amp; (\textit{external} \; \textit{choice})\\ &amp; | &amp; \textit{Proc} \;\sqcap\; \textit{Proc} &amp; (\textit{nondeterministic} \; \textit{choice})\\ &amp; | &amp; \textit{Proc} \;\vert\vert\vert\; \textit{Proc} &amp; (\textit{interleaving}) \\ &amp; | &amp; \textit{Proc} \;|[ \{ X \} ]| \;\textit{Proc} &amp; (\textit{interface} \; \textit{parallel})\\ &amp; | &amp; \textit{Proc} \setminus X &amp; (\textit{hiding})\\ &amp; | &amp; \textit{Proc}; \textit{Proc} &amp; (\textit{sequential} \; \textit{composition})\\ &amp; | &amp; \mathrm{if} \; b \; \mathrm{then} \; \textit{Proc}\; \mathrm{else}\; Proc &amp; (\textit{boolean} \; \textit{conditional})\\ &amp; | &amp; \textit{Proc} \;\triangleright\; \textit{Proc} &amp; (\textit{timeout})\\ &amp; | &amp; \textit{Proc} \;\triangle\; \textit{Proc} &amp; (\textit{interrupt}) \end{matrix} Note that, in the interests of brevity, the syntax presented above omits the \mathbf{div} process, which represents divergence, as well as various operators such as alphabetized parallel, piping, and indexed choices. [ Formal semantics ] [ June 2008 ] CSP has been imbued with several different formal semantics, which define the meaning of syntactically correct CSP expressions. The theory of CSP includes mutually consistent denotational semantics, algebraic semantics, and operational semantics. [ Denotational semantics ] The three major denotational models of CSP are the traces model, the stable failures model, and the failures/divergences model. Semantic mappings from process expressions to each of these three models provide the denotational semantics for CSP. The traces model defines the meaning of a process expression as the set of sequences of events (traces) that the process can be observed to perform. For example, traces\left(STOP\right) = \left\{ \langle\rangle \right\} since STOP performs no events traces\left(a\rightarrow b \rightarrow STOP\right) = \left\{\langle\rangle,\langle a \rangle, \langle a, b \rangle \right\} since the process (a\rightarrow b \rightarrow STOP) can be observed to have performed no events, the event a, or the sequence of events a followed by b More formally, the meaning of a process P in the traces model is defined as traces\left(P\right) \subseteq \Sigma^{\ast} such that: \langle\rangle \in traces\left(P\right) (i.e. traces\left(P\right) contains the empty sequence) s_1 \smallfrown s_2 \in traces\left(P\right) \implies s_1 \in traces\left(P\right) (i.e. traces\left(P\right) is prefix-closed) where \Sigma^{\ast} is the set of all possible finite sequences of events. The stable failures model extends the traces model with refusal sets, which are sets of events X \subseteq \Sigma that a process can refuse to perform. A failure is a pair \left(s,X\right), consisting of a trace s, and a refusal set X which identifies the events that a process may refuse once it has executed the trace s. The observed behavior of a process in the stable failures model is described by the pair \left(traces\left(P\right), failures\left(P\right)\right). For example, failures\left(\left(a \rightarrow STOP\right) \Box \left(b \rightarrow STOP\right)\right) = \left\{\left(\langle\rangle,\emptyset\right), \left(\langle a \rangle, \left\{a,b\right\}\right), \left(\langle b \rangle,\left\{a,b\right\}\right) \right\} failures\left(\left(a \rightarrow STOP\right) \sqcap \left(b \rightarrow STOP\right)\right) = \left\{ \left(\langle\rangle,\left\{a\right\}\right), \left(\langle\rangle,\left\{b\right\}\right), \left(\langle a \rangle, \left\{a,b\right\}\right), \left(\langle b \rangle,\left\{a,b\right\}\right) \right\} The failures/divergence model further extends the failures model to handle divergence. The semantics of a process in the failures/divergences model is a pair \left(failures_\perp\left(P\right), divergences\left(P\right)\right) where divergences\left(P\right) is defined as the set of all traces that can lead to divergent behavior and failures_\perp\left(P\right) = failures\left(P\right) \cup \left\{\left(s,X\right) \vert s \in divergences\left(P\right)\right\}. [ Tools ] Over the years, a number of tools for analyzing and understanding systems described using CSP have been produced. Early tool implementations used a variety of machine-readable syntaxes for CSP, making input files written for different tools incompatible. However, most CSP tools have now standardized on the machine-readable dialect of CSP devised by Bryan Scattergood, sometimes referred to as CSP M. [ Scattergood, J.B. The Semantics and Implementation of Machine-Readable CSP D.Phil. Oxford University Computing Laboratory 1998 ] The CSP M dialect of CSP possesses a formally defined operational semantics, which includes an embedded functional programming language. The most well-known CSP tool is probably Failures/Divergence Refinement 2 ( FDR2 ), which is a commercial product developed by Formal Systems (Europe) Ltd. FDR2 is often described as a model checker, but is technically a refinement checker, in that it converts two CSP process expressions into Labelled Transition System s (LTSs), and then determines whether one of the processes is a refinement of the other within some specified semantic model (traces, failures, or failures/divergence). [ A.W. Roscoe Model-checking CSP In A Classical Mind: essays in Honour of C.A.R. Hoare Prentice Hall 1994 Bill Roscoe ] FDR2 applies various state-space compression algorithms to the process LTSs in order to reduce the size of the state-space that must be explored during a refinement check. The Adelaide Refinement Checker (ARC) [ Atanas N. Parashkevov Jay Yantchev ARC - a tool for efficient refinement and equivalence checking for CSP IEEE Int. Conf. on Algorithms and Architectures for Parallel Processing ICA3PP &apos;96 68–75 1996 http://citeseerx.ist.psu.edu/viewdoc/summary?doi%3D10.1.1.45.3212 2008-11-26 ] is a CSP refinement checker developed by the Formal Modelling and Verification Group at The University of Adelaide. ARC differs from FDR2 in that it internally represents CSP processes as Ordered Binary Decision Diagram s (OBDDs), which alleviates the state explosion problem of explicit LTS representations without requiring the use of state-space compression algorithms such as those used in FDR2. The ProB project, [ Michael Leuschel Marc Fontaine Probing the Depths of CSP-M: A new FDR-compliant Validation Tool ICFEM 2008 Springer-Verlag 2008 http://www.stups.uni-duesseldorf.de/publications/main.pdf PDF 2008-11-26 ] which is hosted by the Institut für Informatik, Heinrich-Heine-Universität Düsseldorf, was originally created to support analysis of specifications constructed in the B method. However, it also includes support for analysis of CSP processes both through refinement checking, and LTL model-checking. ProB can also be used to verify properties of combined CSP and B specifications. The Process Analysis Toolkit (PAT) [ Sun Jun Yang Liu and Jin Song Dong PAT: Towards Flexible Verification under Fairness Proceedings of the 20th International Conference on Computer-Aided Verification (CAV 2009) Springer Lecture Notes in Computer Science 5643 2009 http://www.comp.nus.edu.sg/~sunj/Publications/cav09.pdf 2009-06-16 ] [ Sun Jun Yang Liu and Jin Song Dong Model Checking CSP Revisited: Introducing a Process Analysis Toolkit Proceedings of the Third International Symposium on Leveraging Applications of Formal Methods, Verification and Validation (ISoLA 2008) 307–322 Springer Communications in Computer and Information Science 17 2008 http://www.comp.nus.edu.sg/~sunj/Publications/ISoLA08.pdf 2009-01-15 ] is a CSP analysis tool developed in the School of Computing at the National University of Singapore. PAT is able to perform refinement checking, LTL model-checking, and simulation of CSP and Timed CSP processes. The PAT process language extends CSP with support for mutable shared variables, asynchronous message passing, and a variety of fairness and quantitative time related process constructs such as deadline and waituntil. The underlying design principle of the PAT process language is to combine a high-level specification language with procedural programs (e.g. an event in PAT may be a sequential program or even an external C# library call) for greater expressiveness. Mutable shared variables and asynchronous channels provide a convenient syntactic sugar for well-known process modelling patterns used in standard CSP. The PAT syntax is similar, but not identical, to CSP M. [ Jun Sun Yang Liu, Jin Song Dong and Chunqing Chen Integrating Specifications and Programs for System Specification and Verification IEEE Int. Conf. on Theoretical Aspects of Software Engineering TASE &apos;09 2009 http://www.comp.nus.edu.sg/~sunj/Publications/tase09.pdf 2009-04-13 ] The principal differences between the PAT syntax and standard CSP M are the use of semicolons to terminate process expressions, the inclusion of syntactic sugar for variables and assignments, and the use of slightly different syntax for internal choice and parallel composition. CSPsim [ Brooke Phillip Richard Paige Lazy Exploration and Checking of CSP Models with CSPsim Communicating Process Architectures 2007 2007 ] is a lazy simulator. It does not model check CSP, but is useful for exploring very large (potentially infinite) systems. [ Related formalisms ] Several other specification languages and formalisms have been derived from, or inspired by, the classic untimed CSP, including: Timed CSP, which incorporates timing information for reasoning about real-time systems Receptive Process Theory, a specialization of CSP that assumes an asynchronous (i.e. nonblocking) send operation CSPP HCSP Wright, an architecture description language TCOZ, an integration of Timed CSP and Object Z Circus, an integration of CSP and Z based on the Unifying Theories of Programming CspCASL, an extension of CASL that integrates CSP LOTOS, an international standard ISO 8807, Language of Temporal Ordering Specification that incorporates the best features of CSP and CCS. [ Comparison with the Actor Model ] In as much as it is concerned with concurrent processes that exchange messages, the Actor model is broadly similar to CSP. However, the two models make some fundamentally different choices with regard to the primitives they provide: CSP processes are anonymous, while actors have identities. CSP message-passing fundamentally involves a rendezvous between the processes involved in sending and receiving the message, i.e. the sender cannot transmit a message until the receiver is ready to accept it. In contrast, message-passing in actor systems is fundamentally asynchronous, i.e. message transmission and reception do not have to happen at same time, and senders may transmit messages before receivers are ready to accept them. These approaches may be considered duals of each other, in the sense that rendezvous-based systems can be used to construct buffered communications that behave as asynchronous messaging systems, while asynchronous systems can be used to construct rendezvous-style communications by using a message/acknowledgement protocol to synchronize senders and receivers. CSP uses explicit channels for message passing, whereas actor systems transmit messages to named destination actors. These approaches may also be considered duals of each other, in the sense that processes receiving through a single channel effectively have an identity corresponding to that channel, while the name-based coupling between actors may be broken by constructing actors that behave as channels. [ See also ] [ A. Saifhashemi P. Beerel SystemVerilogCSP: Modeling Digital Asynchronous Circuits Using SystemVerilog Interfaces Proceedings of Communicating Process Architectures 2011 - WoTUG- 33 (CPA2011) June 2011 ] occam was the first language implementing a CSP model. Ease programming language combines the process constructs of CSP with logically shared data structures. JCSP is a blending of CSP and occam concepts in a Java thread support API. XC is a language developed by XMOS which was heavily influenced by CSP and occam Limbo is a language that implements concurrency inside the Inferno operating system, in a style inspired by CSP. Plan 9 from Bell Labs and Plan 9 from User Space include the libthread library which allows the use of a CSP-inspired concurrency model from C. VerilogCSP is a set of macros added to Verilog HDL to support Communicating Sequential Processes channel communications. SystemVerilogCSP is a package for SystemVerilog that enables abstract CSP-like communication actions in SystemVerilog. Trace monoid and history monoid, the mathematical formalism of which CSP is an example. Trace theory, the general theory of traces. Go is a programming language by Google incorporating ideas from CSP. Joyce is a programming language based on the principles of CSP, developed by Brinch Hansen around 1989. SuperPascal is a programming language also developed by Brinch Hansen, influenced by CSP and his earlier work with Joyce. Ada implements features of CSP such as the rendezvous. DirectShow is the video framework inside DirectX, it uses the CSP concepts to implement the audio and video filters. [ Further reading ] [ Hoare C. A. R. C. A. R. Hoare Communicating Sequential Processes 1985 2004 Prentice Hall International PDF http://www.usingcsp.com/ 0-13-153271-5 ] This book has been updated by Jim Davies at the Oxford University Computing Laboratory and the new edition is available for download as a PDF file at the Using CSP website. [ A. W. Roscoe Bill Roscoe The Theory and Practice of Concurrency Prentice Hall 0-13-674409-5 1997 ] Some links relating to this book are available here. The full text is available for download as a PS or PDF file from Bill Roscoe&apos;s list of academic publications. [ References ] [ 2 ] [ External links ] [ General ] A PDF version of Hoare&apos;s CSP book - Copyright restriction apply, see the page text before downloading. The CSP Archive WoTUG, a User Group for CSP and occam style systems, contains some information about CSP and useful links. CSP Citations from CiteSeer [ Analysis tools ] Formal Systems Europe, Ltd. develop CSP tools, some of which are freely downloadable. ARC, the Adelaide Refinement Checker, is a CSP verification tool. ProB is an animator and model-checker for the B method, but also support refinement checking and LTL model-checking of CSP. PAT is a model checker, simulator and refinement checker for CSP and various extensions of CSP (e.g. shared variables, arrays, fairness). [ Implementation support ] [ CHP: Communicating Haskell Processes. Process-Oriented Concurrency for Haskell http://www.cs.kent.ac.uk/projects/ofa/chp/ ] CTJ is a Java implementation of CSP with network/distributed support. C++CSP is an implementation of CSP/occam/JCSP ideas in C++, similar in style to JCSP. Jibu (previously known as CSP.NET ) is an implementation of a CSP style library for Microsoft.NET. CSP++ is a software synthesis tool for making specifications written in CSPm executable via C++. csp is a Common Lisp library which allows use of a CSP-inspired concurrency model from SBCL and other multi-threaded Common Lisp implementations. CHP is a Haskell library featuring a concurrency model inspired by CSP. PyCSP is a Python implementation of CSP with network/distributed support. jCSP is a (100% pure) Java class library providing a base range of CSP primitives plus a rich set of extensions. Agent is a pure Ruby implementation of CSP primitives. Category:1978 introductions Category:1978 in computer science Category:Process calculi Category:Concurrent computing ca:CSP de:Communicating Sequential Processes el:Επικοινωνούσες Ακολουθιακές Διεργασίες es:Comunicación de Procesos Secuenciales fr:Communicating sequential processes ko:커뮤니케이팅 시퀜셜 프로세스 hr:Slijedni priopćajni postupci ja:Communicating Sequential Processes pt:CSP (matemática) zh:交談循序程式 pl:Communicating Sequential Processes