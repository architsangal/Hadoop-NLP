[ 2003 5 22 ] { 1.4.13 } [ 2012 02 02 ] [ http://code.google.com/p/memcached/wiki/ReleaseNotes1413 Memcached 1.4.13 Release notes 02.02.2012 ] { Cross-platform } { C } { distributed memory caching system } { BSD License } In computing, memcached is a general-purpose distributed memory caching system that was originally developed by Danga Interactive for LiveJournal, but is now used by many other sites. It is often used to speed up dynamic database -driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read. Memcached runs on Unix, Linux, Windows and MacOSX and is distributed under a permissive free software license. [ http://code.sixapart.com/svn/memcached/trunk/server/LICENSE License of memcached ] Memcached&apos;s APIs provide a giant hash table distributed across multiple machines. When the table is full, subsequent inserts cause older data to be purged in least recently used (LRU) order. Applications using Memcached typically layer requests and additions into RAM before falling back on a slower backing store, such as a database. The system is used by sites including YouTube, [ Cuong Do Cuong (Engineering manager at YouTube/Google) Seattle Conference on Scalability: YouTube Scalability http://video.google.com/videoplay?docid%3D-6304964351441328559 Online Video - 26th minute Google Tech Talks Seattle June 23, 2007 ] Reddit, { Steve Huffman on Lessons Learned at Reddit } Zynga, { How Zynga Survived FarmVille } Facebook, { Facebook Developers Resources } { Scaling memcached at Facebook } Orange, { Orange Developers } and Twitter. { It&apos;s Not Rocket Science, But It&apos;s Our Work } Heroku (now part of Salesforce ) offers a Couchbase -managed memcached add-on service { Heroku memcached add-on } as part of their platform as a service. Google App Engine, AppScale and Amazon Web Services also offer a memcached service through an API. { Using Memcache - Google App Engine - Google Code } { http://appscale.cs.ucsb.edu memcached in AppScale } { http://aws.amazon.com/elasticache/ } Memcached is also supported by some popular CMSs such as Drupal, { http://drupal.org/project/memcache } Joomla, and WordPress. { http://dougal.gunters.org/blog/2009/08/26/w3-total-cache-plugin } [ History ] Memcached was first developed by Brad Fitzpatrick for his website LiveJournal, on May 22, 2003. [ Architecture ] The system uses a client–server architecture. The servers maintain a key–value associative array; the clients populate this array and query it. Keys are up to 250 bytes long and values can be at most 1 megabyte in size. Clients use client side libraries to contact the servers which, by default, expose their service at port 11211. Each client knows all servers; the servers do not communicate with each other. If a client wishes to set or read the value corresponding to a certain key, the client&apos;s library first computes a hash of the key to determine the server that will be used. Then it contacts that server. The server will compute a second hash of the key to determine where to store or read the corresponding value. The servers keep the values in RAM; if a server runs out of RAM, it discards the oldest values. Therefore, clients must treat Memcached as a transitory cache; they cannot assume that data stored in Memcached is still there when they need it. MemcacheDB and Membase provide persistent storage while maintaining memcached protocol compatibility. If all client libraries use the same hashing algorithm to determine servers, then clients can read each other&apos;s cached data; this is obviously desirable. A typical deployment will have several servers and many clients. However, it is possible to use Memcached on a single computer, acting simultaneously as client and server. [ Security ] Most deployments of Memcached exist within trusted networks where clients may freely connect to any server. There are cases, however, where Memcached is deployed in untrusted networks or where administrators would like to exercise control over the clients that are connecting. For this purpose Memcached can be compiled with optional SASL authentication support. The SASL support requires the binary protocol. A presentation at BlackHat USA 2010 revealed that a number of large public websites had left memcached open to inspection, analysis, retrieval, and modification of data. { BlackHat Write-up: go-derper and mining memcaches } [ Example code ] Note that all functions described on this page are pseudocode only. Memcached calls and programming languages may vary based on the API used. Converting database or object creation queries to use Memcached is simple. Typically, when using straight database queries, example code would be as follows: { function get_foo(int userid) { } { data = db_select( &quot; SELECT * FROM users WHERE userid = ? &quot;, userid); } { return data; } { } } After conversion to Memcached, the same call might look like the following { function get_foo(int userid) { } { /* first try the cache */ } { data = memcached_fetch( &quot; userrow: &quot; + userid); } { if (!data) { } { /* not found : request database */ } { data = db_select( &quot; SELECT * FROM users WHERE userid = ? &quot;, userid); } { /* then store in cache until next get */ } { memcached_add( &quot; userrow: &quot; + userid, data); } { } } { return data; } { } } The client would first check whether a Memcached value with the unique key &quot; userrow:userid &quot; exists, where userid is some number. If the result does not exist, it would select from the database as usual, and set the unique key using the Memcached API add function call. However, if only this API call were modified, the server would end up fetching incorrect data following any database update actions: the Memcached &quot; view &quot; of the data would become out of date. Therefore, in addition to creating an &quot; add &quot; call, an update call would also be needed using the Memcached set function. { function update_foo(int userid, string dbUpdateString) { } { /* first update database */ } { result = db_execute(dbUpdateString); } { if (result) { } { /* database update successful : fetch data to be stored in cache */ } { data = db_select( &quot; SELECT * FROM users WHERE userid = ? &quot;, userid); } { /* the previous line could also look like data = createDataFromDBString(dbUpdateString); */ } { /* then store in cache until next get */ } { memcached_set( &quot; userrow: &quot; + userid, data); } { } } { } } This call would update the currently cached data to match the new data in the database, assuming the database query succeeds. An alternative approach would be to invalidate the cache with the Memcached delete function, so that subsequent fetches result in a cache miss. Similar action would need to be taken when database records were deleted, to maintain either a correct or incomplete cache. [ See also ] [ Computer Science Free software ] Membase Redis Mnesia MemcacheDB Hazelcast Cassandra [ References ] [ 2 ] [ External links ] Official memcached site memcached wiki and faq PHP Memcached Manager with Tag Support membase Memcached and Ruby QuickCached - memcached server implementation in Java nsmemcache - memcache client for AOL Server [ Commercially Supported Distributions ] Couchbase Server (formerly Membase) offers a memcached &quot; bucket type &quot; (free for use, subscription support available) GigaSpaces Java based Memcached (free community edition, fault tolerance) Hazelcast Memcached clustered, elastic, fault-tolerant, Java based memcached (free for use, subscription support available) Category:Free memory management software Category:Cross-platform software Category:Structured storage Category:2003 software Category:Database caching ca:Memcached de:Memcached es:Memcached fr:Memcached mn:Memcached ja:Memcached pl:Memcached ru:Memcached uk:Memcached vi:Memcached zh:Memcached