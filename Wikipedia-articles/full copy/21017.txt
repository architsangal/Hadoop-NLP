[ November 2009 ] { die from an } { Intel 8742, an 8-bit microcontroller that includes a } { CPU running at 12 MHz, 128 bytes of } { RAM, 2048 bytes of } { EPROM, and } { I/O in the same chip. } A microcontroller (sometimes abbreviated µC, uC or MCU) is a small computer on a single integrated circuit containing a processor core, memory, and programmable input/output peripherals. Program memory in the form of NOR flash or OTP ROM is also often included on chip, as well as a typically small amount of RAM. Microcontrollers are designed for embedded applications, in contrast to the microprocessor s used in personal computer s or other general purpose applications. Microcontrollers are used in automatically controlled products and devices, such as automobile engine control systems, implantable medical devices, remote controls, office machines, appliances, power tools, toys and other embedded system s. By reducing the size and cost compared to a design that uses a separate microprocessor, memory, and input/output devices, microcontrollers make it economical to digitally control even more devices and processes. Mixed signal microcontrollers are common, integrating analog components needed to control non-digital electronic systems. Some microcontrollers may use four-bit words and operate at clock rate frequencies as low as 4  kHz, for low power consumption (milliwatts or microwatts). They will generally have the ability to retain functionality while waiting for an event such as a button press or other interrupt; power consumption while sleeping (CPU clock and most peripherals off) may be just nanowatts, making many of them well suited for long lasting battery applications. Other microcontrollers may serve performance-critical roles, where they may need to act more like a digital signal processor (DSP), with higher clock speeds and power consumption. [ History ] [ June 2008 ] The first single-chip microprocessor was the 4-bit Intel 4004 released in 1971, with the Intel 8008 and other more capable microprocessors becoming available over the next several years. However, both processors required external chips to implement a working system, raising total system cost, and making it impossible to economically computerize appliances. The Smithsonian Institution says TI engineers Gary Boone and Michael Cochran succeeded in creating the first microcontroller in 1971. The result of their work was the TMS 1000, which went commercial in 1974. It combined read-only memory, read/write memory, processor and clock on one chip and was targeted at embedded systems. [ The Most Widely Used Computer on a Chip: The TMS 1000 State of the Art: A Photographic History of the Integrated Circuit Augarten Stan Ticknor &amp; Fields New Haven and New York 1983 0-89919-195-9 http://smithsonianchips.si.edu/augarten/p38.htm 2009-12-23 ] Partly in response to the existence of the single-chip TMS 1000, { http://archive.computerhistory.org/resources/access/text/Oral_History/102658328.05.01.acc.pdf Oral History Panel on the Development and Promotion of the Intel 8048 Microcontroller, Computer History Museum oral history,2008, retrieved 2011 June 28 page 4 } Intel developed a computer system on a chip optimized for control applications, the Intel 8048, with commercial parts first shipping in 1977. It combined RAM and ROM on the same chip. This chip would find its way into over one billion PC keyboards, and other numerous applications. At that time Intel&apos;s President, Luke J. Valenter, stated that the microcontroller was one of the most successful in the company&apos;s history, and expanded the division&apos;s budget over 25%. Most microcontrollers at this time had two variants. One had an erasable EPROM program memory, which was significantly more expensive than the PROM variant which was only programmable once. Erasing the EPROM required exposure to ultraviolet light through a transparent quartz lid. One-time parts could be made in lower-cost opaque plastic packages. In 1993, the introduction of EEPROM memory allowed microcontrollers (beginning with the Microchip PIC16x84 ) [ February 2008 ] to be electrically erased quickly without an expensive package as required for EPROM, allowing both rapid prototyping, and In System Programming. The same year, Atmel introduced the first microcontroller using Flash memory. { &quot; Atmel’s Self-Programming Flash Microcontrollers &quot; by Odd Jostein Svendsli 2003 } Other companies rapidly followed suit, with both memory types. Cost has plummeted over time, with the cheapest 8-bit microcontrollers being available for under $0.25 in quantity (thousands) in 2009, [ June 2010 ] and some 32-bit microcontrollers around $1 for similar quantities. Nowadays microcontrollers are cheap and readily available for hobbyists, with large online communities around certain processors. In the future, MRAM could potentially be used in microcontrollers as it has infinite endurance and its incremental semiconductor wafer process cost is relatively low. [ Volumes ] About 55% of all CPU s sold in the world are 8-bit microcontrollers and microprocessors. According to Semico, over four billion 8-bit microcontrollers were sold in 2006. { http://www.semico.com } A typical home in a developed country is likely to have only four general-purpose microprocessors but around three dozen microcontrollers. A typical mid-range automobile has as many as 30 or more microcontrollers. They can also be found in many electrical devices such as washing machines, microwave ovens, and telephones. { PIC 18F8720 &apos;&apos;&apos;microcontroller&apos;&apos;&apos; in an 80-pin } { TQFP package. } [ Embedded design ] A microcontroller can be considered a self-contained system with a processor, memory and peripherals and can be used as an embedded system. [ Heath Steve Embedded systems design Newnes 2003 2 EDN series for design engineers 11–12 http://books.google.com/books?id%3DBjNZXwH7HlkC%26amp%3Bpg%3DPA11 9780750655460 ] The majority of microcontrollers in use today are embedded in other machinery, such as automobiles, telephones, appliances, and peripherals for computer systems. While some embedded systems are very sophisticated, many have minimal requirements for memory and program length, with no operating system, and low software complexity. Typical input and output devices include switches, relay s, solenoid s, LED s, small or custom LCD displays, radio frequency devices, and sensors for data such as temperature, humidity, light level etc. Embedded systems usually have no keyboard, screen, disks, printers, or other recognizable I/O devices of a personal computer, and may lack human interaction devices of any kind. [ Interrupts ] Microcontrollers must provide real time (predictable, though not necessarily fast) response to events in the embedded system they are controlling. When certain events occur, an interrupt system can signal the processor to suspend processing the current instruction sequence and to begin an interrupt service routine (ISR, or &quot; interrupt handler &quot; ). The ISR will perform any processing required based on the source of the interrupt before returning to the original instruction sequence. Possible interrupt sources are device dependent, and often include events such as an internal timer overflow, completing an analog to digital conversion, a logic level change on an input such as from a button being pressed, and data received on a communication link. Where power consumption is important as in battery operated devices, interrupts may also wake a microcontroller from a low power sleep state where the processor is halted until required to do something by a peripheral event. [ Programs ] Typically microcontroller programs must fit in the available on-chip program memory, since it would be costly to provide a system with external, expandable, memory. Compilers and assemblers are used to convert high-level language and assembler language codes into a compact machine code for storage in the microcontroller&apos;s memory. Depending on the device, the program memory may be permanent, read-only memory that can only be programmed at the factory, or program memory may be field-alterable flash or erasable read-only memory. Manufacturers have often produced special versions of their microcontrollers in order to help the hardware and software development of the target system. Originally these included EPROM versions that have a &quot; window &quot; on the top of the device through which program memory can be erased by ultraviolet light, ready for reprogramming after a programming ( &quot; burn &quot; ) and test cycle. Since 1998, EPROM versions are rare and have been replaced by EEPROM and flash, which are easier to use (can be erased electronically) and cheaper to manufacture. Other versions may be available where the ROM is accessed as an external device rather than as internal memory, however these are becoming increasingly rare due to the widespread availability of cheap microcontroller programmers. The use of field-programmable devices on a microcontroller may allow field update of the firmware or permit late factory revisions to products that have been assembled but not yet shipped. Programmable memory also reduces the lead time required for deployment of a new product. Where hundreds of thousands of identical devices are required, using parts programmed at the time of manufacture can be an economical option. These &quot; mask programmed &quot; parts have the program laid down in the same way as the logic of the chip, at the same time. A customizable microcontroller incorporates a block of digital logic that can be personalized in order to provide additional processing capability, peripherals and interfaces that are adapted to the requirements of the application. For example, the AT91CAP from Atmel has a block of logic that can be customized during manufacturer according to user requirements. [ Other microcontroller features ] Microcontrollers usually contain from several to dozens of general purpose input/output pins (GPIO). GPIO pins are software configurable to either an input or an output state. When GPIO pins are configured to an input state, they are often used to read sensors or external signals. Configured to the output state, GPIO pins can drive external devices such as LEDs or motors. Many embedded systems need to read sensors that produce analog signals. This is the purpose of the analog-to-digital converter (ADC). Since processors are built to interpret and process digital data, i.e. 1s and 0s, they are not able to do anything with the analog signals that may be sent to it by a device. So the analog to digital converter is used to convert the incoming data into a form that the processor can recognize. A less common feature on some microcontrollers is a digital-to-analog converter (DAC) that allows the processor to output analog signals or voltage levels. In addition to the converters, many embedded microprocessors include a variety of timers as well. One of the most common types of timers is the Programmable Interval Timer (PIT). A PIT may either count down from some value to zero, or up to the capacity of the count register, overflowing to zero. Once it reaches zero, it sends an interrupt to the processor indicating that it has finished counting. This is useful for devices such as thermostats, which periodically test the temperature around them to see if they need to turn the air conditioner on, the heater on, etc. A dedicated Pulse Width Modulation (PWM) block makes it possible for the CPU to control power converters, resistive loads, motors, etc., without using lots of CPU resources in tight timer loops. Universal Asynchronous Receiver/Transmitter (UART) block makes it possible to receive and transmit data over a serial line with very little load on the CPU. Dedicated on-chip hardware also often includes capabilities to communicate with other devices (chips) in digital formats such as I²C and Serial Peripheral Interface (SPI). [ Higher integration ] Micro-controllers may not implement an external address or data bus as they integrate RAM and non-volatile memory on the same chip as the CPU. Using fewer pins, the chip can be placed in a much smaller, cheaper package. Integrating the memory and other peripherals on a single chip and testing them as a unit increases the cost of that chip, but often results in decreased net cost of the embedded system as a whole. Even if the cost of a CPU that has integrated peripherals is slightly more than the cost of a CPU and external peripherals, having fewer chips typically allows a smaller and cheaper circuit board, and reduces the labor required to assemble and test the circuit board. A micro-controller is a single integrated circuit, commonly with the following features: central processing unit - ranging from small and simple 4- bit processors to complex 32- or 64-bit processors volatile memory ( RAM ) for data storage ROM, EPROM, EEPROM or Flash memory for program and operating parameter storage discrete input and output bits, allowing control or detection of the logic state of an individual package pin serial input/output such as serial port s ( UART s ) other serial communications interfaces like I²C, Serial Peripheral Interface and Controller Area Network for system interconnect peripheral s such as timer s, event counters, PWM generators, and watchdog clock generator - often an oscillator for a quartz timing crystal, resonator or RC circuit many include analog-to-digital converters, some include digital-to-analog converters in-circuit programming and debugging support This integration drastically reduces the number of chips and the amount of wiring and circuit board space that would be needed to produce equivalent systems using separate chips. Furthermore, on low pin count devices in particular, each pin may interface to several internal peripherals, with the pin function selected by software. This allows a part to be used in a wider variety of applications than if pins had dedicated functions. Micro-controllers have proved to be highly popular in embedded system s since their introduction in the 1970s. Some microcontrollers use a Harvard architecture : separate memory buses for instructions and data, allowing accesses to take place concurrently. Where a Harvard architecture is used, instruction words for the processor may be a different bit size than the length of internal memory and registers; for example: 12-bit instructions used with 8-bit data registers. The decision of which peripheral to integrate is often difficult. The microcontroller vendors often trade operating frequencies and system design flexibility against time-to-market requirements from their customers and overall lower system cost. Manufacturers have to balance the need to minimize the chip size against additional functionality. Microcontroller architectures vary widely. Some designs include general-purpose microprocessor cores, with one or more ROM, RAM, or I/O functions integrated onto the package. Other designs are purpose built for control applications. A micro-controller instruction set usually has many instructions intended for bit-wise operations to make control programs more compact. { Easy Way to build a microcontroller project } For example, a general purpose processor might require several instructions to test a bit in a register and branch if the bit is set, where a micro-controller could have a single instruction to provide that commonly-required function. Microcontrollers typically do not have a math coprocessor, so floating point arithmetic is performed by software. [ Programming environments ] Microcontrollers were originally programmed only in assembly language, but various high-level programming language s are now also in common use to target microcontrollers. These languages are either designed specially for the purpose, or versions of general purpose languages such as the C programming language. Compiler s for general purpose languages will typically have some restrictions as well as enhancements to better support the unique characteristics of microcontrollers. Some microcontrollers have environments to aid developing certain types of applications. Microcontroller vendors often make tools freely available to make it easier to adopt their hardware. Many microcontrollers are so quirky that they effectively require their own non-standard dialects of C, such as SDCC for the 8051, which prevent using standard tools (such as code libraries or static analysis tools) even for code unrelated to hardware features. Interpreters are often used to hide such low level quirks. Interpreter firmware is also available for some microcontrollers. For example, BASIC on the early microcontrollers Intel 8052; { &quot; 8052-Basic Microcontrollers &quot; by Jan Axelson 1994 } BASIC and FORTH on the Zilog Z8 [ Optimizing the Zilog Z8 Forth Microcontroller for Rapid Prototyping Robert Edwards 1987 3 http://www.ornl.gov/info/reports/1987/3445602791343.pdf ] as well as some modern devices. Typically these interpreters support interactive programming. Simulators are available for some microcontrollers. These allow a developer to analyze what the behavior of the microcontroller and their program should be if they were using the actual part. A simulator will show the internal processor state and also that of the outputs, as well as allowing input signals to be generated. While on the one hand most simulators will be limited from being unable to simulate much other hardware in a system, they can exercise conditions that may otherwise be hard to reproduce at will in the physical implementation, and can be the quickest way to debug and analyze problems. Recent microcontrollers are often integrated with on-chip debug circuitry that when accessed by an in-circuit emulator via JTAG, allow debugging of the firmware with a debugger. [ Types of microcontrollers ] [ List of common microcontrollers ] As of 2008 there are several dozen microcontroller architectures and vendors including: includes ARM9, ARM Cortex-A8, Sitara ARM Microprocessor { Atmel } { AVR (8-bit), } { AVR32 (32-bit), and } { AT91SAM (32-bit) } { Cypress Semiconductor &apos;s M8C Core used in their } { PSoC (Programmable System-on-Chip) } { Freescale } { ColdFire (32-bit) and } { S08 (8-bit) } { Freescale } { 68HC11 (8-bit) } { Intel } { 8051 } { Infineon : 8, 16, 32 Bit microcontrollers www.infineon.com/mcu } { MIPS } { Microchip Technology } { PIC, (8-bit PIC16, PIC18, 16-bit dsPIC33 / PIC24), (32-bit PIC32) } { NXP Semiconductors LPC1000, LPC2000, LPC3000, LPC4000 (32-bit), LPC900, LPC700 (8-bit) } { Parallax Propeller } { PowerPC ISE } { Rabbit 2000 (8-bit) } { Renesas RX, } { V850, } { Hitachi H8, } { Hitachi SuperH (32-bit), M16C (16-bit), RL78, R8C, 78K0/78K0R (8-bit) } { Silicon Laboratories Pipelined 8-bit 8051 Microcontrollers and mixed-signal ARM-based 32-bit microcontrollers } { STMicroelectronics } { STM8 (8-bit), } { ST10 (16-bit) and } { STM32 (32-bit) } { Texas Instruments } { TI MSP430 (16-bit) } { Toshiba TLCS-870 (8-bit/16-bit). } Many others exist, some of which are used in very narrow range of applications or are more like applications processors than microcontrollers. The microcontroller market is extremely fragmented, with numerous vendors, technologies, and markets. Note that many vendors sell or have sold multiple architectures. [ Interrupt latency ] In contrast to general-purpose computers, microcontrollers used in embedded systems often seek to optimize interrupt latency over instruction throughput. Issues include both reducing the latency, and making it be more predictable (to support real-time control). When an electronic device causes an interrupt, the intermediate results (registers) have to be saved before the software responsible for handling the interrupt can run. They must also be restored after that software is finished. If there are more registers, this saving and restoring process takes more time, increasing the latency. Ways to reduce such context/restore latency include having relatively few registers in their central processing units (undesirable because it slows down most non-interrupt processing substantially), or at least having the hardware not save them all (this fails if the software then needs to compensate by saving the rest &quot; manually &quot; ). Another technique involves spending silicon gates on &quot; shadow registers &quot; : One or more duplicate registers used only by the interrupt software, perhaps supporting a dedicated stack. Other factors affecting interrupt latency include: One common technique just blocks all interrupts for the duration of the critical section. This is easy to implement, but sometimes critical sections get uncomfortably long. A more complex technique just blocks the interrupts that may trigger access to that data structure. This is often based on interrupt priorities, which tend to not correspond well to the relevant system data structures. Accordingly, this technique is used mostly in very constrained environments. Processors may have hardware support for some critical sections. Examples include supporting atomic access to bits or bytes within a word, or other atomic access primitives like the LDREX/STREX exclusive access primitives introduced in the ARMv6 architecture. { Interrupt nesting. Some microcontrollers allow higher priority interrupts to interrupt lower priority ones. This allows software to manage latency by giving time-critical interrupts higher priority (and thus lower and more predictable latency) than less-critical ones. } { Trigger rate. When interrupts occur back-to-back, microcontrollers may avoid an extra context save/restore cycle by a form of } { tail call optimization. } Lower end microcontrollers tend to support fewer interrupt latency controls than higher end ones. [ Microcontroller embedded memory technology ] Since the emergence of microcontrollers, many different memory technologies have been used. Almost all microcontrollers have at least two different kinds of memory, a non-volatile memory for storing firmware and a read-write memory for temporary data. [ Data ] From the earliest microcontrollers to today, six-transistor SRAM is almost always used as the read/write working memory, with a few more transistors per bit used in the register file. MRAM could potentially replace it as it is 4 to 10 times denser which would make it more cost effective. In addition to the SRAM, some microcontrollers also have internal EEPROM for data storage; and even ones that do not have any (or not enough) are often connected to external serial EEPROM chip (such as the BASIC Stamp ) or external serial flash memory chip. A few recent microcontrollers beginning in 2003 have &quot; self-programmable &quot; flash memory. [ Firmware ] The earliest microcontrollers used mask ROM to store firmware. Later microcontrollers (such as the early versions of the Freescale 68HC11 and early PIC microcontroller s ) had quartz windows that allowed ultraviolet light in to erase the EPROM. The Microchip PIC16C84, introduced in 1993, { Microchip unveils PIC16C84, a reprogrammable EEPROM-based 8-bit microcontroller 1993 } was the first microcontroller to use EEPROM to store firmware. In the same year, Atmel introduced the first microcontroller using NOR Flash memory to store firmware. [ See also ] [ Electronics ] List of common microcontrollers Microbotics Programmable logic controller Single-board microcontroller PIC microcontroller [ Notes ] [ July 2008 ] [ External links ] [ Embedded Systems ] [ Microcontrollers ] [ Business/Electronics_and_Electrical/Control_Systems/Microcontroller ] Embedded Systems Design magazine Category:Digital electronics Category:Embedded systems Category:Central processing unit af:Mikrobeheerder ar:متحكم دقيق bs:Mikrokontroler bg:Микроконтролер ca:Microcontrolador cs:Jednočipový počítač da:Mikrocontroller de:Mikrocontroller et:Mikrokontroller el:Μικροελεγκτής es:Microcontrolador eu:Mikrokontrolagailu fa:ریزکنترل‌گر fr:Microcontrôleur gl:Microcontrolador ko:마이크로컨트롤러 hi:माइक्रोकंट्रोलर id:Pengendali mikro is:Örtölva (íhlutur) it:Microcontrollore he:מיקרו-בקר hu:Mikrokontroller mk:Микроуправувач ml:മൈക്രോകൺട്രോളർ ms:Mikropengawal nl:Microcontroller ja:マイクロコントローラ no:Mikrokontroller nn:Mikrokontroller pa:ਮਾਈਕਰੋ ਕੰਟ੍ਰੋਲਰ pl:Mikrokontroler pt:Microcontrolador ro:Microcontroler ru:Микроконтроллер sq:Mikrokontrolluesi si:ක්‍ෂුද්‍රපාලකය simple:Microcontroller sk:Mikrokontrolér sl:Mikrokrmilnik sr:Микроконтролер sh:Mikrokontroler fi:Mikrokontrolleri sv:Mikrokontroller ta:மைக்ரோகண்ட்ரோலர் th:ไมโครคอนโทรลเลอร์ tr:Mikrodenetleyici uk:Мікроконтролер vi:Vi điều khiển zh:单片机