In computing, a loadable kernel module (or LKM) is an object file that contains code to extend the running kernel, or so-called base kernel, of an operating system. LKMs are typically used to add support for new hardware and/or filesystem s, or for adding system call s. When the functionality provided by an LKM is no longer required, it can be unloaded in order to free memory and other resources. Most current Unix-like systems, and Microsoft Windows, support loadable kernel modules, although they might use a different name for them, such as kernel loadable module (kld) in FreeBSD and kernel extension (kext) in OS X. They are also known as Kernel Loadable Modules (or KLM), and simply as Kernel Modules (KMOD). [ Advantages ] Without loadable kernel modules, an operating system would have to include all possible anticipated functionality already compiled directly into the base kernel. Much of that functionality would reside in memory without being used, wasting memory, and would require that users rebuild and reboot the base kernel every time they require new functionality. Most operating systems supporting loadable kernel modules will include modules to support most desired functionality. [ Linux ] Loadable kernel modules in Linux are loaded (and unloaded) by the modprobe command. They are located in /lib/modules and they have had the extension.ko ( &quot; kernel object &quot; ) since version 2.6. [ The Linux Kernel Module Programming Guide, section 2.2 &quot; Compiling Kernel Modules &quot; http://tldp.org/LDP/lkmpg/2.6/html/x181.html 2011-10-14 ] In previous versions they used the.o extension. The lsmod command lists the loaded kernel modules. In emergency cases, when the system fails to boot due to e.g. broken modules, specific modules can be enabled or disabled by modifying the kernel boot parameters list (by pressing &apos;e&apos; in the GRUB start menu, then editing the kernel parameter line). [ License issues ] In the opinion of Linux maintainers, LKM are derived work s of the kernel. The Linux maintainers tolerate the distribution of proprietary modules [ April 2012 ], but allow symbols to be marked as only available to GNU General Public License (GPL) modules. [ Tainting ] Loading a proprietary or non-GPL-compatible LKM will set a &apos;taint&apos; flag [ 2011-06-21 Linus Torvalds, et all Documentation/oops-tracing.txt kernel.org http://repo.or.cz/w/linux-2.6.git/blob/HEAD%3A/Documentation/oops-tracing.txt#l222 2011-10-03 ] in the running kernel—meaning that any problems or bugs experienced will be less likely to be investigated by the maintainers. [ 2006-03-24 Jonathan Corbet Tainting from user space LWN.net https://lwn.net/Articles/184879/ 2011-10-03 ] [ 2007-07-26 Novell support documentation: Tainted kernel http://www.novell.com/support/viewContent.do?externalId%3D3582750%26amp%3BsliceId%3D1 2011-10-03 ] LKMs effectively become part of the running kernel, so can corrupt kernel data structures and produce bugs that may not be able to be investigated if the module is indeed proprietary. [ Linuxant controversy ] In 2004, Linuxant—a consulting company that releases proprietary device driver s as loadable kernel modules—attempted to bypass GPLONLY symbol restrictions by abusing a NULL terminator in their MODULE_LICENSE : MODULE_LICENSE( &quot; GPL\0for files in the \ &quot; GPL\ &quot; directory; for others, only LICENSE file applies &quot; ); The string comparison code used by the kernel at the time tried to determine whether the module was GPLed stopped when it reached a null character (\0), so it would be fooled into thinking that the module was declaring its license to be just &quot; GPL &quot;. { Being honest with MODULE_LICENSE [LWN.net ] } [ FreeBSD ] Kernel modules for FreeBSD are stored within /boot/kernel/ for modules distributed with the OS, or usually /boot/modules/ for modules installed from FreeBSD ports or FreeBSD packages, or for proprietary or otherwise binary-only modules. FreeBSD kernel modules usually have the extension.ko. Once the machine has booted, they may be loaded with the kldload command, unloaded with kldunload, and listed with kldstat. Modules can also be loaded from the loader before the kernel starts, either automatically (through /boot/loader.conf ) or by hand. [ OS X ] Some loadable kernel modules in OS X can be loaded automatically. Loadable kernel modules can also be loaded by the kextload command. They can be listed by the kextstat command. Loadable kernel modules are located in application bundle s with the extension.kext. Modules supplied with the operating system are stored in the /System/Library/Extensions directory; modules supplied by third parties are in various other directories. [ Fragmentation penalty ] One minor criticism of preferring a modular kernel over a static kernel is the so-called Fragmentation Penalty.The base kernel is always unpacked into real contiguous memory by its setup routines; so, the base kernel code is never fragmented.Once the system is in a state where modules may be inserted—for example, once the filesystem s have been mount ed that contain the modules—it is probable that any new kernel code insertion will cause the kernel to become fragmented, thereby introducing a minor performance penalty. [ September 2007 ] [ Binary compatibility ] Linux does not provide a stable API or ABI for kernel modules. This means that there are differences in internal structure and function between different kernel versions, which can cause compatibility problems. In an attempt to combat those problems, symbol versioning data is placed within the.modinfo section of loadable ELF modules. This versioning information can be compared with that of the running kernel before loading a module; if the versions are incompatible, the module will not be loaded. Other operating systems, such as Solaris, FreeBSD, Mac OS X, and Windows keep the kernel API and ABI relatively stable, thus avoiding this problem. For example, FreeBSD kernel modules compiled against kernel version 6.0 will work without recompilation on any other FreeBSD 6.x version, e.g. 6.4. However, they are not compatible with other major versions and must be recompiled for use with FreeBSD 7.x, as API and ABI compatibility is maintained only within a branch. [ Security ] While loadable kernel modules are a convenient method of modifying the running kernel, this can be abused by an attacker on a compromised system to prevent detection of his processes or file s, allowing him to maintain control over the system. Many rootkits make use of LKMs in this way. Note that modules do not help in any way in privilege elevation, as root access is required to load a LKM; they merely make it easier for the attacker to hide the break-in. { Exploiting Loadable Kernel Modules } [ See also ] NetWare Loadable Module [ References ] [ External links ] [ October 2011 ] IBM DeveloperWorks in-depth article on LKM Online kext database for OSX / Hackintosh Ori Pomerantz, Linux Kernel Module Programming Guide Copyright Considerations With LKMs &quot; Kernel Extension Programming Topics &quot; document for OS X &quot; HowTo: Lodable Kernel Module &quot; Category:Operating system technology Category:Linux kernel Category:FreeBSD de:Kernel-Modul es:Módulo de núcleo fr:Loadable Kernel Module id:Modul kernel ja:ローダブル・カーネル・モジュール pt:Módulo do núcleo (Linux) ru:Модульное ядро sv:Laddbar kärnmodul zh:可載入核心模組