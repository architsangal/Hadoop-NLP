[ May 2008 ] In computer science, real-time computing (RTC), or reactive computing, is the study of hardware and software systems that are subject to a &quot; real-time constraint &quot; — e.g. operational deadlines from event to system response. Real-time programs must guarantee response within strict time constraints. { Ben-Ari, M., &quot; Principles of Concurrent and Distributed Programming &quot;, Prentice Hall, 1990. ISBN 0-13-711821-X. Ch16, Page 164. } Often real-time response times are understood to be in the order of milliseconds and sometimes microseconds. In contrast, a non-real-time system is one that cannot guarantee a response time in any situation, even if a fast response is the usual result. The use of this word should not be confused with the two other legitimate uses of &apos;real-time&apos;. In the domain of simulations, the term means that the simulation&apos;s clock runs as fast as a real clock would; and in the domain of data transfer, media processing and enterprise systems, the term is used to mean &apos;without perceivable delay&apos;. Real-time software may use one or more of the following: synchronous programming language s, real-time operating system s, and real-time networks, each of which provide essential frameworks on which to build a real-time software application. A real-time system may be one where its application can be considered (within context) to be mission critical. The anti-lock brakes on a car are a simple example of a real-time computing system — the real-time constraint in this system is the time in which the brakes must be released to prevent the wheel from locking. Real-time computations can be said to have failed if they are not completed before their deadline, where their deadline is relative to an event. A real-time deadline must be met, regardless of system load. [ History ] The term real-time derives from its use in early simulation, where a real-world process is simulated at a rate that matched that of the real process (now called Real-time Simulation to avoid ambiguity). Analog computers, most often, were capable of simulating at a much faster pace than real-time, a situation that could be just as dangerous as a slow simulation if it were not also recognized and accounted for. [ Criteria for real-time computing ] A system is said to be real-time if the total correctness of an operation depends not only upon its logical correctness, but also upon the time in which it is performed. Real-time systems, as well as their deadlines, are classified by the consequence of missing a deadline. Hard Missing a deadline is a total system failure. Firm Infrequent deadline misses are tolerable, but may degrade the system&apos;s quality of service. The usefulness of a result is zero after its deadline. Soft The usefulness of a result degrades after its deadline, thereby degrading the system&apos;s quality of service. Thus, the goal of a hard real-time system is to ensure that all deadlines are met, but for soft real-time systems the goal becomes meeting a certain subset of deadlines in order to optimize some application specific criteria. The particular criteria optimized depends on the application, but some typical examples include maximizing the number of deadlines met, minimizing the lateness of tasks and maximizing the number of high priority tasks meeting their deadlines. Hard real-time systems are used when it is imperative that an event be reacted to within a strict deadline. Such strong guarantees are required of systems for which not reacting in a certain interval of time would cause great loss in some manner, especially damaging the surroundings physically or threatening human lives (although the strict definition is simply that missing the deadline constitutes failure of the system). For example, a car engine control system is a hard real-time system because a delayed signal may cause engine failure or damage. Other examples of hard real-time embedded systems include medical systems such as heart pacemaker s and industrial process controllers. Hard real-time systems are typically found interacting at a low level with physical hardware, in embedded system s. Early video game systems such as the Atari 2600 and Cinematronics vector graphics had hard real-time requirements because of the nature of the graphics and timing hardware. In the context of multitasking systems the scheduling policy is normally priority driven ( pre-emptive schedulers). Other scheduling algorithms include Earliest Deadline First, which, ignoring the overhead of context switch ing, is sufficient for system loads of less than 100%. { C. Liu and J. Layland. Scheduling Algorithms for Multiprogramming in a Hard Real-time Environment. Journal of the ACM, 20(1):46--61, Jan. 1973. http://citeseer.ist.psu.edu/liu73scheduling.html } New overlay scheduling systems, such as an Adaptive Partition Scheduler assist in managing large systems with a mixture of hard real-time and non real-time applications. Soft real-time systems are typically used where there is some issue of concurrent access and the need to keep a number of connected systems up to date with changing situations; for example software that maintains and updates the flight plans for commercial airline rs. The flight plans must be kept reasonably current but can operate to a latency of seconds. Live audio-video systems are also usually soft real-time; violation of constraints results in degraded quality, but the system can continue to operate. [ Real-time in Digital Signal Processing ] In a real-time DSP process, the analyzed (input) and generated (output) samples can be processed (or generated) continuously in the time it takes to input and output the same set of samples independent of the processing delay. { S.M. Kuo, B.H. Lee, and W. Tian, &quot; Real-Time Digital Signal Processing: Implementations and Applications &quot;, Wiley, 2006. ISBN 0-470-01495-4. Section 1.3.4: Real-Time Constraints. } It means that the processing delay must be bounded even if the processing continues for an unlimited time. That means that the average processing time per sample is no greater than the sampling period, which is the reciprocal of the sampling rate. This is the criterion whether the samples are grouped together in large segments and processed in blocks or are processed individually and whether there are long, short, or non-existent input and output buffers. Consider an audio DSP example: if a process requires 2.01 seconds to analyze, synthesize, or process 2.00 seconds of sound, it is not real-time. If it takes 1.99 seconds, it is or can be made into, a real-time DSP process. A common life analog is standing in a line or queue waiting for the checkout in a grocery store. If the line asymptotically grows longer and longer without bound, the checkout process is not real-time. If the length of the line is bounded, customers are being &quot; processed &quot; and output as rapidly, on average, as they are being inputted and that process is real-time. The grocer might go out of business or must at least lose business if he/she cannot make his/her checkout process real-time (so it&apos;s fundamentally important that this process be real-time). A signal processing algorithm that cannot keep up with the flow of input data with output falling farther and farther behind the input is not real-time. But if the delay of the output (relative to the input) is bounded during a process that operates over an unlimited time, then that signal processing algorithm is real-time, even if the throughput delay may be very long. [ Real-time and high-performance ] Real-time computing is sometimes misunderstood to be high-performance computing, but this is not always the case. For example, a massive supercomputer executing a scientific simulation may offer impressive performance, yet it is not executing a real-time computation. Conversely, once the hardware and software for an anti-lock braking system has been designed to meet its required deadlines, no further performance gains are obligatory. Furthermore, if a network server is highly loaded with network traffic, its response time may be slower but will (in most cases) still succeed before it times out (hits its deadline). Hence, such a network server would not be considered a real-time system: temporal failures (delays, time-outs, etc.) are typically small and compartmentalized (limited in effect) but are not catastrophic failures. In a real-time system, such as the FTSE 100 Index, a slow-down beyond limits would often be considered catastrophic in its application context. Therefore, the most important requirement of a real-time system is predictability and not performance. Some kinds of software, such as many chess-playing programs, can fall into either category. For instance, a chess program designed to play in a tournament with a clock will need to decide on a move before a certain deadline or lose the game, and is therefore a real-time computation, but a chess program that is allowed to run indefinitely before moving is not. In both of these cases, however, high performance is desirable: the more work a tournament chess program can do in the allotted time, the better its moves will be, and the faster an unconstrained chess program runs, the sooner it will be able to move. This example also illustrates the essential difference between real-time computations and other computations: if the tournament chess program does not make a decision about its next move in its allotted time it loses the game—i.e., it fails as a real-time computation—while in the other scenario, meeting the deadline is assumed not to be necessary. [ Design methods ] Several methods exist to aid the design of real-time systems, an example of which is MASCOT, an old but very successful method which represents the concurrent structure of the system. Other examples are HOOD, Real-Time UML, AADL the Ravenscar profile, Real-Time Java. [ See also ] Synchronous programming language Ptolemy Project DSOS Worst-case execution time [ References ] [ External links ] [ Technical committees ] IEEE Technical Committee on Real-Time Systems Euromicro Technical Committee on Real-time Systems [ Scientific conferences ] ECRTS - Euromicro Conference on Real-time Systems IEEE Real-time Systems Symposium IEEE Real-time Technology and Applications Symposium International Symposium on Object-oriented Real-time distributed Computing IEEE International Conference on Embedded and Real-Time Computing Systems and Applications Real-Time &amp; Embedded Computing Conference [ Journals ] International Journal of Critical Computer-Based Systems International Journal of Real-Time Systems [ Research groups ] CISTER Research Unit, ISEP, Polytechnic Institute of Porto (IPP), Portugal Real-Time Systems Research Group,INRIA,LORIA NANCY, France Real-Time &amp; Embedded Computing Laboratory (USMAN SHARIF BCS-SP03-37) Mälardalen Real-Time research Centre Real-Time Computing Laboratory Real-Time Systems Laboratory RTSE Laboratory Institute for Systems Engineering - Real Time systems Group Real-Time Systems Laboratory at Scuola Superiore Sant&apos;Anna, Pisa, Italy Technical University of Kaiserslautern - Institute for Electrical Engineering and Information Technology - Real-Time Systems Group Vienna University of Technology - Institute for Computer Engineering - Real-Time Systems Group Real-Time Systems Research Group at the University of York, UK Chalmers University of Technology - Dependable Real-Time Systems research group ARTES: a national Swedish strategic research initiative in Real-Time Systems supported by the Swedish Foundation for Strategic Research (SSF), SE Real-Time Systems at the University of North Carolina at Chapel Hill Real-time Systems Laboratory at Virginia Polytechnic and State University, Blacksburg mc2labs.com - ICT Research &amp; Development, Mogliano Veneto IT - Realtime Internet programming infrastructures [ Technical Papers ] The What, Where and Why of Real-Time Simulation ca:Computació en temps real de:Echtzeitsystem es:Computación en tiempo real fa:رایانش بی‌درنگ fr:Système temps réel id:Real-time he:מערכת זמן אמת ms:Pengkomputeran masa-sebenar nl:Real-time ja:リアルタイムシステム no:Sanntidssystem pl:System czasu rzeczywistego pt:Tempo real ru:Системы реального времени simple:Real-time computing th:ระบบเวลาจริง vi:Hệ thống thời gian thực