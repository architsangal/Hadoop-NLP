L4 is a family of second-generation microkernel s, generally used to implement Unix-like operating systems, but also used in a variety of other systems. L4 was a response to the poor performance of earlier microkernel-base operating systems. German computer scientist Jochen Liedtke felt that a system designed from the start for high performance, rather than other goals, could produce a microkernel of practical use. His original implementation in hand-coded Intel i386 -specific assembly language code sparked off intense interest in the computer industry. Since its introduction, L4 has been developed for platform independence and also in improving security, isolation, and robustness. There have been various re-implementations of the original binary L4 kernel interface ( ABI ) and its higher level successors, including L4Ka::Pistachio ( Uni Karlsruhe ), L4/MIPS ( UNSW ) and Fiasco ( TU Dresden ). For this reason, the name L4 has been generalized and no longer only refers to Liedtke&apos;s original implementation. It now applies to the whole microkernel family including the L4 kernel interface and its different versions. L4 is widely used; Open Kernel Labs claims deployment of one billion L4 kernels. { Aussie software in a billion mobiles http://www.itwire.com/it-industry-news/development/42934 } [ Design paradigm ] Specifying the general idea of a microkernel, Liedtke states: A concept is tolerated inside the microkernel only if moving it outside the kernel, i.e., permitting competing implementations, would prevent the implementation of the system&apos;s required functionality. [ Jochen Liedtke On µ-Kernel Construction Proc. 15th ACM symposium on Operating Systems Principles (SOSP) 237 –250 1995 December http://i30www.ira.uka.de/research/publications/papers/index.php?lid%3Den%26amp%3Bdocid%3D642 ] In this spirit, the L4 microkernel only provides the four basic mechanisms: address space s, thread s, scheduling, and synchronous inter-process communication. An operating system based on a microkernel like L4 has to provide services as servers in user space that monolithic kernel s like Linux or older generation microkernels include internally. For example, in order to implement a secure Unix-like system, servers will have to provide the rights management that Mach included inside the kernel. [ History ] The realization of drawbacks in design and performance of the first-generation Mach microkernel led a number of developers to re-examine the entire microkernel concept in the mid-1990s. The asynchronous in-kernel-buffering process communication concept used in Mach turned out to be one of the main reasons for its poor performance. This induced developers of Mach-based operating systems to move some time-critical components, like file systems or drivers, back inside the kernel [ August 2010 ]. While this somewhat ameliorated the performance issues, it plainly violates the minimality concept of a true microkernel (and squanders their major advantages). Detailed analysis of the Mach bottleneck indicated that, among other things, its working set is too large: the IPC code expresses poor spatial locality; that is, it results in too many cache misses, of which most are in-kernel. This analysis gave rise to the principle that an efficient microkernel should be small enough such the majority of performance-critical code fits into cache (preferably a small fraction of said cache). [ L3 ] Jochen Liedtke set out to prove that a well designed thinner IPC layer, with careful attention to performance and machine-specific (as opposed to platform independent) design could yield massive real-world performance improvements. Instead of Mach&apos;s complex IPC system, his L3 microkernel simply passed the message without any additional overhead. Defining and implementing the required security policies were considered to be duties of the user space servers. The role of the kernel was only to provide the necessary mechanism to enable the user-level servers to enforce the policies. L3 proved itself a safe and robust operating system, used for many years for example by TÜV SÜD [ September 2010 ]. [ L4 ] After some experience using L3, Liedtke came to the conclusion that several other Mach concepts were also misplaced. By simplifying the microkernel concepts even further he developed the first L4 kernel which was primarily designed with high performance in mind. In order to wring out every bit of performance the entire kernel was written in assembly language. [ Jochen Liedtke Jochen Liedtke Improving IPC by kernel design 14th ACM Symposium on Operating System Principles 175 –88 December 1993 Asheville, NC, USA http://portal.acm.org/citation.cfm?id%3D168619.168633%26amp%3Bcoll%3Dportal%26amp%3Bdl%3DACM%26amp%3Btype%3Dseries%26amp%3Bidx%3D168619%26amp%3Bpart%3DProceedings%26amp%3BWantType%3DProceedings%26amp%3Btitle%3DACM%20Symposium%20on%20Operating%20Systems%20Principles%26amp%3BCFID%3D18793560%26amp%3BCFTOKEN%3D54028606 ] His work caused a minor revolution in operating system design circles [ November 2009 ]. Soon it was being studied by a number of universities and research institutes [ November 2009 ], including IBM, where Liedtke started to work in 1996. At IBM&apos;s Thomas J. Watson Research Center Liedtke and his colleagues continued research on L4 and microkernel based systems in general [ November 2009 ]. [ L4Ka::Hazelnut ] In 1999, Liedtke took over the Systems Architecture Group at the University of Karlsruhe, where he continued the research into microkernel systems. As a proof of concept that a high performance microkernel could also be constructed in a higher level language, the group developed L4Ka::Hazelnut, a C++ version of the kernel that ran on IA32- and ARM-based machines. The effort was a success — performance was still acceptable — and with its release the pure assembly language versions of the kernels were effectively discontinued. [ L4/Fiasco ] In parallel to the development of L4Ka::Hazelnut, in 1998 the Operating Systems Group TUD:OS of the TU Dresden (Dresden University of Technology) started to develop their own C++ implementation of the L4 kernel interface, called L4/Fiasco. In contrast to L4Ka::Hazelnut, which does not allow concurrency in the kernel at all and its successor L4Ka::Pistachio, which allows interrupts in the kernel only at specific preemption points, L4/Fiasco is fully preemptible (with the exception of extremely short atomic operations) to achieve a low interrupt latency. This was considered necessary because L4/Fiasco is used as the basis of DROPS { http://os.inf.tu-dresden.de/drops/overview.html }, a hard real-time capable operating system, also developed at the TU Dresden. [ Platform independence ] [ L4Ka::Pistachio ] Up until the release of L4Ka::Pistachio and newer versions of Fiasco, all L4 microkernels had been inherently tied close to the underlying CPU architecture. The next big shift in L4 development was the development of a platform independent API that still retained the high performance characteristics despite its higher level of portability. Although the underlying concepts of the kernel were the same, the new API provided many radical changes to previous L4 versions, including better support for multi-processor systems, looser ties between threads and address spaces, and the introduction of user-level thread control blocks (UTCBs) and virtual registers. After releasing the new L4 API (Version X.2 a.k.a. Version 4) in early 2001, the System Architecture Group at the University of Karlsruhe implemented a new kernel, L4Ka::Pistachio, completely from scratch, now with focus on both high performance as well as portability. It was released under the two-clause BSD license. [ Newer Fiasco versions ] The L4/Fiasco microkernel has also been extensively improved over the years. It now supports several hardware platforms ranging from x86 through AMD64 to several ARM platforms. Notably, a version of Fiasco (FiascoUX) is able to run as a user-level application on top of Linux. L4/Fiasco implements several extensions to the L4v2 API. Exception IPC enables the kernel to send CPU exceptions to user-level handler applications. With the help of alien thread s it is possible to perform fine-grained control over system calls. X.2-style UTCBs have been added. Furthermore, Fiasco contains mechanisms for controlling communication rights as well as kernel-level resource consumption. On top of Fiasco a collection of basic user level services are developed (called L4Env) that amongst others are used to para-virtualise current Linux version (2.6.x) (called L4Linux). [ University of New South Wales and NICTA ] Development also took place at the University of New South Wales (UNSW), where developers implemented L4 on several 64-bit platforms. Their work resulted in L4/MIPS and L4/Alpha, resulting in Liedtke&apos;s original version being retroactively named L4/x86. Like Liedtke&apos;s original kernels, the UNSW kernels (written in a mixture of assembly and C) were unportable and each implemented from scratch. With the release of the highly portable L4Ka::Pistachio, the UNSW group abandoned their own kernels in favour of producing highly-tuned ports of L4Ka::Pistachio, including the fastest-ever reported implementation of message passing (36 cycles on the Itanium architecture). [ Charles Gray Chapman, Matthew; Chubb, Peter; Mosberger-Tang, David; Heiser, Gernot Itanium —a system implementor&apos;s tale USENIX Annual Technical Conference 264 –278 April 2005 Annaheim, CA, USA http://www.usenix.org/publications/library/proceedings/usenix05/tech/general/gray.html ] The group has also demonstrated that user-level device drivers can perform as well as in-kernel drivers, [ Leslie Ben Chubb, Peter; FitzRoy-Dale, Nicholas; Götz, Stefan; Gray, Charles; Macpherson, Luke; Potts, Daniel; Shen, Yueting; Elphinstone, Kevin; Heiser, Gernot 2005 September User-level device drivers: achieved performance Journal of Computer Science and Technology 20 5 654–664 10.1007/s11390-005-0654-4 ] and developed Wombat, a highly portable version of Linux on L4 that runs on x86, ARM and MIPS processors. On XScale processors, Wombat demonstrates context-switching costs that are up to 30 times lower than in native Linux. [ Carl van Schaik Heiser, Gernot High-performance microkernels and virtualisation on ARM and segmented architectures 1st International Workshop on Microkernels for Embedded Systems 11 –21 NICTA January 2007 Sydney, Australia http://ertos.nicta.com.au/publications 2007-04-01 ] Later the UNSW group, at their new home at NICTA, forked L4Ka::Pistachio into a new L4 version called NICTA::L4-embedded. As the name implies, this was aimed at use in commercial embedded systems, and consequently the implementation trade-offs favoured small memory footprints and aimed to reduce complexity. The API was modified to keep almost all system calls short enough so they do not require preemption points in order to ensure high real-time responsiveness. [ Sergio Ruocco A Real-Time Programmer&apos;s Tour of General-Purpose L4 Microkernels EURASIP Journal on Embedded Systems, Special Issue on Operating System Support for Embedded Real-Time Applications 10.1155/2008/234710 October 2008 http://www.hindawi.com/getarticle.aspx?doi%3D10.1155%2F2008%2F234710 2008 1 ] [ Current research and development ] The NICTA group now focuses on the use of L4 as the basis forhighly secure and reliable systems. At the core of this approach is anew L4 kernel, called seL4, aimed at satisfying security requirements such as those of Common Criteria. The seL4 API is represented by an executable specification [ Philip Derrin Elphinstone, Kevin; Klein, Gerwin; Cock; David; Chakravarty, Manuel M. T. Running the manual: an approach to high-assurance microkernel development ACM SIGPLAN Haskell Workshop September 2006 60 –71 Portland, Oregon http://portal.acm.org/citation.cfm?id%3D1159842.1159850%26amp%3Bcoll%3Dportal%26amp%3Bdl%3DACM%26amp%3Btype%3Dseries%26amp%3Bidx%3D1159842%26amp%3Bpart%3DProceedings%26amp%3BWantType%3DProceedings%26amp%3Btitle%3DHaskell%26amp%3BCFID%3D18785943%26amp%3BCFTOKEN%3D93152956 ] written in Haskell. seL4 is a third-generation microkernel which takes a novel approach to kernel resource management, [ Dhammika Elkaduwe Derrin, Philip; Elphinstone, Kevin Kernel design for isolation and assurance of physical memory 1st Workshop on Isolation and Integration in Embedded Systems April 2008 Glasgow, UK 10.1145/1435458 http://ertos.nicta.com.au/publications/papers/Elkaduwe_DE_08.abstract ] exporting the management of kernel resources to userlevel and subjects them to the same capability-based access control as user resources.It has been formally verified, [ Gerwin Klein Kevin Elphinstone Gernot Heiser Gernot Heiser June Andronick David Cock Philip Derrin Dhammika Elkaduwe Kai Engelhardt Rafal Kolanski Michael Norrish Thomas Sewell Harvey Tuch Simon Winwood seL4: Formal verification of an OS kernel 22nd ACM Symposium on Operating System Principles October 2009 Big Sky, MT, USA http://www.sigops.org/sosp/sosp09/papers/klein-sosp09.pdf ] which means that there is a (machine-checked) mathematicalproof that the implementation is consistent with thespecification. This provides a guarantee that the kernel is free ofimplementation bugs such as deadlocks, livelocks, buffer overflows,arithmetic exceptions or use of uninitialised variables. seL4 isclaimed to be the first-ever general-purpose operating-system kernelthat has been verified. { Previouslycited } The NICTA group is also developing frameworks for building componentised systems on top of L4. [ Kuz Ihor Liu, Yan; Gorton, Ian; Heiser, Gernot to appear 2007 CAmkES: a component model for secure microkernel-based embedded systems Journal of Systems and Software 80 5 687 10.1016/j.jss.2006.08.039 ] Osker, an OS written in Haskell, targeted the L4 specification; although this project focused on the use of a functional programming language for OS development, not on microkernel research per se. [ A principled approach to operating system construction in Haskell http://web.cecs.pdx.edu/~apt/icfp05.pdf 2005 Proceedings of the tenth ACM SIGPLAN international conference on Functional programming 116–128 Hallgren T. Jones M.P. Leslie R. Tolmach A. 0362-1340 10.1145/1090189.1086380 2010-06-24 40 9 ] Codezero, a GPL L4 microkernel targeting embedded systems is also under development, with a focus on virtualization and implementation of native OS services. The Operating Systems Group TUD:OS of TU Dresden develops third generation microkernel-based operatingsystems. The component based user-level environment L4Re [ Adam Lackorzynski Alexander Warg Taming Subsystems - Capabilities as Universal Resource Access Control in L4 IIES&apos;09: Second Workshop on Isolation and Integration in Embedded Systems March 2009 Nuremberg, Germany http://portal.acm.org/citation.cfm?id%3D1519135%26amp%3Bdl%3DACM ] and the microkernel Fiasco.OC as well as the NOVA microhypervisor, [ Udo Steinberg Bernhard Kauer NOVA: A Microhypervisor-Based Secure Virtualization Architecture Eurosys 2010 April 2010 Paris, France 209 –222 http://doi.acm.org/10.1145/1755913.1755935 ] together with its user-level environment NUL are the results of this ongoing research. Fiasco.OC is a third generation microkernel, which evolved from its predecessor L4/Fiasco. Fiasco.OC is capability based, supportsmulti-core systems and hardware assisted virtualization. [ Michael Peter Henning Schild Lackorzynski, Adam; Warg, Alexander Virtual Machines Jailed - Virtualization in Systems with Small Trusted Computing Bases VTDS&apos;09: Workshop on Virtualization Technology for Dependable Systems March 2009 Nuremberg, Germany http://portal.acm.org/citation.cfm?id%3D1518688%26amp%3Bdl%3DACM ] The completely redesigned user-land environment running on top of Fiasco.OC is called L4 Runtime Environment (L4Re). It provides the framework to build multi-component systems, including a client/server communication framework, common service functionality, a virtual file-system infrastructure and popular libraries such as a C library, libstdc++ and pthreads.The platform also offers L4Linux, the multi-architecture virtualized Linux system. L4Re and Fiasco.OC run on x86 (IA32 and AMD64), ARM and PowerPC (WiP), and supersede the previous system with L4Env and L4/Fiasco. The NOVA OS Virtualization Architecture is a research project with focus on constructing a secure and efficient virtualization environment [ Udo Steinberg Kauer Bernhard NOVA: A Microhypervisor-Based Secure Virtualization Architecture EuroSys &apos;10: Proceedings of the 5th European Conference on Computer Systems April 2010 Paris, France ] [ Udo Steinberg Kauer Bernhard Towards a Scalable Multiprocessor User-level Environment IIDS&apos;10: Workshop on Isolation and Integration for Dependable Systems April 2010 Paris, France ] with a small trusted computing base. NOVA consists of a microhypervisor, a user level virtual-machine monitor, and an unprivileged componentised multi-server user environment running on top of it called NUL. NOVA runs on x86-based multi-core systems. [ Commercial deployment ] In November 2005, NICTA announced that Qualcomm was deploying NICTA&apos;s L4 version on their Mobile Station Modem chipsets. This led to the use of L4 in mobile phone handsets on sale from late 2006. In August 2006, ERTOS leader and UNSW professor Gernot Heiser spun out a company called Open Kernel Labs (OK Labs) to support commercial L4 users and further develop L4 for commercial use, in close collaboration with NICTA. OK Labs distributes its own version of L4, called OKL4, which is descended from NICTA::L4-embedded, and is supported for x86, ARM and MIPS. OKL4 was initially distributed under a BSD license. Recent releases use a dual licensing scheme with a Sleepycat-style open-source license. OK Labs also distributes a para-virtualized Linux called OK:Linux, a descendant of Wombat, as well paravirtualized versions of SymbianOS, Android and Windows. In April 2008, OK Labs released OKL4 2.1, which is the first public version of L4 using capability-based protection. OKL4 3.0 was released in October 2008. [ References ] [ 30em ] [ Further reading ] [ Jochen Liedtke Jochen Liedtke Haeberlen, Andreas; Park, Yoonho; Reuther, Lars; Uhlig, Volkmar 2000-10-22 Stub-Code Performance is Becoming Important In Proceedings of the 1st Workshop on Industrial Experiences with Systems Software (WIESS), San Diego, CA, October 2000 http://l4ka.org/publications/ PDF 2006-09-05 ] Jochen Liedtke, Ulrich Bartling, Uwe Beyer, Dietmar Heinrichs, Rudolf Ruland, Gyula Szalay. Two years of experience with a μ-Kernel based OS, ACM Press 1991 (on L4 kernel and compiler) Cheng Guanghui, Nicholas Mc Guire. L4/Fiasco/L4Linux Kickstart, Distributed &amp; Embedded Systems Lab - Lanzhou University [ External links ] L4Hq : L4 headquarters, community site for L4 projects The L4 microkernel family : Overview over L4 implementations, documentation and projects Official TUD:OS Wiki L4Ka : Implementations L4Ka::Pistachio and L4Ka::Hazelnut UNSW : Implementations for DEC Alpha and MIPS architecture OKL4 : Commercial L4 version from Open Kernel Labs NICTA L4 : Research Overview and Publications Category:Microkernels de:L4 (Mikrokern) es:L4 (micronúcleo) fr:Micronoyau L4 ja:L4 pl:L4 (informatyka) pt:L4 (micronúcleo) ru:L4 (микроядро) zh:L4微内核系列