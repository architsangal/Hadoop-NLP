The lambda calculus (also written as λ-calculus) is a formal system in mathematical logic for expressing computation by way of variable binding and substitution. It was first formulated by Alonzo Church as a way to formalize mathematics through the notion of functions, in contrast to the field of set theory. Although not very successful in that respect, the lambda calculus found early successes in the area of computability theory, such as a negative answer to Hilbert &apos;s Entscheidungsproblem. Because of the importance of the notion of variable binding and substitution, there is not just one system of lambda calculus. Historically, the most important system was the untyped lambda calculus. In the untyped lambda calculus, function application has no restrictions (so the notion of the domain of a function is not built into the system). In the Church –Turing Thesis, the untyped lambda calculus is claimed to be capable of computing all effectively calculable functions. The typed lambda calculus is a variety that restricts function application, so that functions can only be applied if they are capable of accepting the given input&apos;s &quot; type &quot; of data. Today, the lambda calculus has applications in many different areas in mathematics, philosophy, and computer science. It is still used in the area of computability theory, although Turing machines are arguably the preferred model for computation. Lambda calculus has played an important role in the development of the theory of programming languages. The most prominent counterparts to lambda calculus in computer science are functional programming language s, which essentially implement the calculus (augmented with some constants and datatype s ). Beyond programming languages, the lambda calculus also has many applications in proof theory. A major example of this is the Curry –Howard correspondence, which gives a correspondence between different systems of typed lambda calculus and systems of formal logic. [ Lambda calculus in history of mathematics ] The lambda calculus was introduced by mathematician Alonzo Church in the 1930s as part of an investigation into the foundations of mathematics. { A. Church, &quot; A set of postulates for the foundation of logic &quot;, Annals of Mathematics, Series 2, 33:346–366 (1932). } { For a full history, see Cardone and Hindley&apos;s &quot; History of Lambda-calculus and Combinatory Logic &quot; (2006). } The original system was shown to be logically inconsistent in 1935 when Stephen Kleene and J. B. Rosser developed the Kleene –Rosser paradox. Subsequently, in 1936 Church isolated and published just the portion relevant to computation, what is now called the untyped lambda calculus. { A. Church, &quot; An unsolvable problem of elementary number theory &quot;, American Journal of Mathematics, Volume 58, No. 2. (April 1936), pp. 345-363. } In 1940, he also introduced a computationally weaker, but logically consistent system, known as the simply typed lambda calculus. { A. Church, &quot; A Formulation of the Simple Theory of Types &quot;, Journal of Symbolic Logic, Volume 5 (1940). } [ Informal description ] [ Motivation ] Recursive functions are a fundamental concept within computer science and mathematics. The λ-calculus provides simple semantics for computation, enabling properties of computation to be studied formally. Consider the following two examples. The identity function id(x) = x takes a single input, x, and immediately returns x (i.e. the identity does nothing with its input), whereas the function sqsum(x, y) = x \times x + y \times y takes a pair of inputs, x and y and returns the sum of their squares, x \times x + y \times y. Using these two examples, we can make some useful observations that motivate the major ideas in the lambda calculus. The first observation is that functions need not be explicitly named. That is, the function sqsum(x, y) = x \times x + y \times y can be rewritten in anonymous form as (x, y) \mapsto x \times x + y \times y (read as “the pair of x and y is mapped to x \times x + y \times y ”). Similarly, id(x) = x can be rewritten in anonymous form as x \mapsto x, where the input is simply mapped to itself. The second observation is that the specific choice of name for a function&apos;s arguments is largely irrelevant. That is, x \mapsto x and y \mapsto y express the same function: the identity. Similarly, (x, y) \mapsto x \times x + y \times y and (u, v) \mapsto u \times u + v \times v also express the same function. Finally, any function that requires two inputs, for instance the before mentioned &apos;&apos;sqsum&apos;&apos; function, can be reworked into an equivalent function that accepts a single input, and as output returns another function, that in turn accepts a single input. For example, (x, y) \mapsto x \times x + y \times y can be reworked into x \mapsto (y \mapsto x \times x + y \times y) This transformation is called currying, i.e. transforming a function that takes multiple arguments in such a way that it can be called as a chain of functions each with a single argument (partial application). It can be generalized to functions accepting an arbitrary number of arguments. Applying the above function to the arguments (5, 2), we have: ((x, y) \mapsto x \times x + y \times y)(5, 2) = 5 \times 5 + 2 \times 2 = 29 However, using currying, we have: ((x \mapsto (y \mapsto x \times x + y \times y))(5))(2) = (y \mapsto 5 \times 5 + y \times y)(2) = 5 \times 5 + 2 \times 2 = 29 and we see the uncurried and curried forms compute the same result. Notice that x*x became a constant after the first argument assignment. [ The lambda calculus ] The lambda calculus consists of a language of lambda terms along with an equational theory (which can also be understood operationally). Since the names of functions are largely a convenience, the lambda calculus has no means of naming a function. Since all functions expecting more than one input can be transformed into equivalent functions accepting a single input (via Currying ), the lambda calculus has no means for creating a function that accepts more than one argument. Since the names of arguments are largely irrelevant, the native notion of equality on lambda terms is alpha-equivalence ( see below ), which codifies this principle. [ Lambda terms ] The syntax of lambda terms is particularly simple. There are three ways in which to obtain them: a lambda term may be a variable, x; if t is a lambda term, and x is a variable, then λx.t is a lambda term (called a lambda abstraction); if t and s are lambda terms, then ts is a lambda term (called an application). Nothing else is a lambda term, though bracketing may be used and may be needed to disambiguate terms. For example, λx.(x(λx.x)) and (λx.x)(λx.x) denote different terms. Intuitively, a lambda abstraction λx.t represents an anonymous function that takes a single input, and the λ is said to bind x in t, and an application ts represents the application of input s to some function t. In the lambda calculus, functions are taken to be first class values, so functions may be used as the inputs to other functions, and functions may return functions as their outputs. For example, λx.x represents the identity function, x ↦ x, and (λx.x)y represents the identity function applied to y. Further, (λx.y) represents the constant function x ↦ y, the function that always returns y, no matter the input. It should be noted that function application is left-associative, so (λx.x)y z = ((λx.x)y)z. Lambda terms on their own aren&apos;t particularly interesting.What makes them interesting are the various notions of equivalence and reduction that can be defined over them. [ Alpha equivalence ] A basic form of equivalence, definable on lambda terms, is alpha equivalence. It captures the intuition that the particular choice of a bound variable, in a lambda abstraction, doesn&apos;t (usually) matter.For instance, λx.x and λy.y are alpha-equivalent lambda terms, representing the same identity function.Note that the terms x and y aren&apos;t alpha-equivalent, because they are not bound in a lambda abstraction.In many presentations, it is usual to identify alpha-equivalent lambda terms. The following definitions are necessary in order to be able to define beta reduction. [ Free variables ] The free variables of a term are those variables not bound by a lambda abstraction.That is, the free variables of x are just x; the free variables of λx.t are the free variables of t, with x removed, and the free variables of ts are the union of the free variables of t and s. For example, the lambda term representing the identity λx.x has no free variables, but the constant function λx.y has a single free variable, y. [ Capture-avoiding substitutions ] Using the definition of free variables, we may now define a capture-avoiding substitution.Suppose t, s and r are lambda terms and x and y are variables.We write t[x := r] for the substitution of r for x in t, in a capture-avoiding manner.That is: x[x := r] = r; y[x := r] = y if x ≠ y; (ts)[x := r] = (t[x := r] )(s[x := r]); (λx.t)[x := r] = λx.t; (λy.t)[x := r] = λy.(t[x := r] ) if x ≠ y and y is not in the free variables of r (sometimes said &quot; y is fresh for r &quot; ). For example, (λx.x)[y := y] = λx.(x[y := y] ) = λx.x, and ((λx.y)x)[x := y] = ((λx.y)[x := y] )(x[x := y]) = (λx.y)y. The freshness condition (requiring that y is not in the free variables of r ) is crucial in order to ensure that substitution does not change the meaning of functions.For example, suppose we define another substitution action without the freshness condition.Then, (λx.y)[y := x] = λx.(y[y := x] ) = λx.x, and the constant function λx.y turns into the identity λx.x by substitution. If our freshness condition is not met, then we may simply alpha-rename with a suitably fresh variable.For example, switching back to our correct notion of substitution, in (λx.y)[y := x] the lambda abstraction can be renamed with a fresh variable z, to obtain (λz.y)[y := x] = λz.(y[y := x]) = λz.x, and the meaning of the function is preserved by substitution. [ Beta reduction ] Beta reduction states that an application of the form (λx.t)s reduces to the term t[x := s] (we write (λx.t)s → t[x := s] as a convenient shorthand for “ (λx.t)s beta reduces to t[x := s] ”).For example, for every s we have (λx.x)s → x[x := s] = s, demonstrating that λx.x really is the identity.Similarly, (λx.y)s → y[x := s] = y, demonstrating that λx.y really is a constant function. The lambda calculus may be seen as an idealised functional programming language, like Haskell or Standard ML.Under this view, beta reduction corresponds to a computational step, and in the untyped lambda calculus, as presented here, reduction need not terminate.For instance, consider the term (λx.xx)(λx.xx).Here, we have (λx.xx)(λx.xx) → (xx)[x := λx.xx] = (x[x := λx.xx] )(x[x := λx.xx]) = (λx.xx)(λx.xx).That is, the term reduces to itself in a single beta reduction, and therefore reduction will never terminate. Another problem with the untyped lambda calculus is the inability to distinguish between different kinds of data.For instance, we may want to write a function that only operates on numbers.However, in the untyped lambda calculus, there&apos;s no way to prevent our function from being applied to truth value s, or strings, for instance. Typed lambda calculi, which will be introduced later in the article, have the property that if a term is well-typed, then it never gets &quot; stuck &quot; (where there is no evaluation rule for the term), and that if a term e has a particular type, and e → e, then e has the same type. [ Formal definition ] [ Definition ] Lambda expressions are composed of variables v 1, v 2,..., v n,... the abstraction symbols λ and. parentheses ( ) The set of lambda expressions, Λ, can be defined recursively : If x is a variable, then x ∈ Λ If x is a variable and M ∈ Λ, then (λx.M) ∈ Λ If M, N ∈ Λ, then (M N) ∈ Λ Instances of rule 2 are known as abstractions and instances of rule 3 are known as applications. [ Barendregt Hendrik Pieter The Lambda Calculus: Its Syntax and Semantics North Holland, Amsterdam. Corrections 1984 103 Studies in Logic and the Foundations of Mathematics Revised http://www.elsevier.com/wps/find/bookdescription.cws_home/501727/description 0-444-87508-5 ] [ Notation ] To keep the notation of lambda expressions uncluttered, the following conventions are usually applied. [ Peter Selinger Lecture Notes on the Lambda Calculus 9 Department of Mathematics and Statistics, University of Ottawa http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf ] Outermost parentheses are dropped: M N instead of (M N). Applications are assumed to be left associative: M N P may be written instead of ((M N) P). Example for Rules of Associativity The body of an abstraction extends as far right as possible: λx.M N means λx.(M N) and not (λx.M) N. A sequence of abstractions is contracted: λx.λy.λz.N is abbreviated as λxyz.N. Example for Rule of Associativity [ Free and bound variables ] The abstraction operator, λ, is said to bind its variable wherever it occurs in the body of the abstraction. Variables that fall within the scope of a lambda are said to be bound. All other variables are called free. For example in the following expression y is a bound variable and x is free: λy.x x y. Also note that a variable binds to its &quot; nearest &quot; lambda. In the following expression one single occurrence of x is bound by the second lambda: λx.y (λx.z x) The set of free variables of a lambda expression, M, is denoted as FV(M) and is defined by recursion on the structure of the terms, as follows: [ Barendregt Henk Barendsen Erik Introduction to Lambda Calculus March 2000 ftp://ftp.cs.ru.nl/pub/CompMath.Found/lambda.pdf ] FV(x) = {x}, where x is a variable FV(λx.M) = FV(M) \ {x} FV(M N) = FV(M) ∪ FV(N) An expression that contains no free variables is said to be closed. Closed lambda expressions are also known as combinators and are equivalent to terms in combinatory logic. [ Reduction ] The meaning of lambda expressions is defined by how expressions can be reduced. { de Queiroz, Ruy J.G.B. &quot; A Proof-Theoretic Account of Programming and the Role of Reduction Rules. &quot; Dialectica 42(4), pages 265-282, 1988. } There are three kinds of reduction: α-conversion: changing bound variables; β-reduction: applying functions to their arguments; η-conversion: which captures a notion of extensionality. We also speak of the resulting equivalences: two expressions are β-equivalent, if they can be β-converted into the same expression, and α/η-equivalence are defined similarly. The term redex, short for reducible expression, refers to subterms that can be reduced by one of the reduction rules. For example, (λx.M) N is a beta-redex; if x is not free in M, λx.M x is an eta-redex. The expression to which a redex reduces is called its reduct; using the previous example, the reducts of these expressions are respectively M[x:=N] and M. [ α-conversion ] Alpha-conversion, sometimes known as alpha-renaming, [ Design concepts in programming languages Turbak Franklyn Gifford David 2008 MIT press 251 978-0-262-20175-9 ] allows bound variable names to be changed. For example, alpha-conversion of λx.x might yield λy.y. Terms that differ only by alpha-conversion are called α-equivalent. Frequently in uses of lambda calculus, α-equivalent terms are considered to be equivalent. The precise rules for alpha-conversion are not completely trivial. First, when alpha-converting an abstraction, the only variable occurrences that are renamed are those that are bound to the same abstraction. For example, an alpha-conversion of λx.λx.x could result in λy.λx.x, but it could not result in λy.λx.y. The latter has a different meaning from the original. Second, alpha-conversion is not possible if it would result in a variable getting captured by a different abstraction. For example, if we replace x with y in λx.λy.x, we get λy.λy.y, which is not at all the same. In programming languages with static scope, alpha-conversion can be used to make name resolution simpler by ensuring that no variable name masks a name in a containing scope (see alpha renaming to make name resolution trivial ). [ Substitution ] Substitution, written E[V := E &amp; prime;], is the process of replacing all free occurrences of the variable V by expression E &amp; prime;.Substitution on terms of the λ-calculus is defined by recursion on the structure of terms, as follows. x[x := N]             &amp; equiv; N y[x := N]             &amp; equiv; y, if x ≠ y (M 1 M 2 )[x := N]     &amp; equiv; (M 1 [x := N]) (M 2 [x := N] ) (λx.M)[x := N]   &amp; equiv; λx.(M) (λy.M)[x := N]   &amp; equiv; λy.(M[x := N]), if x ≠ y, provided y ∉ FV(N) To substitute into a lambda abstraction, it is sometimes necessary to α-convert the expression. For example, it is not correct for (λx.y)[y := x] to result in (λx.x), because the substituted x was supposed to be free but ended up being bound. The correct substitution in this case is (λz.x), up to α-equivalence. Notice that substitution is defined uniquely up to α-equivalence. [ &amp; amp;beta;-reduction ] Beta-reduction captures the idea of function application. Beta-reduction is defined in terms of substitution: the beta-reduction of  ((λV.E) E &amp; prime;)   is E[V := E &amp; prime;]. For example, assuming some encoding of 2, 7, &amp; times;, we have the following β-reductions: ((λn.n &amp; times;2) 7) → { 7 &amp; times;2 }. [ &amp; amp;eta;-conversion ] Eta-conversion expresses the idea of extensionality, which in this context is that two functions are the same if and only if they give the same result for all arguments. Eta-conversion converts between λx.(f x) and f whenever x does not appear free in f. [ Normal forms and confluence ] [ Normalization property (abstract rewriting)#Lambda_calculus ] For the untyped lambda calculus, β-reduction as a rewriting rule is neither strongly normalising nor weakly normalising. However, it can be shown that β-reduction is confluent. (Of course, we are working up to α-conversion, i.e. we consider two normal forms to be equal, if it is possible to α-convert one into the other.) Therefore, both strongly normalising terms and weakly normalising terms have a unique normal form. For strongly normalising terms, any reduction strategy is guaranteed to yield the normal form, whereas for weakly normalising terms, some reduction strategies may fail to find it. [ Encoding datatypes ] [ Church encoding Mogensen–Scott encoding ] The basic lambda calculus may be used to model booleans, arithmetic, data structures and recursion, as illustrated in the following sub-sections. [ Arithmetic in lambda calculus ] There are several possible ways to define the natural number s in lambda calculus, but by far the most common are the Church numeral s, which can be defined as follows: 0 := λf.λx.x 1 := λf.λx.f x 2 := λf.λx.f (f x) 3 := λf.λx.f (f (f x)) and so on. Or using the alternate syntax presented above in Notation: 0 := λfx.x 1 := λfx.f x 2 := λfx.f (f x) 3 := λfx.f (f (f x)) A Church numeral is a higher-order function —it takes a single-argument function f, and returns another single-argument function. The Church numeral n is a function that takes a function f as argument and returns the n -th composition of f, i.e. the function f composed with itself n times. This is denoted f (n) and is in fact the n -th power of f (considered as an operator); f (0) is defined to be the identity function. Such repeated compositions (of a single function f ) obey the laws of exponents, which is why these numerals can be used for arithmetic. (In Church&apos;s original lambda calculus, the formal parameter of a lambda expression was required to occur at least once in the function body, which made the above definition of 0 impossible.) We can define a successor function, which takes a number n and returns n + 1 by adding an additional application of f : SUCC := λn.λf.λx.f (n f x) Because the m -th composition of f composed with the n -th composition of f gives the m+n -th composition of f, addition can be defined as follows: PLUS := λm.λn.λf.λx.m f (n f x) PLUS can be thought of as a function taking two natural numbers as arguments and returning a natural number; it can be verified that PLUS 2 3 and 5 are equivalent lambda expressions. Since adding m to a number n can be accomplished by adding 1 m times, an equivalent definition is: [ Felleisen Matthias Flatt Matthew Programming Languages and Lambda Calculi 2006 26 http://www.cs.utah.edu/plt/publications/pllc.pdf ] PLUS := λm.λn.m SUCC n Similarly, multiplication can be defined as [ Peter Selinger Lecture Notes on the Lambda Calculus 16 Department of Mathematics and Statistics, University of Ottawa http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf ] MULT := λm.λn.λf.m (n f) Alternatively MULT := λm.λn.m (PLUS n) 0 since multiplying m and n is the same as repeating the add n function m times and then applying it to zero.Exponentiation has a rather simple rendering in Church numerals, namely POW := λb.λe.e b The predecessor function defined by PRED n = n − 1 for a positive integer n and PRED 0 = 0 is considerably more difficult. The formula PRED := λn.λf.λx.n (λg.λh.h (g f)) (λu.x) (λu.u) can be validated by showing inductively that if T denotes (λg.λh.h (g f)), then T (n) (λu.x) = (λh.h(f (n−1) (x))) for n &gt; 0. Two other definitions of PRED are given below, one using conditionals and the other using pairs. With the predecessor function, subtraction is straightforward. Defining SUB := λm.λn.n PRED m, SUB m n yields m − n when m &gt; n and 0 otherwise. [ Logic and predicates ] By convention, the following two definitions (known as Church booleans) are used for the boolean values TRUE and FALSE : (Note that FALSE is equivalent to the Church numeral zero defined above) Then, with these two λ-terms, we can define some logic operators (these are just possible formulations; other expressions are equally correct): AND := λp.λq.p q p OR := λp.λq.p p q NOT := λp.λa.λb.p b a IFTHENELSE := λp.λa.λb.p a b We are now able to compute some logic functions, for example: ≡ (λp.λq.p q p) TRUE FALSE → β TRUE FALSE TRUE ≡ (λx.λy.x) FALSE TRUE → β FALSE and we see that AND TRUE FALSE is equivalent to FALSE. A predicate is a function that returns a boolean value. The most fundamental predicate is ISZERO, which returns TRUE if its argument is the Church numeral 0, and FALSE if its argument is any other Church numeral: ISZERO := λn.n (λx.FALSE) TRUE The following predicate tests whether the first argument is less-than-or-equal-to the second: LEQ := λm.λn.ISZERO (SUB m n), and since m = n, if LEQ m n and LEQ n m, it is straightforward to build a predicate for numerical equality. The availability of predicates and the above definition of TRUE and FALSE make it convenient to write &quot; if-then-else &quot; expressions in lambda calculus. For example, the predecessor function can be defined as: PRED := λn.n (λg.λk.ISZERO (g 1) k (PLUS (g k) 1)) (λv.0) 0 which can be verified by showing inductively that n (λg.λk.ISZERO (g 1) k (PLUS (g k) 1)) (λv.0) is the add n − 1 function for n &gt; 0. [ Pairs ] A pair (2-tuple) can be defined in terms of TRUE and FALSE, by using the Church encoding for pairs. For example, PAIR encapsulates the pair ( x, y ), FIRST returns the first element of the pair, and SECOND returns the second. PAIR := λx.λy.λf.f x y FIRST := λp.p TRUE SECOND := λp.p FALSE NIL := λx.TRUE NULL := λp.p (λx.λy.FALSE) A linked list can be defined as either NIL for the empty list, or the PAIR of an element and a smaller list. The predicate NULL tests for the value NIL. (Alternatively, with NIL := FALSE, the construct l (λh.λt.λz.deal_with_head_h_and_tail_t) (deal_with_nil) obviates the need for an explicit NULL test). As an example of the use of pairs, the shift-and-increment function that maps (m, n) to (n, n + 1) can be defined as Φ := λx.PAIR (SECOND x) (SUCC (SECOND x)) which allows us to give perhaps the most transparent version of the predecessor function: PRED := λn.FIRST (n Φ (PAIR 0 0)). [ Recursion and fixed points ] [ Fixed-point combinator ] Recursion is the definition of a function using the function itself; on the face of it, lambda calculus does not allow this (we can&apos;t refer to a value which is yet to be defined, inside the lambda term defining that same value, as all functions are anonymous in lambda calculus). However, this impression is misleading: in &amp; ensp; (λx.x x) y &amp; ensp;both x‍ &amp; thinsp;‍&apos;s refer to the same lambda term, y, so it is possible for a lambda expression – here y – to be arranged to receive itself as its argument value, through self-application. Consider for instance the factorial function F(n) recursively defined by F(n) = 1, if n = 0; else n &amp; times; F(n − 1). In lambda expression which is to represent this function, a parameter (typically the first one) will be assumed to receive the lambda expression itself as its value, so that calling it – applying it to an argument – will amount to recursion. Thus to achieve recursion, the intended-as-self-referencing argument (called r here) must always be passed to itself within the function body, at a call point: with &amp; ensp; r r x = F x = G r x &amp; ensp;to hold, so &amp; ensp; r = G &amp; ensp;and { F := G G = (λx.x x) G } The self-application achieves replication here, passing the function&apos;s lambda expression on to the next invocation as an argument value, making it available to be referenced and called there. This solves the specific problem of the factorial function, but we&apos;d like to have a generic solution, i.e. not forcing a specific re-write for every recursive function: with &amp; ensp; r x = F x = G r x &amp; ensp;to hold, so &amp; ensp; r = G r =: FIX G &amp; ensp;and { F := FIX G &amp; ensp;where &amp; ensp; FIX g := (r where r = g r) = g (FIX g) } so that &amp; ensp; FIX G = G (FIX G) = (λn.(1, if n = 0; else n &amp; times; ((FIX G) (n−1)))) Given a lambda term with first argument representing recursive call (e.g. G here), the &apos;&apos;fixed-point&apos;&apos; combinator FIX will return a self-replicating lambda expression representing the recursive function (here, F ). The function does not need to be explicitly passed to itself at any point, for the self-replication is arranged in advance, when it is created, to be done each time it is called. Thus the original lambda expression (FIX G) is re-created inside itself, at call-point, achieving self-reference. In fact, there are many possible definitions for this FIX operator, the simplest of them being: Y := λg.(λx.g (x x)) (λx.g (x x)) In the lambda calculus, Y g &amp; thinsp; is a fixed-point of g, as it expands to: Y g λh.((λx.h (x x)) (λx.h (x x))) g (λx.g (x x)) (λx.g (x x)) g ((λx.g (x x)) (λx.g (x x))) g (Y g) Now, to perform our recursive call to the factorial function, we would simply call (Y G) n,   where n is the number we are calculating the factorial of. Given n = 4, for example, this gives: (Y G) 4 G (Y G) 4 (λr.λn.(1, if n = 0; else n × (r (n−1)))) (Y G) 4 (λn.(1, if n = 0; else n × ((Y G) (n−1)))) 4 1, if 4 = 0; else 4 × ((Y G) (4−1)) 4 × (G (Y G) (4−1)) 4 × ((λn.(1, if n = 0; else n × ((Y G) (n−1)))) (4−1)) 4 × (1, if 3 = 0; else 3 × ((Y G) (3−1))) 4 × (3 × (G (Y G) (3−1))) 4 × (3 × ((λn.(1, if n = 0; else n × ((Y G) (n−1)))) (3−1))) 4 × (3 × (1, if 2 = 0; else 2 × ((Y G) (2−1)))) 4 × (3 × (2 × (G (Y G) (2−1)))) 4 × (3 × (2 × ((λn.(1, if n = 0; else n × ((Y G) (n−1)))) (2−1)))) 4 × (3 × (2 × (1, if 1 = 0; else 1 × ((Y G) (1−1))))) 4 × (3 × (2 × (1 × (G (Y G) (1−1))))) 4 × (3 × (2 × (1 × ((λn.(1, if n = 0; else n × ((Y G) (n−1)))) (1−1))))) 4 × (3 × (2 × (1 × (1, if 0 = 0; else 0 × ((Y G) (0−1)))))) 4 × (3 × (2 × (1 × (1)))) 24 Every recursively defined function can be seen as a fixed point of some suitably defined function closing over the recursive call with an extra argument, and therefore, using Y, every recursively defined function can be expressed as a lambda expression. In particular, we can now cleanly define the subtraction, multiplication and comparison predicate of natural numbers recursively. [ Standard terms ] Certain terms have commonly accepted names: [ I ] [ K ] [ S ] [ omega ] [ Omega ] [ Y ] I := λx.x K := λx.λy.x S := λx.λy.λz.x z (y z) ω := λx.x x Ω := ω ω Y := λg.(λx.g (x x)) (λx.g (x x)) [ Typed lambda calculi ] [ from typed lambda calculus August 2009 ] [ Computable functions and lambda calculus ] A function F: N → N of natural number s is a computable function if and only if there exists a lambda expression f such that for every pair of x, y in N, F(x)=y if and only if f x  = β   y,   where x and y are the Church numerals corresponding to x and y, respectively and = β meaning equivalence with beta reduction. This is one of the many ways to define computability; see the Church-Turing thesis for a discussion of other approaches and their equivalence. [ Undecidability of equivalence ] There is no algorithm that takes as input two lambda expressions and outputs TRUE or FALSE depending on whether or not the two expressions are equivalent. This was historically the first problem for which undecidability could be proven. As is common for a proof of undecidability, the proof shows that no computable function can decide the equivalence. Church&apos;s thesis is then invoked to show that no algorithm can do so. Church&apos;s proof first reduces the problem to determining whether a given lambda expression has a normal form. A normal form is an equivalent expression that cannot be reduced any further under the rules imposed by the form. Then he assumes that this predicate is computable, and can hence be expressed in lambda calculus. Building on earlier work by Kleene and constructing a Gödel numbering for lambda expressions, he constructs a lambda expression e that closely follows the proof of Gödel&apos;s first incompleteness theorem. If e is applied to its own Gödel number, a contradiction results. [ Lambda calculus and programming languages ] As pointed out by Peter Landin &apos;s 1965 paper A Correspondence between ALGOL 60 and Church&apos;s Lambda-notation, sequential procedural programming languages can be understood in terms of the lambda calculus, which provides the basic mechanisms for procedural abstraction and procedure (subprogram) application. Lambda calculus reifies &quot; functions &quot; and makes them first-class object s, which raises implementation complexity when it is implemented. [ First-class functions ] [ First-class function and Anonymous function ] For example in Lisp the &apos;square&apos; function can be expressed as a lambda expression as follows: (lambda (x) (* x x)) or the same expressed in Haskell : \x - &gt; x*x -- where the \ denotes the greek λ The above example is an expression that evaluates to a first-class function. The symbol lambda creates an anonymous function, given a list of parameter names, (x) — just a single argument in this case, and an expression that is evaluated as the body of the function, (* x x). The Haskell example is identical. Anonymous functions are sometimes called lambda expressions. For example Pascal and many other imperative languages have long supported passing subprograms as arguments to other subprograms through the mechanism of function pointers. However, function pointers are not sufficient condition for functions to be first class datatype because if and only if new instances of a function can be created at run time, the functions are first class datatype. And this run-time creation of functions is supported in C++, Smalltalk, and more recently in Scala, Eiffel ( &quot; agents &quot; ) and C# ( &quot; delegates &quot; ), among others. Below is an example expressed as the Eiffel &quot; inline agent &quot; agent (x: REAL): REAL do Result := x * x end The object corresponds to the lambda expression λx.x*x (with call by value) because it can be assigned to a variable or passed around to routines, i.e. treated like any other expression. A Python example of this uses the lambda form of functions: func = lambda x: x * x This creates a new anonymous function and names it func that can be passed to other functions, stored in variables, etc. Python can also treat any other function created with the standard def statement as first-class object s. The same holds for Smalltalk expression [ :x | x * x ] This is first-class object (block closure), which can be stored in variables, passed as arguments, etc. A similar expression using C++11 anonymous function, but specifically for integers, is: [] (int i) - &gt; int { return i * i; } In JavaScript since version 1.8, the notation: function(x) x*x; is used. In older versions function(x) { return x*x; } In Scala : (x:Int) = &gt; x*x In F# : (fun x - &gt; x * x) In D : x = &gt; x * x // when parameter type can be inferred(int x) = &gt; x * x // when parameter type must be specified [ Reduction strategies ] [ Evaluation strategy ] Whether a term is normalising or not, and how much work needs to be done in normalising it if it is, depends to a large extent on the reduction strategy used. The distinction between reduction strategies relates to the distinction in functional programming languages between eager evaluation and lazy evaluation. Full beta reductions Any redex can be reduced at any time. This means essentially the lack of any particular reduction strategy—with regard to reducibility, &quot; all bets are off &quot;. Applicative order The rightmost, innermost redex is always reduced first. Intuitively this means a function&apos;s arguments are always reduced before the function itself. Applicative order always attempts to apply functions to normal forms, even when this is not possible. Most programming languages (including Lisp, ML and imperative languages like C and Java ) are described as &quot; strict &quot;, meaning that functions applied to non-normalising arguments are non-normalising. This is done essentially using applicative order, call by value reduction ( see below ), but usually called &quot; eager evaluation &quot;. Normal order The leftmost, outermost redex is always reduced first. That is, whenever possible the arguments are substituted into the body of an abstraction before the arguments are reduced. Call by name As normal order, but no reductions are performed inside abstractions. For example λx.(λx.x)x is in normal form according to this strategy, although it contains the redex (λx.x)x. Call by value Only the outermost redexes are reduced: a redex is reduced only when its right hand side has reduced to a value (variable or lambda abstraction). Call by need As normal order, but function applications that would duplicate terms instead name the argument, which is then reduced only &quot; when it is needed &quot;. Called in practical contexts &quot; lazy evaluation &quot;. In implementations this &quot; name &quot; takes the form of a pointer, with the redex represented by a thunk. Applicative order is not a normalising strategy. The usual counterexample is as follows: define Ω = ωω where ω = λx.xx. This entire expression contains only one redex, namely the whole expression; its reduct is again Ω. Since this is the only available reduction, Ω has no normal form (under any evaluation strategy). Using applicative order, the expression KIΩ = (λx.λy.x) (λx.x)Ω is reduced by first reducing Ω to normal form (since it is the rightmost redex), but since Ω has no normal form, applicative order fails to find a normal form for KIΩ. In contrast, normal order is so called because it always finds a normalising reduction, if one exists. In the above example, KIΩ reduces under normal order to I, a normal form. A drawback is that redexes in the arguments may be copied, resulting in duplicated computation (for example, (λx.xx) ((λx.x)y) reduces to ((λx.x)y) ((λx.x)y) using this strategy; now there are two redexes, so full evaluation needs two more steps, but if the argument had been reduced first, there would now be none). The positive tradeoff of using applicative order is that it does not cause unnecessary computation, if all arguments are used, because it never substitutes arguments containing redexes and hence never needs to copy them (which would duplicate work). In the above example, in applicative order (λx.xx) ((λx.x)y) reduces first to (λx.xx)y and then to the normal order yy, taking two steps instead of three. Most purely functional programming languages (notably Miranda and its descendents, including Haskell ), and the proof languages of theorem prover s, use lazy evaluation, which is essentially the same as call by need. This is like normal order reduction, but call by need manages to avoid the duplication of work inherent in normal order reduction using sharing. In the example given above, (λx.xx) ((λx.x)y) reduces to ((λx.x)y) ((λx.x)y), which has two redexes, but in call by need they are represented using the same object rather than copied, so when one is reduced the other is too. [ A note about complexity ] While the idea of beta reduction seems simple enough, it is not an atomic step, in that it must have a non-trivial cost when estimating computational complexity. { R. Statman, &quot; The typed &amp; lambda;-calculus is not elementary recursive. &quot; Theoretical Computer Science, (1979) 9 pp73-81. } To be precise, one must somehow find the location of all of the occurrences of the bound variable V in the expression E, implying a time cost, or one must keep track of these locations in some way, implying a space cost. A naïve search for the locations of V in E is &apos;&apos;O&apos;&apos;(&apos;&apos;n&apos;&apos;) in the length n of E. This has led to the study of systems that use explicit substitution. Sinot&apos;s director string s { F.-R. Sinot. &quot; Director Strings Revisited: A Generic Approach to the Efficient Representation of Free Variables in Higher-order Rewriting. &quot; Journal of Logic and Computation 15(2), pages 201-218, 2005. } offer a way of tracking the locations of free variables in expressions. [ Parallelism and concurrency ] The Church-Rosser property of the lambda calculus means that evaluation (β-reduction) can be carried out in any order, even in parallel. This means that various nondeterministic evaluation strategies are relevant. However, the lambda calculus does not offer any explicit constructs for parallelism. One can add constructs such as Futures to the lambda calculus. Other process calculi have been developed for describing communication and concurrency. [ Semantics ] The fact that lambda calculus terms act as functions on other lambda calculus terms, and even on themselves, led to questions about the semantics of the lambda calculus. Could a sensible meaning be assigned to lambda calculus terms? The natural semantics was to find a set D isomorphic to the function space D → D, of functions on itself. However, no nontrivial such D can exist, by cardinality constraints because the set of all functions from D into D has greater cardinality than D. In the 1970s, Dana Scott showed that, if only continuous functions were considered, a set or domain D with the required property could be found, thus providing a model for the lambda calculus. This work also formed the basis for the denotational semantics of programming languages. [ See also ] Applicative computing systems – Treatment of object s in the style of the lambda calculus Binary Lambda Calculus – A version of lambda calculus with binary I/O, a binary encoding of terms, and a designated universal machine. Calculus of constructions – A typed lambda calculus with type s as first-class values Cartesian closed category – A setting for lambda calculus in category theory Categorical abstract machine – A model of computation applicable to lambda calculus Combinatory logic – A notation for mathematical logic without variables Curry –Howard isomorphism – The formal correspondence between programs and proof s Domain theory – Study of certain posets giving denotational semantics for lambda calculus Evaluation strategy – Rules for the evaluation of expressions in programming language s Explicit substitution – The theory of substitution, as used in β-reduction Harrop formula – A kind of constructive logical formula such that proofs are lambda terms Kappa calculus – A first-order analogue of lambda calculus Kleene –Rosser paradox – A demonstration that some form of lambda calculus is inconsistent Knights of the Lambda Calculus – A semi-fictional organization of LISP and Scheme hacker s Lambda cube – A framework for some extensions of typed lambda calculus Lambda-mu calculus – An extension of the lambda calculus for treating classical logic Rewriting – Transformation of formulæ in formal systems SECD machine – A virtual machine designed for the lambda calculus Simply typed lambda calculus - Version(s) with a single type constructor SKI combinator calculus – A computational system based on the S, K and I combinators System F – A typed lambda calculus with type -variables Typed lambda calculus – Lambda calculus with typed variables (and functions) Universal Turing machine – A formal computing machine that is equivalent to lambda calculus Unlambda – An esoteric functional programming language based on combinatory logic [ References ] [ colwidth ] [ Further reading ] Abelson, Harold &amp; Gerald Jay Sussman. Structure and Interpretation of Computer Programs. The MIT Press. ISBN 0-262-51087-1. Hendrik Pieter Barendregt &apos;&apos;Introduction to Lambda Calculus&apos;&apos;. Henk Barendregt, The Impact of the Lambda Calculus in Logic and Computer Science. The Bulletin of Symbolic Logic, Volume 3, Number 2, June 1997. Barendregt, Hendrik Pieter, The Type Free Lambda Calculus pp1091–1132 of Handbook of Mathematical Logic, North-Holland (1977) ISBN 0-7204-2285-X Cardone and Hindley, 2006. History of Lambda-calculus and Combinatory Logic. In Gabbay and Woods (eds.), Handbook of the History of Logic, vol. 5. Elsevier. Church, Alonzo, An unsolvable problem of elementary number theory, American Journal of Mathematics, 58 (1936), pp.  345 –363. This paper contains the proof that the equivalence of lambda expressions is in general not decidable. Kleene, Stephen, A theory of positive integers in formal logic, American Journal of Mathematics, 57 (1935), pp.  153 –173 and 219 –244. Contains the lambda calculus definitions of several familiar functions. Landin, Peter, A Correspondence Between ALGOL 60 and Church&apos;s Lambda-Notation, Communications of the ACM, vol. 8, no. 2 (1965), pages 89–101. Available from the ACM site. A classic paper highlighting the importance of lambda calculus as a basis for programming languages. Larson, Jim, &apos;&apos;An Introduction to Lambda Calculus and Scheme&apos;&apos;. A gentle introduction for programmers. Schalk, A. and Simmons, H. (2005) &apos;&apos; An introduction to λ-calculi and arithmetic with a decent selection of exercises. Notes for a course in the Mathematical Logic MSc at Manchester University. de Queiroz, Ruy J.G.B. (2008) &apos;&apos;On Reduction Rules, Meaning-as-Use and Proof-Theoretic Semantics&apos;&apos;. Studia Logica, 90(2):211-247. A paper giving a formal underpinning to the idea of ‘meaning-is-use’ which, even if based on proofs, it is different from proof-theoretic semantics as in the Dummett–Prawitz tradition since it takes reduction as the rules giving meaning. Monographs/textbooks for graduate students: [ Pierce Benjamin Types and Programming Languages MIT Press 2002 0-262-16209-1 ] Morten Heine Sørensen, Paweł Urzyczyn, Lectures on the Curry-Howard isomorphism, Elsevier, 2006, ISBN 0-444-52077-5 is a recent monograph that covers the main topics of lambda calculus from the type-free variety, to most typed lambda calculi, including more recent developments like pure type system s and the lambda cube. It does not cover subtyping extensions. covers lambda calculi from a practical type system perspective; some topics like dependent types are only mentioned, but subtyping is an important topic. Some parts of this article are based on material from FOLDOC, used with permission. [ External links ] [ 2788 Lambda Calculus ] Achim Jung, A Short Introduction to the Lambda Calculus -( PDF ) David C. Keenan, To Dissect a Mockingbird: A Graphical Notation for the Lambda Calculus with Animated Reduction Raúl Rojas, A Tutorial Introduction to the Lambda Calculus -( PDF ) Peter Selinger, Lecture Notes on the Lambda Calculus -( PDF ) L. Allison, Some executable λ-calculus examples Georg P. Loczewski, &apos;&apos;The Lambda Calculus and A++&apos;&apos; Bret Victor, Alligator Eggs: A Puzzle Game Based on Lambda Calculus Lambda Calculus on Safalra’s Website LCI Lambda Interpreter a simple yet powerful pure calculus interpreter Lambda Calculus links on Lambda-the-Ultimate Mike Thyer, Lambda Animator, a graphical Java applet demonstrating alternative reduction strategies. An Introduction to Lambda Calculus and Scheme, by Jim Larson { Category:1936 in computer science } Category:American inventions Category:Articles with example code Category:Computability theory Category:Formal methods Category:Models of computation Category:Theoretical computer science { ar:حسابات اللامدا } bn:ল্যাম্‌ডা ক্যালকুলাস bs:Lambda račun ca:Càlcul lambda cs:Lambda kalkul de:Lambda-Kalkül el:Λογισμός λάμδα es:Cálculo lambda eo:Lambda-kalkulo fr:Lambda-calcul ko:람다 대수 hr:Lambda račun is:Lambda-reikningur it:Lambda calcolo he:תחשיב למדא hu:Lambda-kalkulus nl:Lambdacalculus ja:ラムダ計算 pl:Rachunek lambda pt:Cálculo lambda ru:Лямбда-исчисление simple:Lambda calculus sk:Lambda kalkul sh:Lambda račun fi:Lambdakalkyyli sv:Lambdakalkyl ta:லாம்டா நுண்கணிதம் uk:Лямбда-числення vi:Phép tính lambda zh:Λ演算