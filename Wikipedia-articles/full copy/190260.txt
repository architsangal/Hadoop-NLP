[ OpenDocument ] [ OpenDoc Apple Computer 1.2.1 1997 Mac OS, OS/2 compound document framework ] OpenDoc was a multi-platform software componentry framework standard for compound document s, intended as an alternative to Microsoft &apos;s Object Linking and Embedding (OLE). [ http://www.wohl.com/g0014.htm Apple and WordPerfect Announce OpenDoc Amy D. Wohl June 1993 Amy D. Wohl&apos; Opinions 2007-04-24 http://web.archive.org/web/20061109195319/http%3A//www.wohl.com/g0014.htm 2006-11-09 ] The basic idea of OpenDoc was to create small, reusable components, responsible for a specific task, such as text editing, bitmap editing or browsing an FTP server. OpenDoc provided a framework in which these components could run together, and a document format for storing the data created by each component. These documents could then be opened on other machines, where the OpenDoc frameworks would substitute suitable components for each part, even if they were from different vendors. [ http://www.byte.com/art/9403/sec9/art1.htm A Close-Up of OpenDoc Kurt Piersol March 1994 Byte.com 2007-04-24 ] In this way users could &quot; build up &quot; their documents from parts. Since there was no main application and the only visible interface was the document itself, the system was known as document centered. [ http://gregmaletic.wordpress.com/2006/11/12/opendoc/ OpenDoc Greg Maletic November 12, 2006 Greg Maletic’s Blog 2007-04-24 ] It was envisioned that OpenDoc would allow smaller, third-party developers to enter the office software market, able to build one good editor instead of having to provide a complete suite. [ Early history ] OpenDoc was initially created by Apple Computer in 1992 after Microsoft approached Apple asking for input on a proposed OLE II project. Apple had been experimenting with software components internally for some time, based on the initial work done on its Publish and Subscribe linking model and the AppleScript scripting language, which in turn was based on the HyperCard programming environment. Apple reviewed the Microsoft prototype and document and returned a list of problems they saw with the design. Microsoft and Apple, who were highly competitive at the time, were unable to agree on common goals and did not work together. At about the same time, a group of third-party developers had met at the Apple Worldwide Developers Conference (WWDC &apos;91) and tried to hammer out a standardized document format, based conceptually on the Amiga &apos;s Interchange File Format (IFF). Apple became interested in this work, and soon dedicated some engineers to the task of building, or at least documenting, such a system. Initial work was published on the WWDC CDs, as well as a number of follow-up versions on later developer CDs. A component document system would only work with a known document format that all the components could use, and so soon the standardized document format was pulled into the component software effort. From then it quickly changed from a simple format using tags to a very complex object oriented persistence layer called Bento. Initially the effort was codenamed &quot; Exemplar &quot;, then &quot; Jedi &quot; and &quot; Amber &quot;, then released under the name &quot; OpenDoc &quot;. The development team realized in mid-1992 that an industry coalition was needed to promote the system, and created the Component Integration Laboratories ( &quot; CI Labs &quot; ) with IBM and WordPerfect. IBM introduced the System Object Model (SOM) shared library system to the project, which became a major part of Apple&apos;s future efforts. In 1996 the project was adopted by the Object Management Group, in part due to SOM&apos;s use of Common Object Request Broker Architecture (CORBA), maintained by the OMG. Kurt Piersol from Apple was the best-known architect of OpenDoc, but Jed Harris (later president of CI Labs) was just as critical to the early designs. Mark Ericson from WordPerfect provided the vision for a port to Windows that included seamless interoperability between OpenDoc and OLE. OpenDoc was one of Apple&apos;s earliest experiments with open standards and collaborative development methods with other companies. Apple and its partners never released the source code, but did make the complete source available to developers for feedback and for testing and debugging purposes. Apple was also involved in the Taligent project during some of this period, which offered somewhat similar functionality although based on very different underlying mechanisms. While OpenDoc was still being developed, Apple confused things greatly by suggesting that it should be used by people porting existing software only, and new projects should instead be based on Taligent since that would be the next OS. This plan died along with Taligent, leaving OpenDoc as the future of the Mac application base. [ Release ] OpenDoc was initially released to run on Mac OS System 7.5. From IBM ’s involvement in Taligent, there was an implementation of OpenDoc in OS/2 Warp 4. [ Products implementing OpenDoc ] The WAV word processor was a semi-successful OpenDoc word processor from Digital Harbor, the Numbers &amp; Charts package was a spreadsheet and 3D real-time charting solution from Adrenaline Software, the Cyberdog web browser was created by Apple as an OpenDoc application. The Nisus Writer software by Nisus incorporated OpenDoc, but its implementation was hopelessly buggy. Bare Bones Software tested the waters by making its BBEdit Lite freeware text editor available as an OpenDoc editor component. RagTime, a completely integrated office package with spreadsheet, publishing and image editing was ported to OpenDoc shortly before OpenDoc was cancelled. Apple&apos;s 1996 release of ClarisWorks 5.0 (the predecessor of AppleWorks ) was planned to support OpenDoc components, but this was dropped. [ Educational products ] Another OpenDoc container application, called &quot; Dock&apos;Em &quot;, was written by MetaMind Software under a grant from the National Science Foundation and commissioned by The Center for Research in Math and Science Education, headquartered at San Diego State University. The goal was to allow multimedia content to be included in documents describing curriculum. A number of physics simulation s were written by MetaMind Software and by Russian software firm Physicon ( OpenTeach ) as OpenDoc parts. [ http://gregmaletic.wordpress.com/2006/11/12/opendoc/#comment-368 OpenDoc - Comment by Arni McKinley Arni McKinley December 19, 2006 Greg Maletic’s Blog 2008-04-08 ] Physics curricula for high school and middle school used them as their focus. With the demise of OpenDoc, the simulations were rewritten as Java applet s and are still available from the Center under the title of &quot; The Constructing Physics Understanding (CPU) Project &quot; by Dr. Fred Goldberg. [ http://cpuproject.sdsu.edu/default.html Constructing Physics Understanding The CPU Project February 2001 San Diego State University 2008-04-09 ] Components of the E-Slate educational microworlds&apos; platform were originally implemented as OpenDoc parts in C++ on both MacOS and Windows, reimplemented later on (after the demise of OpenDoc) as Java applets and eventually as JavaBeans. [ Problems ] OpenDoc&apos;s flexibility came at a cost. OpenDoc components were invariably large and slow. For instance, opening a simple text editor part would often require 2 megabyte s of RAM or more, whereas the same editor written as a standalone application could be as small as 32 KB. This initial overhead became less important as the number of documents open increased, since the basic cost was for shared libraries which implemented the system, but it was large compared to entry level machines of the day. Many developers felt that the extra overhead was too large, and since the operating system did not include OpenDoc capability, the memory footprint of their OpenDoc based applications appeared unacceptably large. In absolute terms, the one-time library overhead was approximately 1 megabyte of RAM, at the time half of a low-end desktop computer&apos;s entire RAM complement. Another issue was that OpenDoc had little in common with most &quot; real world &quot; document formats, and so OpenDoc documents could really only be used by other OpenDoc machines. Although one would expect some effort to allow the system to export to other formats, this was often impractical because each component held its own data. For instance, it took significant effort for the system to be able to turn a text file with some pictures into a Microsoft Word document, both because the text editor had no idea what was in the embedded objects, and because the proprietary Microsoft format was undocumented and required reverse engineering. Another problem was the fact that each part saved its data within Bento (the former name of an OpenDoc compound document file format) in its own internal binary format, and it was very common to find one component could not open a document created by another, even though the internal data represented similar objects (spreadsheet data for instance). OpenDoc attempted to solve this problem by allowing developers to store multiple formats to represent the same document object. For instance, it was both possible and encouraged to store a common format like JPEG along with editable binary format, but in practice few developers followed this recommendation. This problem was not unique to OpenDoc, and in fact was also experienced by the Microsoft equivalent, Object Linking and Embedding (OLE). Indeed, many years later, XML documents which attempt to perform embedding of other XML formats also encounter similar issues. It also appears that OpenDoc was a victim of an oversold concept, that of compound documents. A few specific examples are common, for instance most word processor s and page layout programs include the ability to include graphics, and spreadsheet s are expected to handle charts. Yet beyond that it seems there aren&apos;t all that many other examples. But certainly the biggest problem with the project was that it was part of a very acrimonious competition between OpenDoc consortium members and Microsoft. The members of the OpenDoc alliance were all trying to obtain traction in a market rapidly being dominated by Microsoft Office. As the various partners all piled in their own pet technologies in hopes of making it an industry standard, OpenDoc grew increasingly unwieldy. At the same time, Microsoft used the synergy between the OS and applications divisions of the company to make it effectively mandatory that developers adopt the competing OLE technology. In order to obtain a Windows 95 compliance logo from Microsoft, one had to meet certain interoperability tests which were quite difficult to meet without adoption of OLE technology, even though the technology was largely only useful in integrating with Microsoft Office. OpenDoc was forced to create an interoperability layer in order to allow developers to even consider adoption, and this added a great technical burden to the project. [ Cancellation ] OpenDoc had several hundred developers signed up but the timing was poor. Apple was rapidly losing money at the time and many in the industry press expected the company to fail. Before long, OpenDoc was scrapped, with Steve Jobs noting that they &quot; put a bullet through [OpenDoc&apos;s] head &quot;, and most of the team was laid off in a big reduction in force in March 1997. [ http://news.com.com/2009-1001-278004.html Apple lays off thousands Dawn Kawamoto Anthony Lazarus March 14, 1997 CNET News.com 2007-04-24 ] [ http://techcrunch.com/2011/10/06/jobs-focus-is-about-saying-no/ Jobs:Focus Is About Saying, No Erick Schonfeld October 6, 2011 TechCrunch.com 2011-10-06 ] Other sources noted that Microsoft hired away three ClarisWorks developers who were responsible for OpenDoc integration into ClarisWorks. [ http://www.swiss.ai.mit.edu/~bob/clarisworks.php#oregon A Brief History of ClarisWorks : Oregon Bob Hearn 2003 Bob Hearn&apos;s website 2007-04-24 ] AppleShare IP Manager from versions 5.0 to 6.2 relied on OpenDoc, but AppleShare IP 6.3, the first Mac OS 9 compatible version (released in 1999), eliminated the reliance on OpenDoc. [ http://docs.info.apple.com/article.html?artnum%3D60659 AppleShare IP 6.3 Does Not Require OpenDoc Apple December 18, 2003 Apple Support 2007-04-24 ] Apple officially relinquished the last trademark on the name OpenDoc on June 11, 2005. [ See also ] Orphaned technology for similar fates Compound document for the idea in general Object Linking and Embedding for the Microsoft alternative KParts for a free alternative CORBA for the component standard below OpenDoc [ References ] [ External links ] Overview of OpenDoc (archived version) Last release of OpenDoc with mostly all sources (for education purpose only) Category:Apple Inc. software Category:IBM software de:OpenDoc it:OpenDoc ja:OpenDoc pl:OpenDoc