[ January 2012 ] A vector processor, or array processor, is a central processing unit (CPU) that implements an instruction set containing instructions that operate on one-dimensional array s of data called vectors. This is in contrast to a scalar processor, whose instructions operate on single data items. Although Intel processors and their clones were designed initially as scalar, new models contain an increasing number of specialized vector instructions such as those supplied by the Advanced Vector Extensions set. Vector processors first appeared in the 1970s, and formed the basis of most supercomputer s through the 1980s and into the 1990s. Improvements in scalar processors, particularly microprocessor s, resulted in the decline of traditional vector processors in supercomputers, and the appearance of vector processing techniques in mass market CPUs around the early 1990s. Today, most commodity CPUs implement architectures that feature instructions for some vector processing on multiple (vectorized) data sets, typically known as SIMD (Single Instruction, Multiple Data). Common examples include VIS, MMX, SSE, and AltiVec. Vector processing techniques are also found in video game console hardware and graphics accelerator s. In 2000, IBM, Toshiba and Sony collaborated to create the Cell processor, consisting of one scalar processor and eight vector processors, which found use in the Sony PlayStation 3 among other applications. Other CPU designs may include some multiple instructions for vector processing on multiple (vectorised) data sets, typically known as MIMD (Multiple Instruction, Multiple Data). Such designs are usually dedicated to a particular application and not commonly marketed for general purpose computing. [ History ] Vector processing development began in the early 1960s at Westinghouse in their Solomon project. Solomon&apos;s goal was to dramatically increase math performance by using a large number of simple math co-processors under the control of a single master CPU. The CPU fed a single common instruction to all of the arithmetic logic unit s (ALUs), one per &quot; cycle &quot;, but with a different data point for each one to work on. This allowed the Solomon machine to apply a single algorithm to a large data set, fed in the form of an array. In 1962, Westinghouse cancelled the project, but the effort was re-started at the University of Illinois as the ILLIAC IV. Their version of the design originally called for a 1 GFLOPS machine with 256 ALUs, but, when it was finally delivered in 1972, it had only 64 ALUs and could reach only 100 to 150 MFLOPS. Nevertheless it showed that the basic concept was sound, and, when used on data-intensive applications, such as computational fluid dynamics, the &quot; failed &quot; ILLIAC was the fastest machine in the world. The ILLIAC approach of using separate ALUs for each data element is not common to later designs, and is often referred to under a separate category, massively parallel computing. A computer for operations with functions was presented and developed by Kartsev in 1967. [ Malinovsky B.N. The history of computer technology in their faces (in Russian) Firm &quot; KIT &quot; Kiew 1995 ( see also here http://www.sigcis.org/files/SIGCISMC2010_001.pdf and english version here ) 5-7707-6131-8 ] The first successful implementation of vector processing appears to be the Control Data Corporation STAR-100 and the Texas Instruments Advanced Scientific Computer (ASC). The basic ASC (i.e., &quot; one pipe &quot; ) ALU used a pipeline architecture that supported both scalar and vector computations, with peak performance reaching approximately 20 MFLOPS, readily achieved when processing long vectors. Expanded ALU configurations supported &quot; two pipes &quot; or &quot; four pipes &quot; with a corresponding 2X or 4X performance gain. Memory bandwidth was sufficient to support these expanded modes. The STAR was otherwise slower than CDC&apos;s own supercomputers like the CDC 7600, but at data related tasks they could keep up while being much smaller and less expensive. However the machine also took considerable time decoding the vector instructions and getting ready to run the process, so it required very specific data sets to work on before it actually sped anything up. The vector technique was first fully exploited in 1976 by the famous Cray-1. Instead of leaving the data in memory like the STAR and ASC, the Cray design had eight &quot; vector registers, &quot; which held sixty-four 64-bit words each. The vector instructions were applied between registers, which is much faster than talking to main memory. The Cray design used pipeline parallelism to implement vector instructions rather than multiple ALUs.In addition the design had completely separate pipelines for different instructions, for example, addition/subtraction was implemented in different hardware than multiplication. This allowed a batch of vector instructions themselves to be pipelined, a technique they called vector chaining. The Cray-1 normally had a performance of about 80 MFLOPS, but with up to three chains running it could peak at 240 MFLOPS – a respectable number even as of 2002. { Cray J90 processor module with four scalar/vector processors } Other examples followed. Control Data Corporation tried to re-enter the high-end market again with its ETA-10 machine, but it sold poorly and they took that as an opportunity to leave the supercomputing field entirely. In the early and mid-1980s Japanese companies ( Fujitsu, Hitachi and Nippon Electric Corporation (NEC) introduced register-based vector machines similar to the Cray-1, typically being slightly faster and much smaller. Oregon -based Floating Point Systems (FPS) built add-on array processors for minicomputer s, later building their own minisupercomputer s. However Cray continued to be the performance leader, continually beating the competition with a series of machines that led to the Cray-2, Cray X-MP and Cray Y-MP. Since then, the supercomputer market has focused much more on massively parallel processing rather than better implementations of vector processors. However, recognising the benefits of vector processing IBM developed Virtual Vector Architecture for use in supercomputers coupling several scalar processors to act as a vector processor. Vector processing techniques have since been added to almost all modern CPU designs, although they are typically referred to as SIMD. In these implementations, the vector unit runs beside the main scalar CPU, and is fed data from vector instruction aware programs. [ Description ] In general terms, CPUs are able to manipulate one or two pieces of data at a time. For instance, most CPUs have an instruction that essentially says &quot; add A to B and put the result in C &quot;. The data for A, B and C could be —in theory at least —encoded directly into the instruction. However, in efficient implementation things are rarely that simple. The data is rarely sent in raw form, and is instead &quot; pointed to &quot; by passing in an address to a memory location that holds the data. Decoding this address and getting the data out of the memory takes some time. As CPU speeds have increased, this memory latency has historically become a large impediment to performance; see Memory wall. In order to reduce the amount of time this takes, most modern CPUs use a technique known as instruction pipelining in which the instructions pass through several sub-units in turn. The first sub-unit reads the address and decodes it, the next &quot; fetches &quot; the values at those addresses, and the next does the math itself. With pipelining the &quot; trick &quot; is to start decoding the next instruction even before the first has left the CPU, in the fashion of an assembly line, so the address decoder is constantly in use. Any particular instruction takes the same amount of time to complete, a time known as the latency, but the CPU can process an entire batch of operations much faster than if it did so one at a time. Vector processors take this concept one step further. Instead of pipelining just the instructions, they also pipeline the data itself. There are fed instructions that say not just to add A to B, but to add all of the numbers &quot; from here to here &quot; to all of the numbers &quot; from there to there &quot;. Instead of constantly having to decode instructions and then fetch the data needed to complete them, it reads a single instruction from memory, and &quot; knows &quot; that the next address will be one larger than the last. This allows for significant savings in decoding time. To illustrate what a difference this can make, consider the simple task of adding two groups of 10 numbers together. In a normal programming language you would write a &quot; loop &quot; that picked up each of the pairs of numbers in turn, and then added them. To the CPU, this would look something like this: { execute this loop 10 times } { read the next instruction and decode it } { fetch this number } { fetch that number } { add them } { put the result here } { end loop } But to a vector processor, this task looks considerably different: { read instruction and decode it } { fetch these 10 numbers } { fetch those 10 numbers } { add them } { put the results here } There are several savings inherent in this approach. For one, only two address translations are needed. Depending on the architecture, this can represent a significant savings by itself. Another saving is fetching and decoding the instruction itself, which has to be done only one time instead of ten. The code itself is also smaller, which can lead to more efficient memory use. But more than that, a vector processor may have multiple functional unit s adding those numbers in parallel. The checking of dependencies between those numbers is not required as a vector instruction specifies multiple independent operations. This simplifies the control logic required, and can improve performance by avoiding stalls. As mentioned earlier, the Cray implementations took this a step further, allowing several different types of operations to be carried out at the same time. Consider code that adds two numbers and then multiplies by a third; in the Cray, these would all be fetched at once, and both added and multiplied in a single operation. Using the pseudocode above, the Cray did: { read instruction and decode it } { fetch these 10 numbers } { fetch those 10 numbers } { fetch another 10 numbers } { add and multiply them } { put the results here } The math operations thus completed far faster overall, the limiting factor being the time required to fetch the data from memory. Not all problems can be attacked with this sort of solution. Adding these sorts of instructions necessarily adds complexity to the core CPU. That complexity typically makes other instructions run slower —i.e., whenever it is not adding up many numbers in a row. The more complex instructions also add to the complexity of the decoders, which might slow down the decoding of the more common instructions such as normal adding. In fact, vector processors work best only when there are large amounts of data to be worked on. For this reason, these sorts of CPUs were found primarily in supercomputer s, as the supercomputers themselves were, in general, found in places such as weather prediction centres and physics labs, where huge amounts of data are &quot; crunched &quot;. [ Real world example: vector instructions usage with the x86 architecture ] Shown below is an actual x86 architecture example for vector instruction usage with the SSE instruction set. The example multiplies two arrays of single precision floating point numbers. It&apos;s written in the C language with inline assembly code parts for compilation with GCC (32bit). //SSE simd function for vectorized multiplication of 2 arrays with single-precision floatingpoint numbers//1st param pointer on source/destination array, 2nd param 2. source array, 3rd param number of floats per array { void mul_asm(float* out, float* in, unsigned int leng) } { { unsigned int count, rest; } { //compute if array is big enough for vector operation } { rest = (leng*4)%16; } { count = (leng*4)-rest; } { // vectorized part; 4 floats per loop iteration } { if (count &gt; 0){ } { asm } { volatile__ ( &quot;.intel_syntax noprefix\n\t &quot; } { &quot; loop: \n\t &quot; } { &quot; movups xmm0,[ebx+ecx];loads 4 floats in first register (xmm0)\n\t &quot; } { &quot; movups xmm1,[eax+ecx];loads 4 floats in second register (xmm1)\n\t &quot; } { &quot; mulps xmm0,xmm1;multiplies both vector registers\n\t &quot; } { &quot; movups [eax+ecx],xmm0;write back the result to memory\n\t &quot; } { &quot; sub ecx,16;increase address pointer by 4 floats\n\t &quot; } { &quot; jnz loop \n\t &quot; } { &quot;.att_syntax prefix \n\t &quot; } { : : &quot; a &quot; (out), &quot; b &quot; (in), &quot; c &quot; (count), &quot; d &quot; (rest): &quot; xmm0 &quot;, &quot; xmm1 &quot; ); } { } } { // scalar part; 1 float per loop iteration } { if (rest!=0) } { { } { asm } { volatile__ ( &quot;.intel_syntax noprefix\n\t &quot; } { &quot; add eax,ecx \n\t &quot; } { &quot; add ebx,ecx \n\t &quot; } { &quot; rest: \n\t &quot; } { &quot; movss xmm0,[ebx+edx];load 1 float in first register (xmm0)\n\t &quot; } { &quot; movss xmm1,[eax+edx];load 1 float in second register (xmm1)\n\t &quot; } { &quot; mulss xmm0,xmm1;multiplies both scalar parts of registers\n\t &quot; } { &quot; movss [eax+edx],xmm0;write back the result\n\t &quot; } { &quot; sub edx,4 \n\t &quot; } { &quot; jnz rest \n\t &quot; } { &quot;.att_syntax prefix \n\t &quot; } { : : &quot; a &quot; (out), &quot; b &quot; (in), &quot; c &quot; (count), &quot; d &quot; (rest): &quot; xmm0 &quot;, &quot; xmm1 &quot; ); } { } } { return; } { } } [ Programming Heterogeneous Computing Architectures ] Various machines were designed to include both traditional processors and vector processors, such as the Fujitsu AP1000 and AP3000. Programming such heterogeneous machines can be difficult since developing programs that make best use of characteristics of different processors increases the programmer&apos;s burden. It increases code complexity and decreases portability of the code by requiring hardware specific code to be interleaved throughout application code. [ 10.1109/IPDPS.2011.377 ] Balancing the application workload across processors can be problematic, especially given that they typically have different performance characteristics. There are different conceptual models to deal with the problem, for example using a coordination language and program building blocks (programming libraries and/or higher order functions). Each block can have a different native implementation for each processor type. Users simply program using these abstractions and an intelligent compiler chooses the best implementation based on the context. [ John Darlinton, Moustafa Ghanem, Yike Guo, Hing Wing To 1996 Guided Resource Organisation in Heterogeneous Parallel Computing Journal of High Performance Computing 4 1 13–23 http://citeseerx.ist.psu.edu/viewdoc/summary?doi%3D10.1.1.37.4309 ] [ See also ] Stream processing SIMD Vectorization Chaining (vector processing) Computer for operations with functions [ References ] [ External links ] The History of the Development of Parallel Computing (from 1955 to 1993) Category:Parallel computing Category:Central processing unit ca:Processador vectorial cs:Vektorový procesor de:Vektorprozessor es:Procesador vectorial fa:پردازنده برداری fr:Processeur vectoriel ko:벡터 프로세서 id:Prosesor vektor it:Processore vettoriale nl:Array processor ja:ベクトル計算機 no:Vektorprosessor pl:Procesor wektorowy ru:Векторный процессор sk:Vektorový procesor uk:Векторний процесор zh:并行向量处理机