Bayesian spam filtering ( [ icon ˈ b eɪ z i ə n ] [ BAY zee-ən ]; after Rev. Thomas Bayes ) is a statistical technique of e-mail filtering. It makes use of a naive Bayes classifier to identify spam e-mail. Bayesian classifiers work by correlating the use of tokens (typically words, or sometimes other things), with spam and non-spam e-mails and then using Bayesian inference to calculate a probability that an email is or is not spam. Bayesian spam filtering is a very powerful technique for dealing with spam, that can tailor itself to the email needs of individual users, and gives low false positive spam detection rates that are generally acceptable to users. [ History ] The first known mail-filtering program to use a Bayes classifier was Jason Rennie&apos;s ifile program, released in 1996. The program was used to sort mail into folders. [ http://people.csail.mit.edu/jrennie/ifile/old/README-0.1A paper Jason Rennie ifile 1996 ] The first scholarly publication on Bayesian spam filtering was by Sahami et al. in 1998. [ http://robotics.stanford.edu/users/sahami/papers-dir/spam.pdf paper M. Sahami, S. Dumais, D. Heckerman, E. Horvitz A Bayesian approach to filtering junk e-mail AAAI&apos;98 Workshop on Learning for Text Categorization 1998 ] That work was soon thereafter deployed in commercial spam filters. [ September 2010 ] However, in 2002 Paul Graham was able to greatly improve the false positive rate, so that it could be used on its own as a single spam filter. { Paul Graham (2003), Better Bayesian filtering } { Brian Livingston (2002), Paul Graham provides stunning answer to spam e-mails } Variants of the basic technique have been implemented in a number of research works and commercial software products. [ http://kb.mozillazine.org/Junk_Mail_Controls paper author Junk Mail Controls MozillaZine November 2009 ] Many modern mail clients implement Bayesian spam filtering. Users can also install separate email filtering programs. Server-side email filters, such as DSPAM, SpamAssassin, [ Installation Ubuntu manuals Gary Robinson’s f(x) and combining algorithms, as used in SpamAssassin 2010-09-18 http://manpages.ubuntu.com/manpages/gutsy/man1/sa-learn.1p.html 2010-09-18 ] SpamBayes, [ Background Reading SpamBayes project Sharpen your pencils, this is the mathematical background (such as it is).* The paper that started the ball rolling: Paul Graham&apos;s A Plan for Spam.* Gary Robinson has an interesting essay suggesting some improvements to Graham&apos;s original approach.* Gary Robinson&apos;s Linux Journal article discussed using the chi squared distribution. 2010-09-18 http://spambayes.sourceforge.net/background.html 2010-09-18 ] Bogofilter and ASSP, make use of Bayesian spam filtering techniques, and the functionality is sometimes embedded within mail server software itself. [ Process ] Particular words have particular probabilities of occurring in spam email and in legitimate email. For instance, most email users will frequently encounter the word &quot; Viagra &quot; in spam email, but will seldom see it in other email. The filter doesn&apos;t know these probabilities in advance, and must first be trained so it can build them up. To train the filter, the user must manually indicate whether a new email is spam or not. For all words in each training email, the filter will adjust the probabilities that each word will appear in spam or legitimate email in its database. For instance, Bayesian spam filters will typically have learned a very high spam probability for the words &quot; Viagra &quot; and &quot; refinance &quot;, but a very low spam probability for words seen only in legitimate email, such as the names of friends and family members. After training, the word probabilities (also known as likelihood function s ) are used to compute the probability that an email with a particular set of words in it belongs to either category. Each word in the email contributes to the email&apos;s spam probability, or only the most interesting words. This contribution is called the posterior probability and is computed using Bayes&apos; theorem. Then, the email&apos;s spam probability is computed over all words in the email, and if the total exceeds a certain threshold (say 95%), the filter will mark the email as a spam. As in any other spam filtering technique, email marked as spam can then be automatically moved to a &quot; Junk &quot; email folder, or even deleted outright. Some software implement quarantine mechanisms that define a time frame during which the user is allowed to review the software&apos;s decision. The initial training can usually be refined when wrong judgements from the software are identified (false positives or false negatives). That allows the software to dynamically adapt to the ever evolving nature of spam. Some spam filters combine the results of both Bayesian spam filtering and other heuristics (pre-defined rules about the contents, looking at the message&apos;s envelope, etc.), resulting in even higher filtering accuracy, sometimes at the cost of adaptiveness. [ Mathematical foundation ] Bayesian email filter s take advantage of Bayes&apos; theorem. Bayes&apos; theorem is used several times in the context of spam: a first time, to compute the probability that the message is spam, knowing that a given word appears in this message; a second time, to compute the probability that the message is spam, taking into consideration all of its words (or a relevant subset of them); sometimes a third time, to deal with rare words. [ Computing the probability that a message containing a given word is spam ] Let&apos;s suppose the suspected message contains the word &quot; replica &quot;. Most people who are used to receiving e-mail know that this message is likely to be spam, more precisely a proposal to sell counterfeit copies of well-known brands of watches. The spam detection software, however, does not &quot; know &quot; such facts, all it can do is compute probabilities. The formula used by the software to determine that is derived from Bayes&apos; theorem \Pr(S|W) = \frac{\Pr(W|S) \cdot \Pr(S)}{\Pr(W|S) \cdot \Pr(S) + \Pr(W|H) \cdot \Pr(H)} where: \Pr(S|W) is the probability that a message is a spam, knowing that the word &quot; replica &quot; is in it; \Pr(S) is the overall probability that any given message is spam; \Pr(W|S) is the probability that the word &quot; replica &quot; appears in spam messages; \Pr(H) is the overall probability that any given message is not spam (is &quot; ham &quot; ); \Pr(W|H) is the probability that the word &quot; replica &quot; appears in ham messages. (Demonstration : see Bayes&apos; theorem#Alternative form ) [ The spamicity of a word ] Recent statistics [ http://eval.symantec.com/mktginfo/enterprise/other_resources/b-state_of_spam_report_09-2009.en-us.pdf Dylan Mors and Dermot Harnett State of Spam, a Monthly Report - Report #33 2009 ] show that the current probability of any message being spam is 80%, at the very least: \Pr(S) = 0.8; \Pr(H) = 0.2 However, most bayesian spam detection software makes the assumption that there is no a priori reason for any incoming message to be spam rather than ham, and considers both cases to have equal probabilities of 50%: \Pr(S) = 0.5; \Pr(H) = 0.5 The filters that use this hypothesis are said to be &quot; not biased &quot;, meaning that they have no prejudice regarding the incoming email. This assumption permits simplifying the general formula to: \Pr(S|W) = \frac{\Pr(W|S)}{\Pr(W|S) + \Pr(W|H)} This quantity is called &quot; spamicity &quot; (or &quot; spaminess &quot; ) of the word &quot; replica &quot;, and can be computed. The number \Pr(W|S) used in this formula is approximated to the frequency of messages containing &quot; replica &quot; in the messages identified as spam during the learning phase. Similarly, \Pr(W|H) is approximated to the frequency of messages containing &quot; replica &quot; in the messages identified as ham during the learning phase. For these approximations to make sense, the set of learned messages needs to be big and representative enough. { Trevor Stone (2003), Parametrization of Naïve Bayes for Spam Filtering } It is also advisable that the learned set of messages conforms to the 50% hypothesis about repartition between spam and ham, i.e. that the datasets of spam and ham are of same size. { Process Software, Introduction to Bayesian Filtering } Of course, determining whether a message is spam or ham based only on the presence of the word &quot; replica &quot; is error-prone, which is why bayesian spam software tries to consider several words and combine their spamicities to determine a message&apos;s overall probability of being spam. [ Combining individual probabilities ] The bayesian spam filtering software makes the &quot; naïve &quot; assumption that the words present in the message are independent events. That is wrong in natural languages like English, where the probability of finding an adjective, for example, is affected by the probability of having a noun. With that assumption, one can derive another formula from Bayes&apos; theorem: p = \frac{p_1 p_2 \cdots p_N}{p_1 p_2 \cdots p_N + (1 - p_1)(1 - p_2) \cdots (1 - p_N)} where: p is the probability that the suspect message is spam; p_1 is the probability p(S|W_1) that it is a spam knowing it contains a first word (for example &quot; replica &quot; ); p_2 is the probability p(S|W_2) that it is a spam knowing it contains a second word (for example &quot; watches &quot; ); etc... p_N is the probability p(S|W_N) that it is a spam knowing it contains an Nth word (for example &quot; home &quot; ). (Demonstration: [ http://www.mathpages.com/home/kmath267.htm paper Combining probabilities ] { at MathPages } ) Such assumptions make the spam filtering software a naive Bayes classifier. The result p is usually compared to a given threshold to decide whether the message is spam or not. If p is lower than the threshold, the message is considered as likely ham, otherwise it is considered as likely spam. [ Other expression of the formula for combining individual probabilities ] Usually p is not directly computed using the above formula due to floating-point underflow. Instead, p can be computed in the log domain by rewriting the original equation as follows: \frac{1}{p} - 1 = \frac{(1-p_1)(1-p_2)\dots(1-p_n)}{p_1 p_2 \dots p_n} Taking logs on both sides: \ln \left ( \frac{1}{p} - 1 \right ) = \sum_{i=1}^N \left[ \ln(1-p_i) - \ln p_i \right] Let \eta = \sum_{i=1}^N \left[ \ln(1-p_i) -\ln p_i \right]. Therefore, \frac{1}{p} - 1 = e^\eta Hence the alternate formula for computing the combined probability: p = \frac{1}{1 + e^\eta} [ Dealing with rare words ] In the case a word has never been met during the learning phase, both the numerator and the denominator are equal to zero, both in the general formula and in the spamicity formula. The software can decide to discard such words for which there is no information available. More generally, the words that were encountered only a few times during the learning phase cause a problem, because it would be an error to trust blindly the information they provide. A simple solution is to simply avoid taking such unreliable words into account as well. Applying again Bayes&apos; theorem, and assuming the classification between spam and ham of the emails containing a given word ( &quot; replica &quot; ) is a random variable with beta distribution, some programs decide to use a corrected probability: \Pr&apos;(S|W) = \frac{s \cdot \Pr(S) + n \cdot \Pr(S|W)}{s + n } where: \Pr&apos;(S|W) is the corrected probability for the message to be spam, knowing that it contains a given word; s is the strength we give to background information about incoming spam; \Pr(S) is the probability of any incoming message to be spam; n is the number of occurrences of this word during the learning phase; \Pr(S|W) is the spamicity of this word. (Demonstration: [ http://www.linuxjournal.com/article/6467 Linux Journal Gary Robinson A statistical approach to the spam problem 2003 ] ) This corrected probability is used instead of the spamicity in the combining formula. \Pr(S) can again be taken equal to 0.5, to avoid being too suspicious about incoming email. 3 is a good value for s, meaning that the learned corpus must contain more than 3 messages with that word to put more confidence in the spamicity value than in the default value. This formula can be extended to the case where n is equal to zero (and where the spamicity is not defined), and evaluates in this case to Pr(S). [ Other heuristics ] &quot; Neutral &quot; words like &quot; the &quot;, &quot; a &quot;, &quot; some &quot;, or &quot; is &quot; (in English), or their equivalents in other languages, can be ignored. More generally, some bayesian filtering filters simply ignore all the words which have a spamicity next to 0.5, as they bring little to a good decision. The words taken into consideration are those whose spamicity is next to 0.0 (distinctive signs of legitimate messages), or next to 1.0 (distinctive signs of spam). A method can be for example to keep only those ten words, in the examined message, which have the greatest absolute value  |0.5   &amp; minus;  pI|. Some software products take into account the fact that a given word appears several times in the examined message, [ http://spamprobe.sourceforge.net/paper.html paper Brian Burton SpamProbe - Bayesian Spam Filtering Tweaks 2003 ] others don&apos;t. Some software products use patterns (sequences of words) instead of isolated natural languages words. [ http://bnr.nuclearelephant.com/l paper Jonathan A. Zdziarski Bayesian Noise Reduction: Contextual Symmetry Logic Utilizing Pattern Consistency Analysis 2004 ] For example, with a &quot; context window &quot; of four words, they compute the spamicity of &quot; Viagra is good for &quot;, instead of computing the spamicities of &quot; Viagra &quot;, &quot; is &quot;, &quot; good &quot;, and &quot; for &quot;. This method gives more sensitivity to context and eliminates the Bayesian noise better, at the expense of a bigger database. [ Mixed methods ] There are other ways of combining individual probabilities for different words than using the &quot; naive &quot; approach. These methods differ from it on the assumptions they make on the statistical properties of the input data. These different hypotheses result in radically different formulas for combining the individual probabilities. For example, assuming the individual probabilities follow a chi-squared distribution with 2N degrees of freedom, one could use the formula: p = C^{-1}(-2 \ln(p_1 p_2 \cdots p_N), 2N) \, where C &amp; minus;1 is the inverse of the chi-squared function. Individual probabilities can be combined with the techniques of the Markovian discrimination too. [ Discussion ] [ Advantages ] One of the main advantages of Bayesian spam filtering is that it can be trained on a per-user basis. The spam that a user receives is often related to the online user&apos;s activities. For example, a user may have been subscribed to an online newsletter that the user considers to be spam. This online newsletter is likely to contain words that are common to all newsletters, such as the name of the newsletter and its originating email address. A Bayesian spam filter will eventually assign a higher probability based on the user&apos;s specific patterns. The legitimate e-mails a user receives will tend to be different. For example, in a corporate environment, the company name and the names of clients or customers will be mentioned often. The filter will assign a lower spam probability to emails containing those names. The word probabilities are unique to each user and can evolve over time with corrective training whenever the filter incorrectly classifies an email. As a result, Bayesian spam filtering accuracy after training is often superior to pre-defined rules. It can perform particularly well in avoiding false positives, where legitimate email is incorrectly classified as spam. For example, if the email contains the word &quot; Nigeria &quot;, which is frequently used in Advance fee fraud spam, a pre-defined rules filter might reject it outright. A Bayesian filter would mark the word &quot; Nigeria &quot; as a probable spam word, but would take into account other important words that usually indicate legitimate e-mail. For example, the name of a spouse may strongly indicate the e-mail is not spam, which could overcome the use of the word &quot; Nigeria. &quot; [ Disadvantages ] Depending on the implementation, Bayesian spam filtering may be susceptible to Bayesian poisoning, a technique used by spammers in an attempt to degrade the effectiveness of spam filters that rely on Bayesian filtering. A spammer practicing Bayesian poisoning will send out emails with large amounts of legitimate text (gathered from legitimate news or literary sources). Spammer tactics include insertion of random innocuous words that are not normally associated with spam, thereby decreasing the email&apos;s spam score, making it more likely to slip past a Bayesian spam filter. However with (for example) Paul Graham&apos;s scheme only the most significant probabilities are used, so that padding the text out with non-spam-related words does not affect the detection probability significantly. Words that normally appear in large quantities in spam may also be transformed by spammers. For example, « Viagra » would be replaced with « Viaagra » or « V!agra » in the spam message. The recipient of the message can still read the changed words, but each of these words is met more rarely by the bayesian filter, which hinders its learning process. As a general rule, this spamming technique does not work very well, because the derived words end up recognized by the filter just like the normal ones. { Paul Graham (2002), A Plan for Spam }. Another technique used to try to defeat Bayesian spam filters is to replace text with pictures, either directly included or linked. The whole text of the message, or some part of it, is replaced with a picture where the same text is &quot; drawn &quot;. The spam filter is usually unable to analyze this picture, which would contain the sensitive words like &quot; Viagra &quot;. However, since many mail clients disable the display of linked pictures for security reasons, the spammer sending links to distant pictures might reach fewer targets. Also, a picture&apos;s size in bytes is bigger than the equivalent text&apos;s size, so the spammer needs more bandwidth to send messages directly including pictures. Some filters are more inclined to decide that a message is spam if it has mostly graphical contents. Finally, a probably more efficient solution has been proposed by Google and is used by its Gmail email system, performing an OCR (Optical Character Recognition) to every mid to large size image, analyzing the text inside. [ http://www.google.com/mail/help/fightspam/spamexplained.html Gmail uses Google&apos;s innovative technology to keep spam out of your inbox ] [ General applications of Bayesian filtering ] While Bayesian filtering is used widely to identify spam email, the technique can classify (or &quot; cluster &quot; ) almost any sort of data. It has uses in science, medicine, and engineering. One example is a general purpose classification program called AutoClass which was originally used to classify stars according to spectral characteristics that were otherwise too subtle to notice. There is recent speculation that even the brain uses Bayesian methods to classify sensory stimuli and decide on behavioral responses. { Trends in Neuroscience, 27(12):712-9, 2004 (pdf) } [ See also ] Bayesian poisoning Bayesian inference Bayes&apos;s theorem Email filtering Markovian discrimination Naive Bayes classifier Recursive Bayesian estimation Stopping e-mail abuse [ References ] [ External links ] Guide to Bayesian spam filters: part 1, part 2. Detailed explanation of Paul Graham&apos;s formulas by Tim Peters Gary Robinson&apos;s spam blog Category:Applications of Bayesian inference Category:Estimation theory Category:Spam filtering de:Bayessches Filter fa:فیلترینگ اسپم بیزی fr:Filtrage bayésien du spam it:Filtro bayesiano ja:ベイジアンフィルタ pt:Filtro bayesiano ru:Байесовская фильтрация спама fi:Bayesilainen roskapostisuodatus sv:Bayesiskt skräppostfilter zh:貝葉斯垃圾郵件過濾