Cg (short for C for Graphics) is a high-level shading language developed by Nvidia in close collaboration with Microsoft { Cg and HLSL FAQ } { http://www.creativepro.com/story/news/18489.html } for programming vertex and pixel shaders. It is very similar to Microsoft &apos;s HLSL. Cg is based on the C programming language and although they share the same syntax, some features of C were modified and new data types were added to make Cg more suitable for programming graphics processing unit s. This language is only suitable for GPU programming and is not a general programming language. The Cg compiler outputs DirectX or OpenGL shader programs. [ Background ] Due to technical advances in graphics hardware, some areas of 3D graphics programming have become quite complex. To simplify the process, new features were added to graphics cards, including the ability to modify their rendering pipelines using vertex and pixel shaders. In the beginning, vertex and pixel shaders were programmed at a very low level with only the assembly language of the graphics processing unit. Although using the assembly language gave the programmer complete control over code and flexibility, it was fairly hard to use. A portable, higher level language for programming the GPU was needed, so Cg was created to overcome these problems and make shader development easier. Some of the benefits of using Cg over assembly are: High level code is easier to learn, program, read, and understand than assembly code. Cg code is portable to a wide range of hardware and platforms, unlike assembly code, which usually depends on hardware and the platforms it&apos;s written for. The Cg compiler can optimize code and do lower level tasks automatically, which are hard to do and error prone in assembly. [ Details ] [ Data types ] Cg has six basic data types. Some of them are the same as in C, while others are especially added for GPU programming. These types are: float - a 32bit floating point number half - a 16bit floating point number int - a 32bit integer fixed - a 12bit fixed point number bool - a boolean variable sampler* - represents a texture object Cg also features vector and matrix data types that are based on the basic data types, such as float3 and float4x4. Such data types are quite common when dealing with 3D graphics programming. Cg also has struct and array data types, which work in a similar way to their C equivalents. [ Operators ] Cg supports a wide range of operators, including the common arithmetic operators from C, the equivalent arithmetic operators for vector and matrix data types, and the common logical operator s. [ Functions and control structures ] Cg shares the basic control structures with C, like if/else, while, and for. It also has a similar way of defining functions. [ The standard Cg library ] As in C, Cg features a set of functions for common tasks in GPU programming. Some of the functions have equivalents in C, like the mathematical functions abs and sin, while others are specialized in GPU programming tasks, like the texture mapping functions tex1D and tex2D. [ The Cg runtime library ] Cg programs are merely vertex and pixel shaders, and they need supporting programs that handle the rest of the rendering process. Cg can be used with two API s : OpenGL or DirectX. Each has its own set of Cg functions to communicate with the Cg program, like setting the current Cg shader, passing parameters, and such tasks. In addition to being able to compile Cg source to assembly code, the Cg runtime also has the ability to compile shaders during execution of the supporting program. This allows the runtime to compile the shader using the latest optimizations available for hardware that the program is currently executing on. However, this technique requires that the source code for the shader be available in plain text to the compiler, allowing the user of the program to access the source-code for the shader. Some developers view this as a major drawback of this technique. To avoid exposing the source code of the shader, and still maintain some of the hardware specific optimizations, the concept of profiles was developed. Shaders can be compiled to suit different graphics hardware platforms (according to profiles). When executing the supporting program, the best/most optimized shader is loaded according to its profile. For instance there might be a profile for a graphics card that supports complex pixel shaders, and another profile for one that supports only minimal pixel shaders. By creating a pixel shader for each of these profiles a supporting program enlarges the number of supported hardware platforms without sacrificing picture quality on powerful systems. [ A sample Cg vertex shader ] { // input vertex } { struct VertIn { } { float4 pos : POSITION; } { float4 color : COLOR0; } { }; } { // output vertex } { struct VertOut { } { float4 pos : POSITION; } { float4 color : COLOR0; } { }; } { // vertex shader main entry } { VertOut main(VertIn IN, uniform float4x4 modelViewProj) { } { VertOut OUT; } { OUT.pos = mul(modelViewProj, IN.pos); // calculate output coords } { OUT.color = IN.color; // copy input color to output } { OUT.color.z = 1.0f; // blue component of color = 1.0f } { return OUT; } { } } [ Applications and games that use Cg ] Cafu Engine Crystal Space EON Professional/Ultra Far Cry GLScene Lightfeather OGRE Panda3d Unity game engine Virtools Dev Battlefield 2 Enemy Territory: Quake Wars Earths Special Forces - A Half-Life Mod Hitman: Blood Money R.U.S.E Racer dolphin-emu muvee Reveal Eyeon Fusion Garshasp [ See also ] Computer programming Computer graphics Vertex and pixel shaders High level shader language OpenGL shading language Shader Model OpenGL DirectX [ References ] [ Further reading ] Randima Fernando, Mark J. Kilgard, The Cg Tutorial: The Definitive Guide to Programmable Real-Time Graphics, Addison-Wesley Professional, ISBN 0-321-19496-9 Randima Fernando, GPU Gems: Programming Techniques, Tips, and Tricks for Real-Time Graphics, Addison-Wesley Professional, ISBN 0-321-22832-4 William R. Mark, R. Steven Glanville, Kurt Akeley, Mark J. Kilgard, &apos;&apos;Cg: A System for Programming Graphics Hardware in a C-like Language&apos;&apos;, Proceedings of SIGGRAPH 2003. Mark J. Kilgard, &apos;&apos;Cg in Two Pages&apos;&apos;, 2003. [ External links ] Cg Tutorial (Free Book) Cg language, runtime, profile, standard library, CgFX state and command documentation. Cg FAQ Cg home page Developer Forums { OpenGL home page } { DirectX home page } { ShaderTech - GPU Programming } { NeHe Cg vertex shader tutorial } Category:C programming language family Category:Shading languages cs:Cg (programovací jazyk) de:C for graphics es:Cg (lenguaje de programación) fr:Cg (langage) ko:Cg (프로그래밍 언어) ms:Bahasa pengaturcaraan Cg ja:Cg (プログラミング言語) pl:Cg (język programowania) pt:C for Graphics tr:Cg zh:Cg語言