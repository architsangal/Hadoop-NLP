[ rc file Microsoft Windows resource scripts Resource (Windows) ] { GNU GRUB being modified with } { gedit. This file contains a list of } { Operating System s, which } { GNU GRUB reads and presents to the user as a menu. } In computing, configuration file s, or config files configure the initial settings for some computer program s. They are used for user applications, server processes and operating system settings. The files are often written in ASCII (rarely UTF-8 ) and line-oriented, with lines terminated by a newline or carriage return / line feed pair, depending on the operating system. They may be considered a simple database. Some applications provide tools to create, modify, and verify the syntax of their configuration files; these sometimes have graphical interfaces. For other programs, system administrators may be expected to create and modify files by hand using a text editor. For server processes and operating-system settings, there is often no standard tool, but operating systems may provide their own graphical interfaces such as YaST or debconf. Some computer programs only read their configuration files at startup. Others periodically check the configuration files for changes. Users can instruct some programs to re-read the configuration files and apply the changes to the current process, or indeed to read arbitrary files as a configuration file. There are no definitive standards or strong conventions. [ UNIX/Linux ] Across the Unix variants hundreds of configuration-file formats exist. Each application or service may have a unique format. Historically, Unix operating system settings were often modified only by editing configuration files. Almost all formats allow entries to be disabled by prepending a special comment character, turning that entry into a comment. The configuration files on Unix-type operating systems are traditionally documented using manpage s, though other forms of online help are also used. In many cases the default configuration files distributed with a program contain extensive internal documentation in the form of comments. It is rare for a file to be completely undocumented, except in cases where a graphical configuration tool is the preferred method of configuring a program. Unix user applications often create a file or directory in the home directory of the user upon startup. To hide the file or directory from casual listing of the contents of the home directory, the name of the file or directory is prepended with a period, giving rise to the nickname &quot; dotfile &quot; or &quot; dot file &quot;. Server processes often use configuration files stored in /etc, but they may also use their installation directory or a location defined by the system administrator. Configuration files also do more than just modify settings, they often (in the form of an &quot; rc file &quot; ) run a set of commands upon startup (for example, the &quot; rc file &quot; for a shell might instruct the shell to change directories, run certain programs, delete or create files —- many things which do not involve modifying variables in the shell itself and so were not in the shell&apos;s dotfiles); according to the Jargon File, this convention is borrowed from &quot; runcom files &quot; on the CTSS operating system; [ http://www.catb.org/jargon/html/R/rc-file.html rc file Catb.org 2012-02-29 ] see run commands for details. This functionality can and has been extended for programs written in interpreted language s such that the configuration file is actually another program rewriting or extending or customizing the original program; Emacs is the most prominent such example. The &quot; rc &quot; naming convention of &quot; rc files &quot; was inspired by the &quot; runcom &quot; facility mentioned above and does not stand for &quot; resource configuration &quot; or &quot; runtime configuration &quot; as is often wrongly guessed. &quot; rc &quot; files are traditionally files which end in the &quot;.rc &quot; suffix and which contain data and information that is used as configuration information for the associated program. Typically the name of that program is the first part of the rc file&apos;s name, with the &quot;.rc &quot; suffix being used to indicate the file&apos;s purpose. On UNIX variants dot files remain &quot; hidden &quot; from listing by default. On Mac OS X these files are sometimes called &quot; hidden file s &quot; although other mechanisms exist on Mac OS X to hide a file from view in various tools. The Explorer interface of Microsoft Windows XP does not allow the user to rename a file with an initial &apos;.&apos; though it does allow access to such files, and Windows&apos; Notepad program does allow files to be saved with such names. Where Unix programs that use dotfiles are ported to Windows, they are sometimes modified to accept some other naming convention; for example, GNU Emacs permits its configuration file to be named _emacs instead of.emacs. [ http://www.gnu.org/software/emacs/windows/Installing-Emacs.html Installing Emacs - GNU Emacs FAQ For MS Windows Gnu.org 2012-02-29 ] IBM &apos;s AIX uses an Object Data Manager (ODM) database to store some system settings,some of which need to be available at boot time. [ Microsoft DOS ] DOS primarily relies on two files called CONFIG.SYS and AUTOEXEC.BAT. These were retained up to Windows 98SE, but were not strictly required to run Windows applications. [ Microsoft Windows ] The Microsoft Windows family of operating systems and their attendant applications utilize a similar system of configuration files. Windows 3.0 had an API for INI file s (from &quot; initialization &quot; ). Many Windows programs abandoned configuration files to use the Windows Registry to store information. [ IBM OS/2 ] IBM&apos;s OS/2 uses a binary format, also with a.INI suffix, but this differs from the Windows versions.It contains a list of lists of untyped key-value pairs. { The OS/2 INI Files by James J. Weinkam. } Two files control system-wide settings: OS2.INI and OS2SYS.INI.Application developers can choose whether to use them or create a specific file for their applications. [ Configuration languages ] Many language specifications have been created specifically to describe and retain configurations. These are frequently not Turing complete (nor need to be, by definition). A notable exception is Lua, which started out specifically as a configuration language for use in other programs. It evolved into a complete programming language, but retains a phrasing that allows configuration descriptions to be read directly into a native, stateful, tabulated set of variable-key pairings accessible to other programs (via a library), as well as allowing (self or external) invocation of commands to augment configuration activities. The class includes all markup languages. The trend in the increase of XML and YAML (among other formats) for use as configuration-file formats is at least partially attributable to the increase in popularity of open source and platform neutral software applications and libraries. Moreover, the specification s describing these formats are routinely made available to the public, thus increasing the availability of parser s and emitter s across programming languages. [ See also ] The INI file format is a de facto standard for configuration files..properties is a file extension for files mainly used in Java related technologies to store the configurable parameters of an application. YAML is used by some for more complex configuration formats. [ References ] [ External links ] libprf1 - alpha cross-platform, multi-language support for accessing the Preferences Registry Format (PRF) 1.0 configuration files ar:ملف اعداد cs:Konfigurační soubor de:Konfigurationsdatei fr:Fichier de configuration kk:Конфигурация файлы nl:Configuratiebestand ja:設定ファイル pl:Plik konfiguracyjny ru:Конфигурация программного обеспечения