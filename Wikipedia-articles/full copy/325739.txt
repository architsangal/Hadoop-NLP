[ This article is about the Lucas–Lehmer test that only applies to Mersenne numbers. For the Lucas–Lehmer test that applies to a natural number n, see Lucas primality test. For the Lucas–Lehmer–Riesel test, see Lucas–Lehmer–Riesel test. ] In mathematics, the Lucas–Lehmer test (LLT) is a primality test for Mersenne number s. The test was originally developed by Édouard Lucas in 1856, { The Largest Known Prime by Year: A Brief History } and subsequently improved by Lucas in 1878 and Derrick Henry Lehmer in the 1930s. [ The test ] The Lucas–Lehmer test works as follows. Let M p  =  2 p   &amp; minus;  1 be the Mersenne number to test with p an odd prime (because p is exponentially smaller than M p, we can use a simple algorithm like trial division for establishing its primality). Define a sequence {s  i } for all i ≥ 0 by s_i= \begin{cases} 4 &amp; \text{if }i=0; \\ s_{i-1}^2-2 &amp; \text{otherwise.} \end{cases} The first few terms of this sequence are 4, 14, 194, 37634,... [ A003010 ].Then M p is prime iff s_{p-2}\equiv0\pmod{M_p}. The number s p   &amp; minus;  2  mod  M p is called the Lucas–Lehmer residue of p. (Some authors equivalently set s 1  =  4 and test s p &amp; minus;1 mod M p ). In pseudocode, the test might be written: { &apos;&apos;// Determine if M p = 2 p &amp; minus; 1 is prime } { Lucas–Lehmer(p) } { var s = 4 } { var M = 2 p &amp; minus; 1 } { repeat p &amp; minus; 2 times: } { s = ((s &amp; times; s) &amp; minus; 2) mod M } { if s = 0 return PRIME else return COMPOSITE } By performing the mod M at each iteration, we ensure that all intermediate results are at most p bits (otherwise the number of bits would double each iteration). It is exactly the same strategy employed in modular exponentiation. [ Time complexity ] In the algorithm as written above, there are two expensive operations during each iteration: the multiplication s   &amp; times;  s, and the mod M operation. The mod M operation can be made particularly efficient on standard binary computers by observing the following simple property: k \equiv (k \hbox{ mod } 2^n) + \lfloor k/2^n \rfloor \pmod{2^n - 1}. In other words, if we take the least significant n bits of k, and add the remaining bits of k, and then do this repeatedly until at most n bits remain, we can compute the remainder after dividing k by the Mersenne number 2 n &amp; minus;1 without using division. For example: 916 mod 2 5 &amp; minus;1 = 1110010100 2 mod 2 5 &amp; minus;1 = 11100 2 + 10100 2 mod 2 5 &amp; minus;1 = 110000 2 mod 2 5 &amp; minus;1 = 1 2 + 10000 2 mod 2 5 &amp; minus;1 = 10001 2 mod 2 5 &amp; minus;1 = 10001 2 = 17. Moreover, since s &amp; times; s will never exceed M 2 &lt; 2 2p, this simple technique converges in at most 1 p-bit addition (and possibly a carry from the pth bit to the 1st bit), which can be done in linear time. As a small exceptional case, the above algorithm will produce 2 n &amp; minus;1 for a multiple of the modulus, rather than the correct value of zero; this should be accounted for. With the modulus out of the way, the asymptotic complexity of the algorithm depends only on the multiplication algorithm used to square s at each step. The simple &quot; grade-school &quot; algorithm for multiplication requires O (p 2 ) bit-level or word-level operations to square a p-bit number, and since we do this O(p) times, the total time complexity is O(p 3 ). A more efficient multiplication method, the Schönhage–Strassen algorithm based on the Fast Fourier transform, requires O(p log p log log p) time to square a p-bit number, reducing the complexity to O(p 2 log p log log p) or Õ(p 2 ). [ Colquitt W. N. Welsh L., Jr. A New Mersenne Prime Mathematics of Computation 56 194 867–870 1991 The use of the FFT speeds up the asymptotic time for the Lucas–Lehmer test for M p from O(p3 ) to O(p2 log plog log p) bit operations. ]. Currently the most efficient known multiplication algorithm, Fürer&apos;s algorithm, needs p \log p\ 2^{O(\log^* p)} time to multiply two p-bit numbers. By comparison, the most efficient randomized primality test for general integers, the Miller–Rabin primality test, takes O(k p 2 log p log log p) bit operations using FFT multiplication for a p-digit number (here p can be any natural number, not necessarily a prime), where k is the number of iterations and is related to the error rate. So it is in the same complexity class as the Lucas-Lehmer test for constant k. But in practice the cost of doing many iterations and other differences leads to worse performance for Miller–Rabin. The most efficient deterministic primality test for general integers, the AKS primality test, requires Õ(p 6 ) bit operations in its best known variant and is dramatically slower in practice. [ Examples ] Suppose we wish to verify that M 3 = 7 is prime using the Lucas–Lehmer test. We start out with s set to 4 and then update it 3 &amp; minus;2  =  1 time, taking the results mod 7: s ← ((4 &amp; times; 4) &amp; minus; 2) mod 7 = 0 Because we end with s set to zero, M 3 is prime. On the other hand, M 11 = 2047 = 23 &amp; times; 89 is not prime. To show this, we start with s set to 4 and update it 11 &amp; minus;2  =  9 times, taking the results mod 2047: s ← ((4 &amp; times; 4) &amp; minus; 2) mod 2047 = 14 s ← ((14 &amp; times; 14) &amp; minus; 2) mod 2047 = 194 s ← ((194 &amp; times; 194) &amp; minus; 2) mod 2047 = 788 s ← ((788 &amp; times; 788) &amp; minus; 2) mod 2047 = 701 s ← ((701 &amp; times; 701) &amp; minus; 2) mod 2047 = 119 s ← ((119 &amp; times; 119) &amp; minus; 2) mod 2047 = 1877 s ← ((1877 &amp; times; 1877) &amp; minus; 2) mod 2047 = 240 s ← ((240 &amp; times; 240) &amp; minus; 2) mod 2047 = 282 s ← ((282 &amp; times; 282) &amp; minus; 2) mod 2047 = 1736 Because s is not zero, M 11 =2047 is not prime. Notice that we learn nothing about the factors of 2047, only its Lucas–Lehmer residue, 1736. [ Proof of correctness ] Lehmer&apos;s original proof of the correctness of this test is complex, so we&apos;ll depend upon more recent refinements. Recall the definition: s_i= \begin{cases} 4 &amp; \text{if }i=0; \\ s_{i-1}^2-2 &amp; \text{otherwise.} \end{cases} Then our theorem is that M p is prime iff s_{p-2}\equiv0\pmod{M_p}. We begin by noting that {\langle}s_i{\rangle} is a recurrence relation with a closed-form solution. Define \omega = 2 + \sqrt{3} and \bar{\omega} = 2 - \sqrt{3}; then we can verify by induction that s_i = \omega^{2^i} + \bar{\omega}^{2^i} for all i: s_0 = \omega^{2^0} + \bar{\omega}^{2^0} = (2 + \sqrt{3}) + (2 - \sqrt{3}) = 4. \begin{array}{lcl}s_n &amp; = &amp; s_{n-1}^2 - 2 \\ &amp; = &amp; \left(\omega^{2^{n-1}} + \bar{\omega}^{2^{n-1}}\right)^2 - 2 \\ &amp; = &amp; \omega^{2^n} + \bar{\omega}^{2^n} + 2(\omega\bar{\omega})^{2^{n-1}} - 2 \\ &amp; = &amp; \omega^{2^n} + \bar{\omega}^{2^n}, \\ \end{array} where the last step follows from \omega\bar{\omega} = (2 + \sqrt{3})(2 - \sqrt{3}) = 1. We will use this in both parts. [ Sufficiency ] In this direction we wish to show that s_{p-2}\equiv0\pmod{M_p} implies that M_p is prime. We relate a straightforward proof exploiting elementary group theory given by J. W. Bruce [ J. W. Bruce A Really Trivial Proof of the Lucas–Lehmer Test The American Mathematical Monthly 100 4 370 –371 1993 ] as related by Jason Wojciechowski. { Jason Wojciechowski. Mersenne Primes, An Introduction and Overview. 2003. } Suppose s_{p-2} \equiv 0 \pmod{M_p}. Then \omega^{2^{p-2}} + \bar{\omega}^{2^{p-2}} = kM_p for some integer k, and: \begin{align} \omega^{2^{p-2}} &amp; = kM_p - \bar{\omega}^{2^{p-2}} \\ \left(\omega^{2^{p-2}}\right)^2 &amp; = kM_p\omega^{2^{p-2}} - (\omega\bar{\omega})^{2^{p-2}} \\ \omega^{2^{p-1}} &amp; = kM_p\omega^{2^{p-2}} - 1.\quad\quad\quad\quad\quad(1) \end{align} Now suppose M p is composite, and let q be the smallest prime factor of M p. Since Mersenne numbers are odd, we have q   &gt;  2. Define the set X = \{a + b\sqrt{3} | a, b \in \mathbb{Z}_q\} with q 2 elements, where \mathbb{Z}_q is the integers mod q, a finite field (in the language of ring theory X is the quotient of the univariate polynomial ring \mathbb{Z}_q[T] by the ideal generated by (T^2 - 3) ). The multiplication operation in X is defined by: (a + b\sqrt{3})(c + d\sqrt{3}) = [(ac + 3bd) \hbox{ mod } q] + [(bc + ad) \hbox{ mod } q] \sqrt{3}. Since q   &gt;  2, ~ \omega and \bar{\omega} are in X (in fact \omega+ (T^2 - 3), \bar{\omega}+ (T^2 - 3) are in X, but by abuse of language we identify ~ \omega and \bar{\omega} with their images in X under the natural ring homomorphism from \mathbb{Z}[\sqrt{3}] to X which sends the square root of 3 to T). Any product of two numbers in X is in X, but it&apos;s not a group under multiplication because not every element x has an inverse y such that xy = 1 (in fact X is a ring and the set of non-zero elements of X is a group if and only if \mathbb{Z}_q does not contain a square root of 3). If we consider only the elements that have inverses, we get a group X* of size at most q^2-1 (since 0 has no inverse). Now, since M_p \equiv 0 \pmod q, and \omega \in X, we have kM_p\omega^{2^{p-2}} = 0 in X, which by equation (1) gives \omega^{2^{p-1}} = -1. Squaring both sides gives \omega^{2^p} = 1, showing that \omega is invertible with inverse \omega^{2^{p}-1} and so lies in X*, and moreover has an order dividing 2^p. In fact the order must equal 2^p, since \omega^{2^{p-1}} \neq 1 and so the order does not divide 2^{p-1}. Since the order of an element is at most the order (size) of the group, we conclude that &lt; math &gt; 2^p \leq q^2 - 1 &lt; q^2 &lt; /math &gt;. But since q is the smallest prime factor of the composite M_p, we must have q^2 \leq M_p = 2^p-1, yielding the contradiction &lt; math &gt; 2^p &lt; 2^p-1 &lt; /math &gt;. So M_p is prime. [ Necessity ] In the other direction, we suppose M_p is prime and show s_{p-2} \equiv0\pmod{M_p}. We rely on a simplification of a proof by Öystein J. R.Ödseth. { Öystein J. R. Ödseth. A note on primality tests for N = h · 2 &lt; sup &gt; n &lt; /sup &gt; − 1. Department of Mathematics, University of Bergen. } First, notice that 3 is a quadratic non-residue mod  M p, since 2  p   &amp; minus;  1 for odd p   &gt;  1 only takes on the value 7 mod 12, and so the Legendre symbol properties tell us (3|M_p) is &amp; minus;1. Euler&apos;s criterion then gives us: 3^{(M_p-1)/2} \equiv -1 \pmod{M_p}.\, On the other hand, 2 is a quadratic residue mod M_p, since 2^p \equiv 1 \pmod{M_p} and so 2 \equiv 2^{p+1} = \left(2^{(p+1)/2}\right)^2 \pmod{M_p}. Euler&apos;s criterion again gives: 2^{(M_p-1)/2} \equiv 1 \pmod{M_p}.\, Next, define \sigma = 2\sqrt{3}, and define X* similarly as before as the multiplicative group of \{a + b\sqrt{3} | a, b \in \mathbb{Z}_{M_p}\}. We will use the following lemmas: (x+y)^{M_p} \equiv x^{M_p} + y^{M_p} \pmod{M_p} (from Proofs of Fermat&apos;s little theorem#Proof_using_the_binomial_theorem ) a^{M_p} \equiv a \pmod{M_p} for every integer a ( Fermat&apos;s little theorem ) Then, in the group X* we have: \begin{align} (6+\sigma)^{M_p} &amp; = 6^{M_p} + (2^{M_p})(\sqrt{3}^{M_p}) \\ &amp; = 6 + 2(3^{(M_p-1)/2})\sqrt{3} \\ &amp; = 6 + 2(-1)\sqrt{3} \\ &amp; = 6 - \sigma. \end{align} We chose \sigma such that \omega = (6+\sigma)^2/24. Consequently, we can use this to compute \omega^{(M_p+1)/2} in the group X*: \begin{align} \omega^{(M_p+1)/2} &amp; = (6 + \sigma)^{M_p+1}/24^{(M_p+1)/2} \\ &amp; = (6 + \sigma)^{M_p}(6 + \sigma)/(24 \times 24^{(M_p-1)/2}) \\ &amp; = (6 - \sigma)(6 + \sigma)/(-24) \\ &amp; = -1. \end{align} where we use the fact that 24^{(M_p-1)/2} = (2^{(M_p-1)/2})^3(3^{(M_p-1)/2}) = (1)^3(-1) = -1. Since M_p \equiv 3 \pmod 4, all that remains is to multiply both sides of this equation by \bar{\omega}^{(M_p+1)/4} and use \omega\bar{\omega}=1 : \begin{align} \omega^{(M_p+1)/2}\bar{\omega}^{(M_p+1)/4} &amp; = -\bar{\omega}^{(M_p+1)/4} \\ \omega^{(M_p+1)/4} + \bar{\omega}^{(M_p+1)/4} &amp; = 0 \\ \omega^{(2^p-1+1)/4} + \bar{\omega}^{(2^p-1+1)/4} &amp; = 0 \\ \omega^{2^{p-2}} + \bar{\omega}^{2^{p-2}} &amp; = 0 \\ s_{p-2} &amp; = 0. \end{align} Since s p &amp; minus;2 is an integer and is zero in X*, it is also zero mod  M p. [ Applications ] The Lucas–Lehmer test is the primality test used by the Great Internet Mersenne Prime Search to locate large primes, and has been successful in locating many of the largest primes known to date. { What are Mersenne primes? How are they useful? Frequently Asked Questions. } { GIMPS Home Page. } The test is considered valuable because it can provably test a very large number for primality within affordable time and, in contrast to the equivalently fast Pépin&apos;s test for any Fermat number, can be tried on a large search space of numbers with the required form before reaching computational limits. [ See also ] Mersenne&apos;s conjecture Lucas–Lehmer–Riesel test GIMPS [ References ] [ 2 ] [ Richard Crandall Crandall, Richard Carl Pomerance Carl Pomerance 2001 Prime Numbers: A Computational Perspective Springer Berlin 1st 0-387-94777-9 Section 4.2.1: The Lucas–Lehmer test 167 –170 ] [ External links ] [ Lucas-LehmerTest Lucas–Lehmer test ] GIMPS (The Great Internet Mersenne Prime Search) A proof of Lucas–Lehmer–Reix test (for Fermat numbers) Lucas–Lehmer test at MersenneWiki Category:Primality tests ar:اختبار لوكاس-ليهمر لأولية عدد ما ca:Prova de Lucas-Lehmer per a nombres de Mersenne da:Lucas-Lehmer de:Lucas-Lehmer-Test es:Test de Lucas-Lehmer fr:Test de primalité de Lucas-Lehmer pour les nombres de Mersenne ko:루카스–레머 소수판별법 he:מבחן לוקאס-להמר למספרי מרסן nl:Lucas-Lehmertest voor mersennegetallen pl:Test Lucasa-Lehmera ru:Тест Люка — Лемера fi:Lucasin ja Lehmerin alkulukutesti Mersennen luvuille zh:卢卡斯-莱默检验法