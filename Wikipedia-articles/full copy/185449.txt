[ This article is about the W3C&apos;s XML Schema language, also known as XSD (XML Schema Definition). For information about XML schema languages in general, see XML schema ] [ XML Schema (W3C).xsd application/xml, text/xml World Wide Web Consortium XML Schema language XML 1.0, Part 1 Structures (Recommendation), 1.0, Part 2 Datatypes (Recommendation), 1.1, Part 1 Structures (Recommendation), 1.1, Part 2 Datatypes (Recommendation) ] XML Schema, published as a W3C recommendation in May 2001, [ http://www.dblab.ntua.gr/~bikakis/XML%20and%20Semantic%20Web%20W3C%20Standards%20Timeline-History.pdf XML and Semantic Web W3C Standards Timeline 2012-02-04 ] is one of several XML schema languages. It was the first separate schema language for XML to achieve Recommendation status by the W3C. Because of confusion between XML Schema as a specific W3C specification, and the use of the same term to describe schema languages in general, some parts of the user community referred to this language as WXS, an initialism for W3C XML Schema, while others referred to it as XSD, an initialism for XML Schema Documentâ€”a document written in the XML Schema language, typically containing the &quot; xsd &quot; XML namespace prefix and stored with the &quot;.xsd &quot; filename extension. In Version 1.1 the W3C has chosen to adopt XSD as the preferred name, and that is the name used in this article. Like all XML schema languages, XSD can be used to express a set of rules to which an XML document must conform in order to be considered &apos;valid&apos; according to that schema. However, unlike most other schema languages, XSD was also designed with the intent that determination of a document&apos;s validity would produce a collection of information adhering to specific data type s. Such a post-validation infoset can be useful in the development of XML document processing software, but the schema language&apos;s dependence on specific data types has provoked criticism. [ History ] In its appendix of references, the XSD specification acknowledges the influence of DTD s and other early XML schema efforts such as DDML, SOX, XML-Data, and XDR. It has adopted features from each of these proposals but is also a compromise among them. Of those languages, XDR and SOX continued to be used and supported for a while after XML Schema was published. A number of Microsoft products supported XDR until the release of MSXML 6.0 (which dropped XDR in favor of XML Schema) in December 2006. [ http://msdn.microsoft.com/en-us/library/ms761410%28v%3DVS.85%29.aspx Removal of XDR Schema Support in MSXML 6.0 2010-09-19 ] Commerce One, Inc. supported its SOX schema language until declaring bankruptcy in late 2004. The most obvious features offered in XSD that are not available in XML&apos;s native Document Type Definition s (DTDs) are namespace awareness, and datatypes, that is, the ability to define element and attribute content as containing values such as integers and dates rather than arbitrary text. The XSD 1.0 specification was originally published in 2001, with a second edition following in 2004 to correct large numbers of errors. XSD 1.1 became a W3C Recommendation in April 2012. [ Schemas and Schema Documents ] Technically, a schema is an abstract collection of metadata, consisting of a set of schema components: chiefly element and attribute declarations and complex and simple type definitions. These components are usually created by processing a collection of schema documents, which contain the source language definitions of these components. In popular usage, however, a schema document is often referred to as a schema. Schema documents are organized by namespace: all the named schema components belong to a target namespace, and the target namespace is a property of the schema document as a whole. A schema document may include other schema documents for the same namespace, and may import schema documents for a different namespace. When an instance document is validated against a schema (a process known as assessment), the schema to be used for validation can either be supplied as a parameter to the validation engine, or it can be referenced directly from the instance document using two special attributes, xsi:schemaLocation and xsi:noNamespaceSchemaLocation. (The latter mechanism requires the client invoking validation to trust the document sufficiently to know that it is being validated against the correct schema. &quot; xsi &quot; is the conventional prefix for the namespace &quot; http://www.w3.org/2001/XMLSchema-instance &quot;.) XML Schema Documents usually have the filename extension &quot;.xsd &quot;. A unique Internet Media Type is not yet registered for XSDs, so &quot; application/xml &quot; or &quot; text/xml &quot; should be used, as per RFC 3023. [ Data types ] Unlike DTDs, an XML Schema allows the content of an element or attribute to be validated against a data type. For example, an attribute might be constrained to hold only a valid date or a decimal number. XSD provides a set of 19 primitive data type s ( anyURI, base64Binary, boolean, date, dateTime, decimal, double, duration, float, hexBinary, gDay, gMonth, gMonthDay, gYear, gYearMonth, NOTATION, QName, string, and time ). It allows new data types to be constructed from these primitives by three mechanisms: restriction (reducing the set of permitted values), list (allowing a sequence of values), and union (allowing a choice of values from several types). Twenty-five derived types are defined within the specification itself, and further derived types can be defined by users in their own schemas. [ Post-Schema-Validation Infoset ] After XML Schema-based validation, it is possible to express an XML document&apos;s structure and content in terms of the data model that was implicit during validation. The XML Schema data model includes: The vocabulary (element and attribute names) The content model (relationships and structure) The data types This collection of information is called the Post-Schema-Validation Infoset (PSVI). The PSVI gives a valid XML document its &quot; type &quot; and facilitates treating the document as an object, using object-oriented programming (OOP) paradigms. [ Example ] This is an example of a rather simple schema document to describe an address. &lt; ?xml version= &quot; 1.0 &quot; encoding= &quot; utf-8 &quot; ? &gt; A number of development tools can be used to create a graphical representation of a schema. Many of them create diagrams similar to the one shown below: A graphical representation of the schema code above An example of an XML document that conforms to this schema &lt; ?xml version= &quot; 1.0 &quot; encoding= &quot; utf-8 &quot; ? &gt; { Mr. Walter C. Brown } { 49 } { Featherstone Street } { LONDON } { EC1Y 8SY } { UK } [ Secondary uses for XML Schemas ] The primary reason for defining an XML schema is to formally describe an XML document; however the resulting schema has a number of other uses that go beyond simple validation. [ Code generation ] The schema can be used to generate code, referred to as XML Data Binding. This code allows contents of XML documents to be treated as objects within the programming environment. [ Generation of XML file structure documentation ] The schema can be used to generate human-readable documentation of an XML file structure; this is especially useful where the authors have made use of the annotation elements. No formal standard exists for documentation generation, but a number of tools are available, such as the Xs3p stylesheet, that will produce high quality readable HTML and printed material. [ Criticism ] Although XML Schema is successful in that it has been widely adopted and largely achieves what it set out to achieve, it has been the subject of a great deal of severe criticism, perhaps more so than any other W3C Recommendation. A good summary of the criticisms is provided by James Clark { http://www.imc.org/ietf-xml-use/mail-archive/msg00217.html } (who promotes his own alternative, RELAX NG ): There are many surprises in the language, for example that restriction of elements works differently from restriction of attributes. The W3C Recommendation itself is extremely difficult to read. Most users find W3Cs XML Schema Primer much easier to understand XSD lacks any formal mathematical specification. (This makes it difficult to reason about schemas, for example to prove that a modification to a schema is backwards compatible.) XSD provides no facilities to state that the value or presence of one attribute is dependent on the values or presence of other attributes (so-called co-occurrence constraints). XSD offers very weak support for unordered content. The set of XSD datatypes on offer is highly arbitrary. This point is amplified by Uche Ogbuji More on XML class warfare - O&apos;Reilly ONLamp Blog In practice this is not an issue. It is trivial to define your own datatypes. See Simple Type Facets for a list of native datatypes. The two tasks of validation and augmentation (adding type information and default values) should be kept separate. [ Version 1.1 ] XSD 1.1 became a W3C Recommendation in April 2012, which means it is an approved W3C specification. Significant new features in XSD 1.1 are: The ability to define assertions against the document content by means of XPath 2.0 expressions (an idea borrowed from Schematron ) The ability to select the type against which an element will be validated based on the values of the element&apos;s attributes ( &quot; conditional type assignment &quot; ) Relaxing the rules whereby explicit elements in a content model must not match wildcards also allowed by the model The ability to specify wildcards (for both elements and attributes) that apply to all types in the schema, so that they all implement the same extensibility policy Until the Proposed Recommendation draft, XSD 1.1 also proposed the addition of a new numeric data type, precisionDecimal. This proved controversial, and was therefore dropped from the specification at a late stage of development. [ See also ] List of XML schemas - list of XML schemas in use on the Internet sorted by purpose RELAX NG - another XML schema language (an ISO international standard) that is often used with XML Schema datatypes XML Schema Editor - Information about XML Schema Editing Tools XML Schema Language Comparison - Comparison to other XML Schema languages. Unique Particle Attribution [ Further reading ] Definitive XML Schema, Priscilla Walmsley, Prentice-Hall, 2001, ISBN 0-13-065567-8 XML Schema, Eric van der Vlist, O&apos;Reilly, 2001, ISBN 0-596-00252-1 The XML Schema Companion, Neil Bradley, Addison-Wesley, 2003, ISBN 0-321-13617-9 Professional XML Schemas, Jon Ducket et al., Wrox Press, 2001, ISBN 1-86100-547-4 XML Schemas, Lucinda Dykes et al., Sybex, ISBN 0-7821-4045-9 [ References ] [ External links ] [ XML Schema ] W3C XML Schema 1.0 Specification XSD 1.0 Primer XSD 1.0 Structures XSD 1.0 Datatypes Tools W3C XML Schema 1.1 Specification XSD 1.1 Structures XSD 1.1 Datatypes Other [ Computers/Data_Formats/Markup_Languages/XML/Validation/XML_Schema XML Schema ] Category:World Wide Web Consortium standards Category:XML-based standards bg:XML Schema ca:XML Schema cs:XML Schema de:XML Schema es:XML Schema eo:XML-skemo fr:XML Schema hr:XML Schema it:XML Schema he:XSD hu:XSD nl:XML Schema Definitietaal ja:XML Schema no:XML Schema nn:XML-skjema pl:XML Schema pt:XML Schema ru:XML Schema fi:XML-skeema sv:XML Schema uk:XML Schema (W3C) zh:XML Schema