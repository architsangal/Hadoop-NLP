[ the programming language ] [ http://www.nntp.perl.org/group/perl.perl5.porters/2012/05/msg186903.html Perl 5.16.0 is now available 2012-05-21 perl.org ] [ yes 2012 05 20 ] { 5.17.0 } [ http://www.nntp.perl.org/group/perl.perl5.porters/2012/05/msg186908.html Perl 5.17.0 is now available (to work on) 2012-05-21 perl.org ] [ yes 2012 05 20 ] { Yes } { Dynamic } { AWK, } { Smalltalk 80, } { Lisp, } { C, } { C++, } { sed, } { Unix shell, } { Pascal } { Python, } { PHP, } { Ruby, } { ECMAScript, } { LPC, } { Windows PowerShell, } { JavaScript, } { Falcon, } { Perl 6, } { Qore } { C } { Cross-platform } { GNU General Public License or } { Artistic License } [ http://dev.perl.org/licenses Perl Licensing 2011-01-08 dev.perl.org ] {.pl.pm.t } { Perl Programming } { Perl is a } { high-level, } { general-purpose, } { interpreted, } { dynamic programming language. } Though Perl is not officially an acronym, [ Lapworth Leo General Questions About Perl http://learn.perl.org/faq/perlfaq1.html#Whats-the-difference-between-perl-and-Perl- Perl FAQ Perl.org 24 February 2012 ] there are various backronyms in usage, such as: Practical Extraction and Reporting Language. [ Perl Tutorial.org Introducing to Perl http://www.perltutorial.org/introducing-to-perl.aspx Perl Tutorial 24 February 2012 ] Perl was originally developed by Larry Wall in 1987 as a general-purpose Unix scripting language to make report processing easier. [ http://www.perl.com/pub/2000/10/begperl1.html Beginner&apos;s Introduction to Perl 2011-01-08 Sheppard Doug 2000-10-16 dev.perl.org ] Since then, it has undergone many changes and revisions and become widely popular amongst programmers. Larry Wall continues to oversee development of the core language, and its upcoming version, Perl 6. Perl borrows features from other programming languages including C, shell script ing ( sh ), AWK, and sed. [ http://history.perl.org/PerlTimeline.html The Timeline of Perl and its Culture (v3.0_0505) Ashton, Elaine 1999 ] The language provides powerful text processing facilities without the arbitrary data length limits of many contemporary Unix tools, [ Programming Perl, Third Edition Wall, Larry, Tom Christiansen and Jon Orwant O&apos;Reilly Media July 2000 0-596-00027-8 ] facilitating easy manipulation of text file s. Perl gained widespread popularity in the late 1990s as a CGI scripting language, in part due to its parsing abilities. [ Smith Roderick W. Advanced Linux Networking Addison-Wesley Professional 21 Jun 2002 2002 594 2011-01-08 978-0-201-77423-8 ] In addition to CGI, Perl is used for graphics programming, system administration, network programming, finance, bioinformatics, and other applications. Perl is nicknamed &quot; the Swiss Army chainsaw of scripting languages &quot; because of its flexibility and power. [ http://www.perl.com/pub/a/2000/10/begperl1.html Beginner&apos;s Introduction to Perl 2008-07-27 Sheppard Doug 2000-10-16 O&apos;Reilly Media ] In 1998, it was also referred to as the &quot; duct tape that holds the Internet together &quot;, in reference to its ubiquity and perceived inelegance. [ http://www.salon.com/21st/feature/1998/10/cov_13feature.html The joy of Perl 2011-01-08 Leonard Andrew Salon.com ] [ April 2012 H3llBot ] [ History ] [ Early versions ] Larry Wall began work on Perl in 1987, while working as a programmer at Unisys, and released version 1.0 to the comp.sources.misc newsgroup on December 18, 1987. [ http://groups.google.com/group/comp.sources.unix/tree/browse_frm/month/1988-02?_done%3D%2Fgroup%2Fcomp.sources.unix%2Fbrowse_frm%2Fmonth%2F1988-02%3F%26amp%3B comp.sources.unix 2011-01-13 1988-02-01 Google Groups Google ] The language expanded rapidly over the next few years. Perl 2, released in 1988, featured a better regular expression engine. Perl 3, released in 1989, added support for binary data streams. Originally the only documentation for Perl was a single (increasingly lengthy) man page. In 1991, Programming Perl, known to many Perl programmers as the &quot; Camel Book &quot; because of its cover, was published and became the de facto reference for the language. At the same time, the Perl version number was bumped to 4, not to mark a major change in the language but to identify the version that was documented by the book. [ Early Perl 5 ] Perl 4 went through a series of maintenance releases, culminating in Perl 4.036 in 1993. At that point, Wall abandoned Perl 4 to begin work on Perl 5. Initial design of Perl 5 continued into 1994. The perl5-porters mailing list was established in May 1994 to coordinate work on porting Perl 5 to different platforms. It remains the primary forum for development, maintenance, and porting of Perl 5. [ http://www.nntp.perl.org/group/perl.perl5.porters/ perl.perl5.porters archive 2011-01-13 perl.org ] Perl 5.000 was released on October 17, 1994. [ http://perldoc.perl.org/perlhist.html perlhist - the Perl history records 2011-01-21 Perl 5 version 12.2 documentation perldoc.perl.org ] It was a nearly complete rewrite of the interpreter, and it added many new features to the language, including objects, references, lexical (my) variables, and modules. Importantly, modules provided a mechanism for extending the language without modifying the interpreter. This allowed the core interpreter to stabilize, even as it enabled ordinary Perl programmers to add new language features. Perl 5 has been in active development since then. Perl 5.001 was released on March 13, 1995. Perl 5.002 was released on February 29, 1996 with the new prototypes feature. This allowed module authors to make subroutines that behaved like Perl builtins. Perl 5.003 was released June 25, 1996, as a security release. One of the most important events in Perl 5 history took place outside of the language proper and was a consequence of its module support. On October 26, 1995, the Comprehensive Perl Archive Network (CPAN) was established as a repository for Perl module s and Perl itself; as of April 2012, it carries over 24,500 modules by more than 9,500 authors. [ http://www.cpan.org/ CPAN 2012-04-14 CPAN ] Perl 5.004 was released on May 15, 1997, and included among other things the UNIVERSAL package, giving Perl a base object to which all classes were automatically derived and the ability to require versions of modules. Another significant development was the inclusion of the CGI.pm module, [ http://perldoc.perl.org/perl5004delta.html perl5004delta - what&apos;s new for perl5.004 2011-01-08 Perl 5 version 12.2 documentation perldoc.perl.org ] which contributed to Perl&apos;s popularity as a CGI scripting language. [ Patwardhan Nathan Siever Ellen Spainhour Stephen Perl in a Nutshell, Second Edition O&apos;Reilly Media 2002 2011-01-08 978-0-596-00241-1 ] Perl also now supported running under Microsoft Windows and several other operating systems. Perl 5.005 was released on July 22, 1998. This release included several enhancements to the regex engine, new hooks into the backend through the B::* modules, the qr// regex quote operator, a large selection of other new core modules, and added support for several more operating systems, including BeOS. [ http://perldoc.perl.org/perl5005delta.html perl5005delta - what&apos;s new for perl5.005 2011-01-21 Perl 5 version 12.2 documentation perldoc.perl.org ] [ 2000–present ] Perl 5.6 was released on March 22, 2000. Major changes included 64-bit support, Unicode string representation, large file support (i.e. files over 2 GiB) and the &quot; our &quot; keyword. [ http://perldoc.perl.org/perl56delta.html perl56delta - what&apos;s new for perl v5.6.0 2011-01-21 Perl 5 version 12.2 documentation perldoc.perl.org ] [ http://perldoc.perl.org/perl561delta.html perl56delta - what&apos;s new for perl v5.6.x 2011-01-21 Perl 5 version 12.2 documentation perldoc.perl.org ] When developing Perl 5.6, the decision was made to switch the versioning scheme to one more similar to other open source projects; after 5.005_63, the next version became 5.5.640, with plans for development versions to have odd numbers and stable versions to have even numbers. In 2000, Larry Wall put forth a call for suggestions for a new version of Perl from the community. The process resulted in 361 RFC (request for comments) documents which were to be used in guiding development of Perl 6. In 2001, [ http://dev.perl.org/perl6/doc/design/apo/A01.html Apocalypse 1: The Ugly, the Bad, and the Good 2011-01-08 Wall Larry ] work began on the apocalypses for Perl 6, a series of documents meant to summarize the change requests and present the design of the next generation of Perl. They were presented as a digest of the RFCs, rather than a formal document. At this point, Perl 6 existed only as a description of a language. Perl 5.8 was first released on July 18, 2002, and had nearly yearly updates since then. The latest version of Perl 5.8 is 5.8.9, released December 14, 2008. Perl 5.8 improved unicode support, added a new IO implementation, added a new thread implementation, improved numeric accuracy, and added several new modules. [ http://perldoc.perl.org/perl58delta.html perl58delta - what is new for perl v5.8.0 2011-01-21 Perl 5 version 12.2 documentation perldoc.perl.org ] In 2004, work began on the Synopses – originally documents that summarized the Apocalypses, but which became the specification for the Perl 6 language. In February 2005, Audrey Tang began work on Pugs, a Perl 6 interpreter written in Haskell. [ http://www.perl.com/pub/a/2005/03/03/pugs_interview.html A Plan for Pugs 2005-03-03 O&apos;Reilly Media 2011-01-27 ] This was the first concerted effort towards making Perl 6 a reality. This effort stalled in 2006. [ http://www.perlmonks.org/?node_id%3D835936 Re: How to Implement Perl 6 in Ten Years 2011-01-03 Tang Audrey 2010-04-21 PerlMonks ] On December 18, 2007, the 20th anniversary of Perl 1.0, Perl 5.10.0 was released. Perl 5.10.0 included notable new features, which brought it closer to Perl 6. These included a switch statement (called &quot; given &quot; / &quot; when &quot; ), regular expressions updates, and the smart match operator, &quot; ~~ &quot;. [ http://perldoc.perl.org/perl5100delta.html perl5100delta - what is new for perl 5.10.0 2011-01-08 Perl 5 version 12.2 documentation perldoc.perl.org ] [ http://perldoc.perl.org/perlsyn.html#Smart-matching-in-detail perlsyn - Perl syntax 2011-01-21 Perl 5 version 12.2 documentation perldoc.perl.org ] Around this same time, development began in earnest on another implementation of Perl 6 known as Rakudo Perl, developed in tandem with the Parrot virtual machine. As of November 2009, Rakudo Perl has had regular monthly releases and now is the most complete implementation of Perl 6. A major change in the development process of Perl 5 occurred with Perl 5.11; the development community has switched to a monthly release cycle, with planned release dates three months ahead. On April 12, 2010, Perl 5.12.0 was released. Notable core enhancements include new package NAME VERSION syntax, the Yada Yada operator (intended to mark placeholder code that is not yet implemented), implicit strictures, full Y2038 compliance, regex conversion overloading, DTrace support, and Unicode 5.2. [ http://perldoc.perl.org/perl5120delta.html perl5120delta - what is new for perl v5.12.0 2011-01-08 Perl 5 version 12.2 documentation perldoc.perl.org ] On January 21, 2011, Perl 5.12.3 was released; it contains updated modules and some documentation changes. [ http://perldoc.perl.org/perl5123delta.html perldelta - what is new for perl v5.12.3 2011-01-08 Perl 5 version 12.2 documentation perldoc.perl.org ] Version 5.12.4 was released on June 20, 2011. On May 14, 2011, Perl 5.14 was released, the latest version of that branch, 5.14.2, being released on September 26, 2011. On May 20, 2012, Perl 5.16 was released. Notable new features include the ability to specify a given version of perl that one wishes to emulate, allowing users to upgrade their version of perl, but still run old scripts that wold normally be incompatible. [ http://search.cpan.org/~rjbs/perl-5.16.0/pod/perldelta.pod perldelta - what is new for perl v5.16.0 2012-05-21 Perl 5 version 16.0 documentation search.cpan.org ]. Perl 5.16 also updates the core to support Unicode 6.1. [ http://search.cpan.org/~rjbs/perl-5.16.0/pod/perldelta.pod perldelta - what is new for perl v5.16.0 2012-05-21 Perl 5 version 16.0 documentation search.cpan.org ] [ Name ] Perl was originally named &quot; Pearl &quot;. Larry Wall wanted to give the language a short name with positive connotations; he claims that he considered (and rejected) every three- and four-letter word in the dictionary. He also considered naming it after his wife Gloria. Wall discovered the existing PEARL programming language before Perl&apos;s official release and changed the spelling of the name. [ http://www.linuxjournal.com/article/3394 Larry Wall, the Guru of Perl 2011-01-03 Richardson Marjorie 1999-05-01 Linux Journal ] When referring to the language, the name is normally capitalized (Perl) as a proper noun. When referring to the interpreter program itself, the name is often uncapitalized (perl) because most Unix-like file systems are case-sensitive. Before the release of the first edition of Programming Perl, it was common to refer to the language as perl; Randal L. Schwartz, however, capitalized the language&apos;s name in the book to make it stand out better when typeset. This case distinction was subsequently documented as canonical. [ http://perldoc.perl.org/perlfaq1.html#What%27s-the-difference-between-%22perl%22-and-%22Perl%22%3F perlfaq1: What&apos;s the difference between &quot; perl &quot; and &quot; Perl &quot; ? perldoc.perl.org - Perl 5 version 12.2 documentation ] There is some contention about the all-caps spelling &quot; PERL &quot;, which the documentation declares incorrect and which some core community members consider a sign of outsiders. [ Schwartz Randal Randal L. Schwartz PERL as shibboleth and the Perl community http://www.perlmonks.org/index.pl?node_id%3D510594 PerlMonks 2007-06-01 ] The name is occasionally backronym ed as Practical Extraction and Report Language, which appears at the top of the documentation and in some printed literature. { Steve McConnell (2004) Code Complete, 2nd ed., Microsoft Press, p. 65. } Several backronyms have been suggested as equally canonical, including Wall&apos;s own humorous Pathologically Eclectic Rubbish Lister. [ Wall Larry Larry Wall perl - The Perl language interpreter Perl 5 version 12.2 documentation http://perldoc.perl.org/perl.html#BUGS 2011-01-26 ] Indeed, Wall claims that the name was intended to inspire many different expansions. [ Wall Larry Larry Wall Re^7: PERL as shibboleth and the Perl community http://www.perlmonks.org/index.pl?node_id%3D511722 PerlMonks 2011-01-02 ] [ Camel symbol ] alt=The Camel symbol used by O&apos;Reilly Media Programming Perl, published by O&apos;Reilly Media, features a picture of a camel on the cover and is commonly referred to as the &quot; Camel Book &quot;. [ Schwartz Randal L Randal L. Schwartz Phoenix Tom foy brian Brian D Foy Learning Perl, Third Edition 2011-01-08 978-0-596-00132-2 ] This image of a camel has become an unofficial symbol of Perl as well as a general hacker emblem, appearing on T-shirts and other clothing items. O&apos;Reilly owns the image as a trademark but licenses it for non-commercial use, requiring only an acknowledgement and a link to www.perl.com. Licensing for commercial use is decided on a case by case basis. [ http://onlamp.com/pub/a/oreilly/perl/usage/ The Perl Camel Usage and Trademark Information 2011-01-09 O&apos;Reilly Media ] O&apos;Reilly also provides &quot; Programming Republic of Perl &quot; logos for non-commercial sites and &quot; Powered by Perl &quot; buttons for any site that uses Perl. [ Onion symbol ] alt=The onion logo used by The Perl Foundation The Perl Foundation owns an alternative symbol, an onion, which it licenses to its subsidiaries, Perl Mongers, PerlMonks, Perl.org, and others. [ http://www.perlfoundation.org/perl_trademark Perl Trademark 2011-01-09 The Perl Foundation ] The symbol is a visual pun on pearl onion. [ Dan Gillmore Republic Of Perl 1998-10-25 http://articles.chicagotribune.com/1998-10-25/news/9810250094_1_programmers-open-source-movement-programming-community Chicago Tribune 2011-01-10 ] [ Overview ] [ Perl language structure ] Perl is a general-purpose programming language originally developed for text manipulation, but [ 2010 on ] is used for a wide range of tasks including system administration, web development, network programming, games, bioinformatics, and GUI development. The language is intended to be practical (easy to use, efficient, complete) rather than beautiful (tiny, elegant, minimal). [ http://perldoc.perl.org/perlintro.html perlintro -- a brief introduction and overview of Perl 2011-01-10 Kirrily Robert Perl 5 version 12.2 documentation perldoc.perl.org ] Its major features include support for multiple programming paradigm s ( procedural, object-oriented, and functional styles), reference counting memory management (without a cycle-detecting garbage collector), built-in support for text processing, and a large collection of third-party modules. According to Larry Wall, Perl has two slogans. The first is &quot; There&apos;s more than one way to do it &quot;, commonly known as TMTOWTDI. The second slogan is &quot; Easy things should be easy and hard things should be possible &quot;. [ Features ] The overall structure of Perl derives broadly from C. Perl is procedural in nature, with variable s, expressions, assignment statement s, brace -delimited block s, control structure s, and subroutine s. Perl also takes features from shell programming. All variables are marked with leading sigils, which unambiguously identify the data type (for example, scalar, array, hash) of the variable in context. Importantly, sigils allow variables to be interpolated directly into strings. Perl has many built-in functions that provide tools often used in shell programming (although many of these tools are implemented by programs external to the shell) such as sorting, and calling on system facilities. Perl takes lists from Lisp, hashes ( &quot; associative arrays &quot; ) from AWK, and regular expression s from sed. These simplify and facilitate many parsing, text-handling, and data-management tasks. Perl 5 added features that support complex data structure s, first-class function s (that is, closures as values), and an object-oriented programming model. These include references, packages, class-based method dispatch, and lexically scoped variables, along with compiler directive s (for example, the strict pragma). A major additional feature introduced with Perl 5 was the ability to package code as reusable modules. Larry Wall later stated that &quot; The whole intent of Perl 5&apos;s module system was to encourage the growth of Perl culture rather than the Perl core. &quot; { Usenet post, May 10, 1997, with ID 199705101952.MAA00756@wall.org } All versions of Perl do automatic data-typing and automatic memory-management. The interpreter knows the type and storage requirements of every data object in the program; it allocates and frees storage for them as necessary using reference counting (so it cannot deallocate circular data structures without manual intervention). Legal type-conversions — for example, conversions from number to string — are done automatically at run time; illegal type conversions are fatal errors. [ Design ] The design of Perl can be understood as a response to three broad trends in the computer industry: falling hardware costs, rising labor costs, and improvements in compiler technology. Many earlier computer languages, such as Fortran and C, aimed to make efficient use of expensive computer hardware. In contrast, Perl is designed to make efficient use of expensive computer-programmers. Perl has many features that ease the task of the programmer at the expense of greater CPU and memory requirements. These include automatic memory management; dynamic typing; strings, lists, and hashes; regular expressions; introspection; and an eval() function. Perl follows the theory of &quot; no built-in limits &quot;, an idea similar to the Zero One Infinity rule. Wall was trained as a linguist, and the design of Perl is very much informed by linguistic principles. Examples include Huffman coding (common constructions should be short), good end-weighting (the important information should come first), and a large collection of language primitives. Perl favors language constructs that are concise and natural for humans to write, even where they complicate the Perl interpreter. Perl syntax reflects the idea that &quot; things that are different should look different. &quot; [ http://www.linuxjournal.com/article/2070 Wherefore Art, Thou? 2011-03-13 Wall Larry 1997-03-01 Linux Journal ] For example, scalars, arrays, and hashes have different leading sigils. Array indices and hash keys use different kinds of braces. Strings and regular expressions have different standard delimiters. This approach can be contrasted with languages such as Lisp, where the same S-expression construct and basic syntax are used for many different purposes. Perl does not enforce any particular programming paradigm (procedural, object-oriented, functional, or others) or even require the programmer to choose among them. There is a broad practical bent to both the Perl language and the community and culture that surround it. The preface to Programming Perl begins: &quot; Perl is a language for getting your job done. &quot; One consequence of this is that Perl is not a tidy language. It includes many features, tolerates exceptions to its rules, and employs heuristics to resolve syntactical ambiguities. Because of the forgiving nature of the compiler, bugs can sometimes be hard to find. Perl&apos;s function documentation remarks on the variant behavior of built-in functions in list and scalar contexts that &quot; In general, they do what you want, unless you want consistency. &quot; [ http://perldoc.perl.org/perlfunc.html perlfunc - Perl builtin functions 2011-01-10 Perl 5 version 12.2 documentation perldoc.perl.org ] No written specification or standard for the Perl language exists for Perl versions through Perl 5, and there are no plans to create one for the current version of Perl. There has been only one implementation of the interpreter, and the language has evolved along with it. That interpreter, together with its functional tests, stands as a de facto specification of the language. Perl 6, however, started with a specification, [ http://www.perl6.org/specification Perl 6 Specification 2011-01-27 The Perl 6 Project ] and several projects [ http://www.perl6.org/compilers/ Perl 6 Compilers 2011-01-27 The Perl 6 Project ] aim to implement some or all of the specification. [ Applications ] Perl has many and varied applications, compounded by the availability of many standard and third-party modules. Ever since the early days of the Web, programmers have used Perl to write CGI scripts. Perl is known as one of &quot; the three Ps &quot; (along with Python and PHP ), the most popular dynamic languages for writing Web applications. It is also an integral component of the popular LAMP solution stack for web development. Large projects written in Perl include cPanel, Slash, Bugzilla, RT, TWiki, and Movable Type. Many high-traffic websites use Perl extensively. Examples include Amazon.com, bbc.co.uk, Priceline.com, Craigslist, [ Gilmore W. J. Beginning PHP and MySQL: From Novice to Professional, Fourth Edition Apress 484 2011-02-13 978-1-4302-3114-1 ] IMDb, [ IMDb Helpdesk: What software/hardware are you using to run the site? Internet Movie Database http://www.imdb.com/help/search?domain%3Dhelpdesk_faq%26amp%3Bindex%3D1%26amp%3Bfile%3Dtechinfo 2011-02-12 ] LiveJournal, Slashdot and Ticketmaster. Perl is often used as a glue language, tying together systems and interfaces that were not specifically designed to interoperate, and for &quot; data munging &quot;, [ http://books.perl.org/book/95 Perl Books - Book: Data Munging with Perl Perl.org December 30, 2010 ] that is, converting or processing large amounts of data for tasks such as creating reports. In fact, these strengths are intimately linked. The combination makes Perl a popular all-purpose language for system administrator s, particularly because short programs can be entered and run on a single command line. With a degree of care, Perl code can be made portable across Windows and Unix. Portable Perl code is often used by suppliers of software (both COTS and bespoke) to simplify packaging and maintenance of software build- and deployment-scripts. Graphical user interfaces (GUIs) may be developed using Perl. For example, Perl/Tk is commonly used to enable user interaction with Perl scripts. Such interaction may be synchronous or asynchronous, using callbacks to update the GUI. For more information about the technologies involved, see Tk, Tcl and WxPerl. Perl is also widely used in finance and in bioinformatics, where it is valued for rapid application development and deployment and for its capability to handle large data-sets. [ Implementation ] Perl is implemented as a core interpreter, written in C, together with a large collection of modules, written in Perl and C. [ 2010 ], the stable version (5.12.3) is 14.2   MB when packaged in a tar file and gzip compressed. [ http://www.cpan.org/src Perl Source Code 2011-01-27 CPAN ] The interpreter is 150,000 lines of C code and compiles to a 1  MB executable on typical machine architectures. Alternatively, the interpreter can be compiled to a link library and embedded in other programs. There are nearly 500 modules in the distribution, comprising 200,000 lines of Perl and an additional 350,000 lines of C code. (Much of the C code in the modules consists of character-encoding tables.) The interpreter has an object-oriented architecture. All of the elements of the Perl language—scalars, arrays, hashes, coderefs, filehandles—are represented in the interpreter by C structs. Operations on these structs are defined by a large collection of macros, typedefs, and functions; these constitute the Perl C API. The Perl API can be bewildering to the uninitiated, but its entry points follow a consistent naming-scheme, which provides guidance to those who use it. The life of a Perl interpreter divides broadly into a compile phase and a run phase. { A description of the Perl 5 interpreter can be found in Programming Perl, 3rd Ed., chapter 18. See particularly page 467, which carefully distinguishes run phase and compile phase from run time and compile time. Perl &quot; time &quot; and &quot; phase &quot; are often confused. } In Perl, the phases are the major stages in the interpreter&apos;s life-cycle. Each interpreter goes through each phase only once, and the phases follow in a fixed sequence. Most of what happens in Perl&apos;s compile phase is compilation, and most of what happens in Perl&apos;s run phase is execution, but there are significant exceptions. Perl makes important use of its capability to execute Perl code during the compile phase. Perl will also delay compilation into the run phase. The terms that indicate the kind of processing that is actually occurring at any moment are compile time and run time. Perl is in compile time at most points during the compile phase, but compile time may also be entered during the run phase. The compile time for code in a string argument passed to the eval built-in occurs during the run phase. Perl is often in run time during the compile phase and spends most of the run phase in run time. Code in BEGIN blocks executes at run time but in the compile phase. At compile time, the interpreter parses Perl code into a syntax tree. At run time, it executes the program by walking the tree. Text is parsed only once, and the syntax tree is subject to optimization before it is executed, so that execution is relatively efficient. Compile-time optimizations on the syntax tree include constant folding and context propagation, but peephole optimization is also performed. Perl has a Turing-complete grammar because parsing can be affected by run-time code executed during the compile phase. [ Schwartz Randal Randal L. Schwartz On Parsing Perl http://www.perlmonks.org/index.pl?node_id%3D44722 2007-01-03 ] Therefore, Perl cannot be parsed by a straight Lex / Yacc lexer / parser combination. Instead, the interpreter implements its own lexer, which coordinates with a modified GNU bison parser to resolve ambiguities in the language. It is often said that &quot; Only perl can parse Perl &quot;, [ ftp://ftp.ora.com/pub/labs/tpj/tpj2.pdf The Perl Journal #19/9.26 2011-02-04 O&apos;Reilly Media ] meaning that only the Perl interpreter ( perl ) can parse the Perl language (Perl), but even this is not, in general, true. Because the Perl interpreter can simulate a Turing machine during its compile phase, it would need to decide the Halting Problem in order to complete parsing in every case. It&apos;s a long-standing result that the Halting Problem is undecidable, and therefore not even perl can always parse Perl. Perl makes the unusual choice of giving the user access to its full programming power in its own compile phase. The cost in terms of theoretical purity is high, but practical inconvenience seems to be rare. Other programs that undertake to parse Perl, such as source-code analyzers and auto-indenters, have to contend not only with ambiguous syntactic constructs but also with the undecidability of Perl parsing in the general case. Adam Kennedy&apos;s PPI project focused on parsing Perl code as a document (retaining its integrity as a document), instead of parsing Perl as executable code (which not even Perl itself can always do). It was Kennedy who first conjectured that &quot; parsing Perl suffers from the &apos; Halting Problem &apos; &quot;, [ http://search.cpan.org/~adamk/PPI-1.215/lib/PPI.pm PPI—Parse, Analyze and Manipulate Perl (without perl) Kennedy, Adam 2006 CPAN ] which was later proved. [ Jeffrey Kegler Rice&apos;s Theorem The Perl Review 4 3 23–29 Summer 2008 ] { and } [ Jeffrey Kegler Perl is Undecidable The Perl Review 5 0 7–11 Fall 2008 ] {, available online at } [ http://www.jeffreykegler.com/Home/perl-and-undecidability Perl and Undecidability Kegler, Jeffrey ] Perl is distributed with some 120,000 functional tests. These run as part of the normal build process and extensively exercise the interpreter and its core modules. Perl developers rely on the functional tests to ensure that changes to the interpreter do not introduce bugs; additionally, Perl users who see that the interpreter passes its functional tests on their system can have a high degree of confidence that it is working properly. Maintenance of the Perl interpreter has become increasingly difficult over the years. The code base has undergone continuous development since 1994. The code has been optimized for performance at the expense of simplicity, clarity, and strong internal interfaces. New features have been added, yet virtually complete backward compatibility with earlier versions is maintained. Major releases of Perl were coordinated by Perl pumpkings, { http://www.perlfoundation.org/perl5/index.cgi?pumpking } which handled integrating patch submissions and bug fixes, but the language has since changed to a rotating, monthly release cycle. Development discussion takes place via the perl5_porters mailing list. As of Perl 5.11, development efforts have included refactoring certain core modules known as &apos;dual lifed&apos; modules out of the Perl core [ http://perldoc.perl.org/perl5110delta.html perl5110delta - what is new for perl v5.11.0 2011-01-08 Perl 5 version 12.2 documentation perldoc.perl.org ] to help alleviate some of these problems. [ Availability ] { Perl is } { dual licensed under both the } { Artistic License and the } { GNU General Public License. Distributions are available for most } { operating system s. It is particularly prevalent on } { Unix and } { Unix-like systems, but it has been ported to most modern (and many obsolete) platforms. With only six reported exceptions, Perl can be compiled from } { source code on all } { POSIX -compliant, or otherwise-Unix-compatible platforms. } [ http://www.cpan.org/ports/ Perl Ports (Binary Distributions) CPAN.org Hietaniemi, Jarkko 1998 ] Because of unusual changes required for the Mac OS Classic environment, a special port called MacPerl was shipped independently. [ http://www.macperl.com/ The MacPerl Pages 1997 Prime Time Freeware ] The Comprehensive Perl Archive Network carries a complete list of supported platforms with links to the distributions available on each. [ http://www.cpan.org/ports/ Perl Ports (Binary Distributions) 2011-01-27 CPAN ] CPAN is also the source for publicly available Perl modules that are not part of the core Perl distribution. [ Windows ] Users of Microsoft Windows typically install one of the native binary distributions of Perl for Win32, most commonly Strawberry Perl or ActivePerl. Compiling Perl from source code under Windows is possible, but most installations lack the requisite C compiler and build tools. This also makes it difficult to install modules from the CPAN, particularly those that are partially written in C. ActivePerl is a closed source distribution from ActiveState that has regular releases that track the core Perl releases. [ http://www.activestate.com/activeperl ActivePerl is Perl for Windows, Mac, Linux, AIX, HP-UX &amp; Solaris 2011-01-09 ActiveState Software ] The distribution also includes the Perl package manager (PPM), [ http://docs.activestate.com/activeperl/5.12/faq/ActivePerl-faq2.html Using PPM 2011-01-09 ActiveState Software ] a popular tool for installing, removing, upgrading, and managing the use of common Perl modules. Strawberry Perl is an open source distribution for Windows. It has had regular, quarterly releases since January 2008, including new modules as feedback and requests come in. Strawberry Perl aims to be able to install modules like standard Perl distributions on other platforms, including compiling XS modules. The Cygwin emulation layer is another way of running Perl under Windows. Cygwin provides a Unix-like environment on Windows, and both Perl and CPAN are available as standard pre-compiled packages in the Cygwin setup program. Because Cygwin also includes the gcc, compiling Perl from source is also possible. [ Database interfaces ] Perl is widely favored for database applications. Its text-handling facilities are useful for generating SQL queries; arrays, hashes, and automatic memory management make it easy to collect and process the returned data. For example, in Tim Bunce&apos;s DBI application programming interface (API), the arguments to the API can be the text of SQL queries; thus it is possible to program in multiple languages at the same time (e.g., for generating a web page using HTML, JavaScript, and SQL in a here document ). The use of Perl variable interpolation to programmatically customize each of the SQL queries, and the specification of Perl arrays or hashes as the structures to programmatically hold the resulting data set s from each SQL query, allows a high-level mechanism for handling large amounts of data for post-processing by a Perl subprogram. { Alligator Descartes and Tim Bunce (2000), Programming the Perl DBI. O&apos;Reilly ISBN 1-56592-699-4 } In early versions of Perl, database interfaces were created by relinking the interpreter with a client-side database library. This was sufficiently difficult that it was done for only a few of the most-important and most widely used databases, and it restricted the resulting perl executable to using just one database interface at a time. In Perl 5, database interfaces are implemented by Perl DBI modules. The DBI (Database Interface) module presents a single, database-independent interface to Perl applications, while the DBD (Database Driver) modules handle the details of accessing some 50 different databases; there are DBD drivers for most ANSI SQL databases. DBI provides caching for database handles and queries, which can greatly improve performance in long-lived execution environments such as mod_perl, [ Bekman Stas Efficient Work with Databases under mod_perl http://perl.apache.org/docs/1.0/guide/performance.html#Efficient_Work_with_Databases_under_mod_perl 2007-09-01 ] helping high-volume systems avert load spikes as in the Slashdot effect. In modern Perl applications, especially those written using Web application framework s such as Catalyst, the DBI module is often used indirectly via object-relational mapper s such as DBIx::Class, Class::DBI or Rose::DB::Object which generate SQL queries and handle data transparently to the application author. [ Comparative performance ] The Computer Language Benchmarks Game, a project hosted by Alioth, compares the performance of implementations of typical programming problems in several programming languages. [ http://alioth.debian.org/projects/shootout/ Alioth: The Computer Language Benchmarks Game: Project Info 2011-01-13 Alioth ] The submitted Perl implementations typically perform toward the high end of the memory-usage spectrum and give varied speed results. Perl&apos;s performance in the benchmarks game is typical for interpreted languages. [ Which programming languages are fastest? 2011-01-13 Computer Language Benchmarks Game Alioth ] Large Perl programs start more slowly than similar programs in compiled languages because perl has to compile the source every time it runs. In a talk at the YAPC::Europe 2005 conference and subsequent article &quot; A Timely Start &quot;, Jean-Louis Leroy found that his Perl programs took much longer to run than he expected because the perl interpreter spent much of the time finding modules because of his over-large include path. [ http://www.perl.com/pub/a/2005/12/21/a_timely_start.html A Timely Start Leroy, Jean-Louis 2005-12-01 O&apos;Reilly ] Unlike Java, Python, and Ruby, Perl has only experimental support for pre-compiling. [ http://search.cpan.org/~nwclark/perl-5.8.8/ext/B/B/Bytecode.pm#KNOWN_BUGS B::Bytecode Perl compiler&apos;s bytecode backend Beattie, Malcolm and Enache Adrian 2003 CPAN ] Therefore Perl programs pay this overhead penalty on every execution. The run phase of typical programs is long enough that amortized startup time is not substantial, but benchmarks that measure very short execution times are likely to be skewed due to this overhead. A number of tools have been introduced to improve this situation. The first such tool was Apache&apos;s mod_perl, which sought to address one of the most-common reasons that small Perl programs were invoked rapidly: CGI Web development. ActivePerl, via Microsoft ISAPI, provides similar performance improvements. Once Perl code is compiled, there is additional overhead during the execution phase that typically isn&apos;t present for programs written in compiled languages such as C or C++. Examples of such overhead include bytecode interpretation, reference-counting memory management, and dynamic type-checking. [ Optimizing ] Like any code, Perl programs can be tuned for performance using benchmarks and profiles after a readable and correct implementation is finished. In part because of Perl&apos;s interpreted nature, writing more-efficient Perl will not always be enough to meet one&apos;s performance goals for a program. In such situations, the most-critical routines of a Perl program can be written in other languages such as C or Assembler, which can be connected to Perl via simple Inline modules or the more-complex-but-flexible XS mechanism. [ http://search.cpan.org/~sisyphus/Inline-0.47/Inline.pod Inline - search.cpan.org 2011-01-26 Ingerson Brian CPAN ] [ April 2012 H3llBot ] Nicholas Clark, a Perl core developer, discusses some Perl design trade-offs and solutions in a 2002 document called &quot; When perl is not quite fast enough &quot;. [ http://www.ccl4.org/~nick/P/Fast_Enough/ When perl is not quite fast enough 2011-01-02 Clark Nicholas ] [ Perl 6 ] [ Perl 6 ] &apos;&apos;Camelia&apos;&apos;, the logo for the Perl 6 project. http://perl6.org/ Perl 6 2011-02-27 The Perl 6 Project At the 2000 Perl Conference, Jon Orwant made a case for a major new language initiative. [ http://www.nntp.perl.org/group/perl.perl6.meta/2000/10/msg424.html Transcription of Larry&apos;s talk 2011-01-25 Torkington Nathan nntp.perl.org ] This led to a decision to begin work on a redesign of the language, to be called Perl 6. Proposals for new language features were solicited from the Perl community at large, and more than 300 RFCs were submitted. Larry Wall spent the next few years digesting the RFCs and synthesizing them into a coherent framework for Perl 6. He has presented his design for Perl 6 in a series of documents called &quot; apocalypses &quot;, which are numbered to correspond to chapters in Programming Perl. [ 2011 January ], the developing specification of Perl 6 is encapsulated in design documents called Synopses, which are numbered to correspond to Apocalypses. [ http://perlcabal.org/syn/ Official Perl 6 Documentation 2011-01-25 The Perl 6 Project ] Perl 6 is not intended to be backward compatible, although there will be a compatibility mode. Perl 6 and Perl 5 are distinct languages with a common ancestry. [ http://dev.perl.org/perl6/ Perl 6 - dev.perl.org 2011-01-25 dev.perl.org ] Thesis work by Bradley M. Kuhn, overseen by Larry Wall, considered the possible use of the Java virtual machine as a runtime for Perl. [ Kuhn Bradley Bradley M. Kuhn Considerations on Porting Perl to the Java Virtual Machine University of Cincinnati January 2001 http://www.ebb.org/bkuhn/writings/technical/thesis/ 2008-06-28 ] Kuhn&apos;s thesis showed this approach to be problematic. In 2001, it was decided that Perl 6 would run on a cross-language virtual machine called Parrot. This will mean that other languages targeting the Parrot will gain native access to CPAN, allowing some level of cross-language development. In 2005, Audrey Tang created the pugs project, an implementation of Perl 6 in Haskell. This was, and continues to act as, a test platform for the Perl 6 language (separate from the development of the actual implementation) allowing the language designers to explore. The pugs project spawned an active Perl/Haskell cross-language community centered around the freenode #perl6 IRC channel. A number of features in the Perl 6 language now show similarities to Haskell. [ August 2011 ] As of 2012, Perl 6 development is primarily centered around two compilers [ http://perl6.org/compilers/features Feature comparison of Perl 6 compilers ], Rakudo Perl 6, an implementation running on top of the Parrot virtual machine, and Niecza, which targets the Common Language Runtime. [ Future of Perl 5 ] Development of Perl 5 is also continuing. Perl 5.12.0 was released in April 2010 with some new features influenced by the design of Perl 6. [ http://www.h-online.com/open/news/item/Perl-5-12-0-released-Update-976919.html Perl 5.12.0 released - Update 2011-01-08 2010-04-13 Heise Media UK ] Perl 5.14.1 was released on June 17, 2011. Perl 5 development versions are released on a monthly basis, with major releases coming out once per year. [ http://lwn.net/Articles/484297/ 2012-03-28 2012-02-29 LWN.net The unstoppable Perl release train? ] Future plans for Perl 5 include making the core language easier to extend from modules, and providing a small, extensible Meta-object protocol in core. [ http://lwn.net/SubscriberLink/487216/8491ce8b050bfd59/ 2012-03-12 Perl 5.16 and beyond ] The relative proportion of searches for &apos;Perl programming&apos;, as compared with similar searches for other programming languages, declined from 2005 to early 2011 (with a subsequent increase since then). [ TIOBE Programming Community Index Perl TIOBE Software Index 2012 http://www.tiobe.com/index.php/paperinfo/tpci/Perl.html 2012-04-27 ] However, according to this same source, Perl has been one of the top ten most popular programming languages since records began in 2001. [ TIOBE Programming Community Index Perl TIOBE Software Index 2012 http://www.tiobe.com/index.php/paperinfo/tpci/Perl.html 2012-04-30 ] [ Perl community ] Perl&apos;s culture and community has developed alongside the language itself. Usenet was the first public venue in which Perl was introduced, but over the course of its evolution, Perl&apos;s community was shaped by the growth of broadening Internet-based services including the introduction of the World Wide Web. The community that surrounds Perl was, in fact, the topic of Larry Wall&apos;s first &quot; State of the Onion &quot; talk. [ http://www.wall.org/~larry/keynote/keynote.html Perl Culture (AKA the first State of the Onion) Larry Wall Larry Wall 1997-08-20 ] [ State of the Onion ] State of the Onion is the name for Larry Wall’s yearly keynote -style summaries on the progress of Perl and its community. They are characterized by his hallmark humor, employing references to Perl’s culture, the wider hacker culture, Wall’s linguistic background, sometimes his family life, and occasionally even his Christian background. Each talk is first given at various Perl conferences and is eventually also published online. [ Perl pastimes ] JAPHs [ Randal L. Schwartz Who is Just another Perl hacker? http://groups.google.com/group/comp.lang.perl.misc/msg/ecc405feeefc120c?pli%3D1 comp.lang.perl.misc 1999-05-02 http://groups.google.com/group/comp.lang.perl.misc/msg/ecc405feeefc120c?pli%3D1 2007-11-12 ] [ http://www.perlmonks.org/bare/?node_id%3D443856 Canonical JAPH 2011-05-16 Schwartz Randal Randal L. Schwartz 2005-03-31 PerlMonks ] In email, Usenet, and message board postings, &quot; Just another Perl hacker &quot; (JAPH) programs are a common trend, originated by Randal L. Schwartz, one of the earliest professional Perl trainers. In the parlance of Perl culture, Perl programmers are known as Perl hackers, and from this derives the practice of writing short programs to print out the phrase &quot; Just another Perl hacker, &quot;. In the spirit of the original concept, these programs are moderately obfuscated and short enough to fit into the signature of an email or Usenet message. The &quot; canonical &quot; JAPH as developed by Schwartz includes the comma at the end, although this is often omitted. Perl golf [ Greg Bacon Re: Incrementing a value in a slice 7imnti$mjh$1@info2.uah.edu comp.lang.perl.misc 1999-05-28 http://groups.google.com/group/comp.lang.perl.misc/msg/7b97c434492c8d20 2011-07-12 ] [ http://www.cypherspace.org/rsa/pureperl.html RSA in 5 lines of perl 2011-01-10 Back Adam ] [ http://codegolf.com/ Code Golf: What is Code Golf? 29degrees 2007 ] Perl &quot; golf &quot; is the pastime of reducing the number of characters (key &quot; strokes &quot; ) used in a Perl program to the bare minimum, much as how golf players seek to take as few shots as possible in a round. The phrase&apos;s first use emphasized the difference between pedestrian code meant to teach a newcomer and terse hacks likely to amuse experienced Perl programmers, an example of the latter being JAPH s that were already used in signatures in Usenet postings and elsewhere. Similar stunts had been an unnamed pastime in the language APL in previous decades. The use of Perl to write a program that performed RSA encryption prompted a widespread and practical interest in this pastime. In subsequent years, the term &quot; code golf &quot; has been applied to the pastime in other languages. A Perl Golf Apocalypse was held at Perl Conference 4.0 in Monterey, California in July 2000. Obfuscation [ Gallo Felix Games, diversions, and Perl culture: best of the Perl journal The Zeroth Obfuscated Perl Contest Jon Orwant O&apos;Reilly Media 2003 oreilly.com/catalog/tpj3/chapter/ch43.pdf 2011-01-12 ] As with C, obfuscated code competitions were a well known pastime in the late 1990s. The Obfuscated Perl Contest was a competition held by The Perl Journal from 1996 to 2000 that made an arch virtue of Perl&apos;s syntactic flexibility. Awards were given for categories such as &quot; most powerful &quot; —programs that made efficient use of space—and &quot; best four-line signature &quot; for programs that fit into four lines of 76 characters in the style of a Usenet signature block. Poetry [ http://www.perlmonks.org/?node_id%3D1590 Perl Poetry 2011-01-27 PerlMonks ] Perl poetry is the practice of writing poems that can be compiled as legal Perl code, for example the piece known as Black Perl. This hobby is made possible by the large number of English words that are used in the Perl. New poems are regularly submitted to the community at PerlMonks. [ Perl on IRC ] There are a number of IRC channels that offer support for the language and some modules. perl #perl6 #cbstream #perlcafe #poe moose #poe #catalyst #dbix-class #perl-help #distzilla #epo #corehackers #sdl #win32 #toolchain #padre perlmonks perl perlhelp perl debian-perl IRC Network Channels irc.freenode.net irc.perl.org irc.slashnet.org irc.oftc.net irc.efnet.net irc.rizon.net irc.debian.org [ CPAN Acme ] There are also many examples of code written purely for entertainment on the CPAN. Lingua::Romana::Perligata, for example, allows writing programs in Latin. [ http://www.csse.monash.edu.au/~damian/papers/HTML/Perligata.html Lingua::Romana::Perligata -- Perl for the XXI-imum Century Conway, Damian ] Upon execution of such a program, the module translates its source code into regular Perl and runs it. The Perl community has set aside the &quot; Acme &quot; namespace for modules that are fun in nature (but its scope has widened to include exploratory or experimental code or any other module that is not meant to ever be used in production). Some of the Acme modules are deliberately implemented in amusing ways. This includes Acme::Bleach, one of the first modules in the Acme:: namespace, [ http://use.perl.org/~acme/journal/200 use Perl; Journal of acme 2001-05-23 Brocard, Leon use Perl ] which allows the program&apos;s source code to be &quot; whitened &quot; (i.e., all characters replaced with whitespace) and yet still work. [ See also ] [ Free software Computer programming ] Outline of Perl Perl language structure Perl Data Language Perl Object Environment Plain Old Documentation [ References ] [ 2 ] [ Further reading ] [ Dominus Mark Jason Higher Order Perl http://hop.perl.plover.com/book/ 2005 Morgan Kaufmann 1-55860-701-3 ] Learning Perl 6th Edition (2011), O&apos;Reilly. Beginner-level introduction to Perl. Modern Perl 2nd Edition (2012), Onyx Neon. Describes Modern Perl programming techniques. Programming Perl 4th Edition (2012), O&apos;Reilly. The definitive Perl reference. Effective Perl Programming 2nd Edition (2010), Addison-Wesley. Intermediate- to advanced-level guide to writing idiomatic Perl. Perl Cookbook, ISBN 0-596-00313-7. Practical Perl programming examples. Functional programming techniques in Perl. [ External links ] [ Category:Perl (programming language) Perl Programming Topic:Perl no Perl no Perl Programming ] [ http://www.perl.org ] Perl.org Comprehensive Perl Archive Network The canonical location for Perl code and modules The Perl Foundation PerlMonks A community committed to sharing Perl knowledge and coding tips * Category:Dynamic programming languages Category:Dynamically typed programming languages Category:Free compilers and interpreters Category:Free software programmed in C Category:Procedural programming languages Category:Object-oriented programming languages Category:Scripting languages Category:Text-oriented programming languages Category:Unix programming tools Category:Cross-platform software Category:American inventions Category:Programming languages created in 1987 Category:High-level programming languages [ de ] als:Perl ar:بيرل bn:পার্ল (প্রোগ্রামিং ভাষা) zh-min-nan:Perl bg:Пърл (език за програмиране) bs:Perl ca:Perl cs:Perl cy:Perl (cyfrifiadureg) da:Perl pdc:Perl de:Perl (Programmiersprache) et:Perl el:Perl es:Perl eo:Perl eu:Perl fa:پرل (زبان برنامه‌نویسی) fr:Perl (langage) ga:Perl gl:Perl gu:પર્લ ko:펄 hi:पर्ल hr:Perl id:Perl it:Perl he:Perl ka:პერლი ku:Perl la:Perl lv:Perl lb:Perl (Programméiersprooch) lt:Perl hu:Perl (programozási nyelv) mk:Perl ml:പേള്‍ mr:पर्ल (संगणकभाषा) ms:Perl my:Perl nl:Perl (programmeertaal) ja:Perl no:Perl nn:Perl pl:Perl pt:Perl ro:Perl ru:Perl sah:Perl sq:Perl simple:Perl sk:Perl sl:Perl ckb:پێرڵ (وێب داڕشتن) sr:Перл (програмски језик) sh:Perl fi:Perl sv:Perl ta:பெர்ள் th:ภาษาเพิร์ล tg:Перл (забони барномасозӣ) tr:Perl uk:Perl ur:Perl vi:Perl bat-smg:Perl zh:Perl